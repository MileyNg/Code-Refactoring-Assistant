filename,iteration,cyclic_complexity,loc,maintainability_index,halstead_volume,halstead_difficulty,halstead_effort,validation_status,original_code,refactored_code
952227.py,0,0,7,69.15,51.89,1.88,97.3,ORIGINAL,,
952227.py,1,0,7,69.15,51.89,1.88,97.3,ACCEPTED,"T = int(input())
for tc in range(0,T) :
	a=sorted(map(int,input().split("" "")))
	if a[0]**2+a[1]**2==a[2]**2 :
		print(""YES"")
	else:
		print(""NO"")","T = int(input())
for _ in range(T):
	a = sorted(map(int,input().split()))
	if a[0]**2 + a[1]**2 == a[2]**2 :
		print(""YES"")
	else:
		print(""NO"")"
952227.py,2,0,4,74.45,51.89,1.88,97.3,ACCEPTED,"T = int(input())
for _ in range(T):
	a = sorted(map(int,input().split()))
	if a[0]**2 + a[1]**2 == a[2]**2 :
		print(""YES"")
	else:
		print(""NO"")","num_cases = int(input())
for _ in range(num_cases):
    a, b, c = sorted(map(int,input().split()))
    print(""YES"" if a**2 + b**2 == c**2 else ""NO"")"
952227.py,3,0,4,72.91,41.21,2.0,82.42,ACCEPTED,"num_cases = int(input())
for _ in range(num_cases):
    a, b, c = sorted(map(int,input().split()))
    print(""YES"" if a**2 + b**2 == c**2 else ""NO"")","num_cases = int(input())
for _ in range(num_cases):
    sides = sorted(map(int,input().split()))
    print(""YES"" if sum(side ** 2 for side in sides[:-1]) == sides[-1] ** 2 else ""NO"")"
952227.py,4,0,4,72.91,41.21,2.0,82.42,ACCEPTED,"num_cases = int(input())
for _ in range(num_cases):
    sides = sorted(map(int,input().split()))
    print(""YES"" if sum(side ** 2 for side in sides[:-1]) == sides[-1] ** 2 else ""NO"")","for _ in range(int(input())):
    sides = sorted(map(int,input().split()))
    is_pythagoras = ""YES"" if sum(side ** 2 for side in sides[:-1]) == sides[-1] ** 2 else ""NO""
    print(is_pythagoras)"
952227.py,5,0,4,72.91,41.21,2.0,82.42,ACCEPTED,"for _ in range(int(input())):
    sides = sorted(map(int,input().split()))
    is_pythagoras = ""YES"" if sum(side ** 2 for side in sides[:-1]) == sides[-1] ** 2 else ""NO""
    print(is_pythagoras)","num_of_trials = int(input())
for _ in range(num_of_trials):
    sides = sorted(map(int,input().split()))
    print(""YES"" if sum(side ** 2 for side in sides[:-1]) == sides[-1] ** 2 else ""NO"")"
952296.py,0,0,20,71.3,182.84,6.3,1151.87,ORIGINAL,,
952296.py,1,0,14,78.27,153.73,5.75,883.95,REJECTED,"# your code goes here
import math

n = int(input())
for i in range(n):
	xa, ya, ra, xb, yb, rb = [float(x) for x in input().split("" "")]
	distance = math.sqrt((xb-xa)**2 + (yb-ya)**2)

	if distance > ra+rb:
		print(0)
	elif distance < abs(ra-rb):
		if ra > rb:
			print(2)
		elif ra < rb:
			print(-2)
		else:
			print(1)
	elif distance <= ra+rb:
		print(1)
			","# your code goes here
import math

n = int(input())
for _ in range(n):
	xa, ya, ra, xb, yb, rb = map(float, input().split())
	distance = math.sqrt((xb-xa)**2 + (yb-ya)**2)

	if distance > ra+rb:
		print(0)
	elif distance <= abs(ra-rb):
		print(2 if ra > rb else (-2 if ra < rb else 1))
	else:
		print(1)"
954044.py,0,0,12,100.0,0.0,0.0,0.0,ORIGINAL,,
954044.py,1,0,7,100.0,0.0,0.0,0.0,ACCEPTED,"#coding: utf-8

a = []

for i in range(10):
	num = input()
	a.append(int(num))

a.sort(reverse=True)

for i in range(3):
	print(a[i])","#coding: utf-8

numbers = [int(input()) for _ in range(10)]
numbers.sort(reverse=True)

for number in numbers[:3]:
	print(number)"
954044.py,2,0,6,100.0,0.0,0.0,0.0,ACCEPTED,"#coding: utf-8

numbers = [int(input()) for _ in range(10)]
numbers.sort(reverse=True)

for number in numbers[:3]:
	print(number)","#coding: utf-8

numbers = sorted([int(input()) for _ in range(10)], reverse=True)

for number in numbers[:3]:
	print(number)"
954044.py,3,4,11,100.0,0.0,0.0,0.0,ACCEPTED,"#coding: utf-8

numbers = sorted([int(input()) for _ in range(10)], reverse=True)

for number in numbers[:3]:
	print(number)","#coding: utf-8

def collect_and_sort_numbers(count):
    return sorted((int(input()) for _ in range(count)), reverse=True)

def print_top_numbers(numbers, top):
    for number in numbers[:top]:
        print(number)

numbers = collect_and_sort_numbers(10)
print_top_numbers(numbers, 3)"
954044.py,4,4,13,100.0,0.0,0.0,0.0,ACCEPTED,"#coding: utf-8

def collect_and_sort_numbers(count):
    return sorted((int(input()) for _ in range(count)), reverse=True)

def print_top_numbers(numbers, top):
    for number in numbers[:top]:
        print(number)

numbers = collect_and_sort_numbers(10)
print_top_numbers(numbers, 3)","#coding: utf-8

def collect_and_sort_numbers(quantity):
    numbers = [int(input()) for _ in range(quantity)]
    numbers.sort(reverse=True)
    return numbers

def display_highest_numbers(sorted_numbers, top_quantity):
    for number in sorted_numbers[:top_quantity]:
        print(number)

collected_numbers = collect_and_sort_numbers(10)
display_highest_numbers(collected_numbers, 3)"
954044.py,5,4,14,91.67,4.75,0.5,2.38,ACCEPTED,"#coding: utf-8

def collect_and_sort_numbers(quantity):
    numbers = [int(input()) for _ in range(quantity)]
    numbers.sort(reverse=True)
    return numbers

def display_highest_numbers(sorted_numbers, top_quantity):
    for number in sorted_numbers[:top_quantity]:
        print(number)

collected_numbers = collect_and_sort_numbers(10)
display_highest_numbers(collected_numbers, 3)","#coding: utf-8

def collect_and_sort_numbers(quantity: int) -> list:
    return sorted((int(input()) for _ in range(quantity)), reverse=True)

def display_highest_numbers(sorted_numbers: list, top_quantity: int) -> None:
    print('\n'.join(map(str, sorted_numbers[:top_quantity])))

def main():
    collected_numbers = collect_and_sort_numbers(10)
    display_highest_numbers(collected_numbers, 3)

if __name__ == ""__main__"":
    main()"
956270.py,0,8,24,61.08,45.0,5.0,225.0,ORIGINAL,,
956270.py,1,5,15,65.01,27.0,1.8,48.6,ACCEPTED,"def main():

    while True:
        try:

            a, b = map(int, input().split())
            print(euclid_algorithm(a, b))

        except EOFError as e:
            break

def euclid_algorithm(a, b):

    while a and b:

        if a > b:
            a = a - b
        else:
            b = b - a

    return a if a else b

if __name__ == '__main__':
    main()","def main():
    while True:
        try:
            a, b = map(int, input().split())
            print(euclidean_algorithm(a, b))
        except EOFError:
            break

def euclidean_algorithm(a, b):
    while b != 0:
        a, b = b, a % b
    return a

if __name__ == '__main__':
    main()"
956270.py,2,5,15,65.01,27.0,1.8,48.6,ACCEPTED,"def main():
    while True:
        try:
            a, b = map(int, input().split())
            print(euclidean_algorithm(a, b))
        except EOFError:
            break

def euclidean_algorithm(a, b):
    while b != 0:
        a, b = b, a % b
    return a

if __name__ == '__main__':
    main()","def main():
    while True:
        try:
            num1, num2 = map(int, input().split())
            print(calculate_gcd(num1, num2))
        except EOFError:
            break

def calculate_gcd(num1, num2):
    while num2 != 0:
        num1, num2 = num2, num1 % num2
    return num1

if __name__ == '__main__':
    main()"
956270.py,3,5,15,66.69,15.51,1.0,15.51,ACCEPTED,"def main():
    while True:
        try:
            num1, num2 = map(int, input().split())
            print(calculate_gcd(num1, num2))
        except EOFError:
            break

def calculate_gcd(num1, num2):
    while num2 != 0:
        num1, num2 = num2, num1 % num2
    return num1

if __name__ == '__main__':
    main()","def main():
    while True:
        try:
            num1, num2 = map(int, input().split())
            print(get_gcd(num1, num2))
        except EOFError:
            break

def get_gcd(num1, num2):
    while num2:
        num1, num2 = num2, num1 % num2
    return num1

if __name__ == '__main__':
    main()"
956270.py,4,5,15,66.69,15.51,1.0,15.51,ACCEPTED,"def main():
    while True:
        try:
            num1, num2 = map(int, input().split())
            print(get_gcd(num1, num2))
        except EOFError:
            break

def get_gcd(num1, num2):
    while num2:
        num1, num2 = num2, num1 % num2
    return num1

if __name__ == '__main__':
    main()","def gcd(num1, num2):
    while num2:
        num1, num2 = num2, num1 % num2
    return num1

def main():
    while True:
        try:
            num1, num2 = map(int, input().split())
            print(gcd(num1, num2))
        except EOFError:
            break

if __name__ == '__main__':
    main()"
956270.py,5,4,19,64.86,15.51,1.0,15.51,ACCEPTED,"def gcd(num1, num2):
    while num2:
        num1, num2 = num2, num1 % num2
    return num1

def main():
    while True:
        try:
            num1, num2 = map(int, input().split())
            print(gcd(num1, num2))
        except EOFError:
            break

if __name__ == '__main__':
    main()","from functools import reduce

def gcd(nums):
    def _gcd(num1, num2):
        while num2:
            num1, num2 = num2, num1 % num2
        return num1
    return reduce(_gcd, nums)

def main():
    while True:
        try:
            nums = list(map(int,input().split()))
            print(gcd(nums))
        except EOFError:
            break

if __name__ == ""__main__"":
    main()"
958432.py,0,9,26,50.71,205.0,4.5,922.5,ORIGINAL,,
958432.py,1,12,30,54.05,87.57,2.0,175.14,ACCEPTED,"import sys,itertools
if sys.version_info[0]>=3: raw_input=input

def dfs(a):
	if len(a)<2: yield (a[0],str(a[0]))
	for i in range(len(a)-1):
		for l in dfs(a[:i+1]):
			for r in dfs(a[i+1:]):
				yield (l[0]+r[0],'(%s + %s)'%(l[1],r[1]))
				yield (l[0]-r[0],'(%s - %s)'%(l[1],r[1]))
				yield (l[0]*r[0],'(%s * %s)'%(l[1],r[1]))

def solve(a):
	for e in itertools.permutations(a):
		for n,s in dfs(e):
			if n==10:
				print(s)
				return True

try:
	while True:
		a=[int(e) for e in raw_input().split()]
		if a==[0,0,0,0]: break
		if not solve(a): print(0)
except EOFError:
	pass","import sys
import itertools

def expression_tree(a):
    if len(a) == 1:
        yield (a[0], str(a[0]))
    for i in range(1, len(a)):
        for left in expression_tree(a[:i]):
            for right in expression_tree(a[i:]):
                yield (left[0] + right[0], f'({left[1]} + {right[1]})')
                yield (left[0] - right[0], f'({left[1]} - {right[1]})')
                yield (left[0] * right[0], f'({left[1]} * {right[1]})')

def solution(a):
    for permutation in itertools.permutations(a):
        for n, s in expression_tree(permutation):
            if n == 10:
                print(s)
                return True
    print(0)

def main():
    for line in sys.stdin:
        a = list(map(int, line.split()))
        if a == [0, 0, 0, 0]:
            break
        solution(a)

if __name__ == ""__main__"":
    main()"
958432.py,2,12,31,53.7,87.57,2.0,175.14,ACCEPTED,"import sys
import itertools

def expression_tree(a):
    if len(a) == 1:
        yield (a[0], str(a[0]))
    for i in range(1, len(a)):
        for left in expression_tree(a[:i]):
            for right in expression_tree(a[i:]):
                yield (left[0] + right[0], f'({left[1]} + {right[1]})')
                yield (left[0] - right[0], f'({left[1]} - {right[1]})')
                yield (left[0] * right[0], f'({left[1]} * {right[1]})')

def solution(a):
    for permutation in itertools.permutations(a):
        for n, s in expression_tree(permutation):
            if n == 10:
                print(s)
                return True
    print(0)

def main():
    for line in sys.stdin:
        a = list(map(int, line.split()))
        if a == [0, 0, 0, 0]:
            break
        solution(a)

if __name__ == ""__main__"":
    main()","import sys
import itertools

def expression_tree(a):
    if len(a) == 1:
        yield (a[0], str(a[0]))
    else:
        for i in range(1, len(a)):
            for left in expression_tree(a[:i]):
                for right in expression_tree(a[i:]):
                    yield (left[0] + right[0], f'({left[1]} + {right[1]})')
                    yield (left[0] - right[0], f'({left[1]} - {right[1]})')
                    yield (left[0] * right[0], f'({left[1]} * {right[1]})')

def print_solution(a):
    for permutation in itertools.permutations(a):
        for n, s in expression_tree(permutation):
            if n == 10:
                print(s)
                return True
    print(0)

def main():
    for line in sys.stdin:
        numbers = list(map(int, line.split()))
        if numbers == [0, 0, 0, 0]:
            break
        print_solution(numbers)

if __name__ == ""__main__"":
    main()"
958432.py,3,13,37,53.35,87.57,2.0,175.14,ACCEPTED,"import sys
import itertools

def expression_tree(a):
    if len(a) == 1:
        yield (a[0], str(a[0]))
    else:
        for i in range(1, len(a)):
            for left in expression_tree(a[:i]):
                for right in expression_tree(a[i:]):
                    yield (left[0] + right[0], f'({left[1]} + {right[1]})')
                    yield (left[0] - right[0], f'({left[1]} - {right[1]})')
                    yield (left[0] * right[0], f'({left[1]} * {right[1]})')

def print_solution(a):
    for permutation in itertools.permutations(a):
        for n, s in expression_tree(permutation):
            if n == 10:
                print(s)
                return True
    print(0)

def main():
    for line in sys.stdin:
        numbers = list(map(int, line.split()))
        if numbers == [0, 0, 0, 0]:
            break
        print_solution(numbers)

if __name__ == ""__main__"":
    main()","import itertools
import sys

def expression_tree(nums):
    if len(nums) == 1:
        yield (nums[0], str(nums[0]))
    else:
        for idx in range(1, len(nums)):
            for left in expression_tree(nums[:idx]):
                for right in expression_tree(nums[idx:]):
                    yield from generate_expressions(left, right)

def generate_expressions(left, right):
    res = [
        (left[0] + right[0], f'({left[1]} + {right[1]})'),
        (left[0] - right[0], f'({left[1]} - {right[1]})'),
        (left[0] * right[0], f'({left[1]} * {right[1]})'),
    ]
    return res

def print_solution(nums):
    for perm in itertools.permutations(nums):
        for n, s in expression_tree(perm):
            if n == 10:
                print(s)
                return True
    print(0)

def process_input():
    for line in sys.stdin:
        nums = list(map(int, line.split()))
        if nums == [0, 0, 0, 0]:
            break
        print_solution(nums)

if __name__ == ""__main__"":
    process_input()"
958432.py,4,13,36,53.7,87.57,2.0,175.14,ACCEPTED,"import itertools
import sys

def expression_tree(nums):
    if len(nums) == 1:
        yield (nums[0], str(nums[0]))
    else:
        for idx in range(1, len(nums)):
            for left in expression_tree(nums[:idx]):
                for right in expression_tree(nums[idx:]):
                    yield from generate_expressions(left, right)

def generate_expressions(left, right):
    res = [
        (left[0] + right[0], f'({left[1]} + {right[1]})'),
        (left[0] - right[0], f'({left[1]} - {right[1]})'),
        (left[0] * right[0], f'({left[1]} * {right[1]})'),
    ]
    return res

def print_solution(nums):
    for perm in itertools.permutations(nums):
        for n, s in expression_tree(perm):
            if n == 10:
                print(s)
                return True
    print(0)

def process_input():
    for line in sys.stdin:
        nums = list(map(int, line.split()))
        if nums == [0, 0, 0, 0]:
            break
        print_solution(nums)

if __name__ == ""__main__"":
    process_input()","import itertools
import sys

def expression_tree(nums):
    if len(nums) == 1:
        yield nums[0], str(nums[0])
    else:
        for idx in range(1, len(nums)):
            for left in expression_tree(nums[:idx]):
                for right in expression_tree(nums[idx:]):
                    yield from generate_expressions(left, right)

def generate_expressions(left, right):
    return [
        (left[0] + right[0], f'({left[1]} + {right[1]})'),
        (left[0] - right[0], f'({left[1]} - {right[1]})'),
        (left[0] * right[0], f'({left[1]} * {right[1]})')
    ]

def print_solution(nums):
    for perm in itertools.permutations(nums):
        for n, s in expression_tree(perm):
            if n == 10:
                print(s)
                return True
    print(0)

def process_input():
    for line in sys.stdin:
        nums = list(map(int, line.split()))
        if nums == [0, 0, 0, 0]:
            break
        print_solution(nums)

if __name__ == ""__main__"":
    process_input()"
958432.py,5,13,37,53.35,87.57,2.0,175.14,ACCEPTED,"import itertools
import sys

def expression_tree(nums):
    if len(nums) == 1:
        yield nums[0], str(nums[0])
    else:
        for idx in range(1, len(nums)):
            for left in expression_tree(nums[:idx]):
                for right in expression_tree(nums[idx:]):
                    yield from generate_expressions(left, right)

def generate_expressions(left, right):
    return [
        (left[0] + right[0], f'({left[1]} + {right[1]})'),
        (left[0] - right[0], f'({left[1]} - {right[1]})'),
        (left[0] * right[0], f'({left[1]} * {right[1]})')
    ]

def print_solution(nums):
    for perm in itertools.permutations(nums):
        for n, s in expression_tree(perm):
            if n == 10:
                print(s)
                return True
    print(0)

def process_input():
    for line in sys.stdin:
        nums = list(map(int, line.split()))
        if nums == [0, 0, 0, 0]:
            break
        print_solution(nums)

if __name__ == ""__main__"":
    process_input()","import itertools
import sys

def generate_expression_tree(nums):
    if len(nums) == 1:
        yield nums[0], str(nums[0])
    else:
        for idx in range(1, len(nums)):
            for left in generate_expression_tree(nums[:idx]):
                for right in generate_expression_tree(nums[idx:]):
                    yield from combine_expressions(left, right)

def combine_expressions(left, right):
    combined_expressions = [
        (left[0] + right[0], f'({left[1]} + {right[1]})'),
        (left[0] - right[0], f'({left[1]} - {right[1]})'),
        (left[0] * right[0], f'({left[1]} * {right[1]})')
    ]
    return combined_expressions

def display_result(nums):
    for permutation in itertools.permutations(nums):
        for result, expression in generate_expression_tree(permutation):
            if result == 10:
                print(expression)
                return True
    print(0)

def parse_inputs():
    for line in sys.stdin:
        nums = list(map(int, line.split()))
        if nums == [0, 0, 0, 0]:
            break
        display_result(nums)

if __name__ == ""__main__"":
    parse_inputs()"
958436.py,0,4,16,57.83,131.18,4.16,545.23,ORIGINAL,,
958436.py,1,4,17,59.53,100.08,3.08,307.93,ACCEPTED,"import sys
if sys.version_info[0]>=3: raw_input=input

def main(roman):
	m={'I':1,'V':5,'X':10,'L':50,'C':100,'D':500,'M':1000}
	r=0
	for i in range(len(roman)):
		r+=m[roman[i]]*(1 if i==len(roman)-1 or m[roman[i]]>=m[roman[i+1]] else -1)
	print(str(r))

if __name__=='__main__':
	try:
		while True:
			main(raw_input().rstrip())
	except EOFError:
		pass","import sys

ROMAN_NUMERAL_MAP = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}

def roman_to_int(roman):
    result = 0
    for i in range(len(roman)):
        if i < len(roman) - 1 and ROMAN_NUMERAL_MAP[roman[i]] < ROMAN_NUMERAL_MAP[roman[i + 1]]:
            result -= ROMAN_NUMERAL_MAP[roman[i]]
        else:
            result += ROMAN_NUMERAL_MAP[roman[i]]
    return result

if __name__ == '__main__':
    for line in sys.stdin:
        roman = line.rstrip()
        print(roman_to_int(roman))"
958436.py,2,3,12,68.68,36.54,2.33,85.26,REJECTED,"import sys

ROMAN_NUMERAL_MAP = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}

def roman_to_int(roman):
    result = 0
    for i in range(len(roman)):
        if i < len(roman) - 1 and ROMAN_NUMERAL_MAP[roman[i]] < ROMAN_NUMERAL_MAP[roman[i + 1]]:
            result -= ROMAN_NUMERAL_MAP[roman[i]]
        else:
            result += ROMAN_NUMERAL_MAP[roman[i]]
    return result

if __name__ == '__main__':
    for line in sys.stdin:
        roman = line.rstrip()
        print(roman_to_int(roman))","ROMAN_NUMERAL_MAP = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}

def roman_to_int(roman: str) -> int:
    result = sum(
        val if val >= ROMAN_NUMERAL_MAP.get(roman[i + 1], 0) else -val
        for i, val in enumerate(map(ROMAN_NUMERAL_MAP.get, roman))
    )
    return result

if __name__ == '__main__':
    import sys
    print(*(roman_to_int(line.strip()) for line in sys.stdin), sep='\n')"
960263.py,0,0,8,69.31,15.51,1.0,15.51,ORIGINAL,,
960263.py,1,0,13,69.31,15.51,1.0,15.51,ACCEPTED,"while True:
    s = input()
    if s == '-': break
    n = int(input())
    for i in range(n):
        h = int(input())
        s = s[h:] + s[:h]
    print(s)","while True:
    string_input = input()
    
    if string_input == '-': 
        break
    
    num_of_shifts = int(input())
    
    for _ in range(num_of_shifts):
        shift_length = int(input())
        string_input = string_input[shift_length:] + string_input[:shift_length]
    
    print(string_input)"
960263.py,2,4,15,67.58,15.51,1.0,15.51,ACCEPTED,"while True:
    string_input = input()
    
    if string_input == '-': 
        break
    
    num_of_shifts = int(input())
    
    for _ in range(num_of_shifts):
        shift_length = int(input())
        string_input = string_input[shift_length:] + string_input[:shift_length]
    
    print(string_input)","def perform_shift_operations():
    while True:
        string_input = input()
        
        if string_input == '-': 
            break

        num_of_shifts = int(input())
        for _ in range(num_of_shifts):
            shift_length = int(input())
            string_input = string_input[shift_length:] + string_input[:shift_length]
        
        print(string_input)

perform_shift_operations()"
960263.py,3,3,8,71.56,15.51,1.0,15.51,ACCEPTED,"def perform_shift_operations():
    while True:
        string_input = input()
        
        if string_input == '-': 
            break

        num_of_shifts = int(input())
        for _ in range(num_of_shifts):
            shift_length = int(input())
            string_input = string_input[shift_length:] + string_input[:shift_length]
        
        print(string_input)

perform_shift_operations()","def perform_shift_operations():
    while (string_input := input()) != '-':
        for _ in range(int(input())):
            shift_length = int(input())
            string_input = string_input[shift_length:] + string_input[:shift_length]
        print(string_input)

perform_shift_operations()"
960263.py,4,3,9,68.46,28.53,1.5,42.79,ACCEPTED,"def perform_shift_operations():
    while (string_input := input()) != '-':
        for _ in range(int(input())):
            shift_length = int(input())
            string_input = string_input[shift_length:] + string_input[:shift_length]
        print(string_input)

perform_shift_operations()","def perform_shift_operations():
    while (input_string := input()) != '-':
        for _ in range(int(input())):
            shift_length = int(input())
            input_string = input_string[shift_length:] + input_string[:shift_length]
        print(input_string)

if __name__ == ""__main__"":
    perform_shift_operations()"
960263.py,5,3,9,68.46,28.53,1.5,42.79,ACCEPTED,"def perform_shift_operations():
    while (input_string := input()) != '-':
        for _ in range(int(input())):
            shift_length = int(input())
            input_string = input_string[shift_length:] + input_string[:shift_length]
        print(input_string)

if __name__ == ""__main__"":
    perform_shift_operations()","def shift_string():
    while (s := input()) != '-':
        for _ in range(int(input())):
            length = int(input())
            s = s[length:] + s[:length]
        print(s)

if __name__ == ""__main__"":
    shift_string()"
963362.py,0,0,11,62.06,91.38,6.0,548.26,ORIGINAL,,
963362.py,1,0,16,62.06,91.38,6.0,548.26,ACCEPTED,"while True:
  n = int(input())
  if n == 0: exit()
  c = 0
  while n != 1:
    c += 1
    if n % 2 == 0:
      n /= 2
    else:
      n = n * 3 + 1
  print(c)","while True:
    n = int(input())
    
    if n == 0: 
        break
        
    counter = 0
    while n != 1:
        counter += 1
        
        if n % 2 == 0:
            n /= 2
        else:
            n = n * 3 + 1
            
    print(counter)"
963362.py,2,3,13,62.73,96.0,4.8,460.8,ACCEPTED,"while True:
    n = int(input())
    
    if n == 0: 
        break
        
    counter = 0
    while n != 1:
        counter += 1
        
        if n % 2 == 0:
            n /= 2
        else:
            n = n * 3 + 1
            
    print(counter)","def get_no_of_operations(n):
    counter = 0
    while n != 1:
        counter += 1
        n = n / 2 if n % 2 == 0 else n * 3 + 1
    return counter

while True:
    n = int(input())
    if n == 0: 
        break

    print(get_no_of_operations(n))"
963362.py,3,3,14,60.53,112.59,4.5,506.65,ACCEPTED,"def get_no_of_operations(n):
    counter = 0
    while n != 1:
        counter += 1
        n = n / 2 if n % 2 == 0 else n * 3 + 1
    return counter

while True:
    n = int(input())
    if n == 0: 
        break

    print(get_no_of_operations(n))","def calculate_operations(n):
    counter = 0
    while n != 1:
        counter += 1
        n = n / 2 if n % 2 == 0 else n * 3 + 1
    return counter

if __name__ == ""__main__"":
    while True:
        n = int(input())
        if n == 0:
            break
        else:
            print(calculate_operations(n))"
963362.py,4,6,16,59.83,112.59,4.5,506.65,ACCEPTED,"def calculate_operations(n):
    counter = 0
    while n != 1:
        counter += 1
        n = n / 2 if n % 2 == 0 else n * 3 + 1
    return counter

if __name__ == ""__main__"":
    while True:
        n = int(input())
        if n == 0:
            break
        else:
            print(calculate_operations(n))","def calculate_operations(n):
    counter = 0
    while n != 1:
        counter += 1
        n = n / 2 if n % 2 == 0 else (3 * n) + 1
    return counter

def main():
    while True:
        n = int(input())
        if n == 0:
            break
        print(calculate_operations(n))

if __name__ == '__main__':
    main()"
963362.py,5,5,9,66.77,68.53,3.33,228.44,REJECTED,"def calculate_operations(n):
    counter = 0
    while n != 1:
        counter += 1
        n = n / 2 if n % 2 == 0 else (3 * n) + 1
    return counter

def main():
    while True:
        n = int(input())
        if n == 0:
            break
        print(calculate_operations(n))

if __name__ == '__main__':
    main()","def calculate_operations(n):
    return sum(1 for _ in iter(lambda: n // 2 if n % 2 == 0 else 3 * n + 1, 1))

def main():
    for n in iter(lambda: int(input()), 0):
        print(calculate_operations(n))

if __name__ == '__main__':
    main()"
997657.py,0,3,18,57.69,118.94,3.39,403.55,ORIGINAL,,
997657.py,1,1,11,69.31,15.51,1.0,15.51,ACCEPTED,"def digits(n):
    if n < 10: return 1
    c = 0
    while n > 0:
        c += 1
        n = n // 10

    return c

n = int(input())
for i in range(n):
    u = int(input())
    v = int(input())
    s = u + v
    if (digits(u) > 80 or digits(v) > 80 or digits(s) > 80):
        print(""overflow"")
    else:
        print(s)","def get_digit_count(n):
    return len(str(n))

n = int(input())
for i in range(n):
    u, v = int(input()), int(input())
    s = u + v
    if any(get_digit_count(num) > 80 for num in [u, v, s]):
        print(""overflow"")
    else:
        print(s)"
997657.py,2,3,12,70.31,15.51,1.0,15.51,ACCEPTED,"def get_digit_count(n):
    return len(str(n))

n = int(input())
for i in range(n):
    u, v = int(input()), int(input())
    s = u + v
    if any(get_digit_count(num) > 80 for num in [u, v, s]):
        print(""overflow"")
    else:
        print(s)","def input_num():
    return int(input())

def digit_count_overflow(num_list):
    return any(len(str(num)) > 80 for num in num_list)

n = input_num()

for _ in range(n):
    u, v = input_num(), input_num()
    s = u + v
    print(""overflow"" if digit_count_overflow([u, v, s]) else s)"
997657.py,3,6,15,65.6,28.53,1.5,42.79,ACCEPTED,"def input_num():
    return int(input())

def digit_count_overflow(num_list):
    return any(len(str(num)) > 80 for num in num_list)

n = input_num()

for _ in range(n):
    u, v = input_num(), input_num()
    s = u + v
    print(""overflow"" if digit_count_overflow([u, v, s]) else s)","def input_num():
    return int(input())

def digit_count_overflow(num_list):
    return any(len(str(num)) > 80 for num in num_list)

def handle_input():
    n = input_num()
    for _ in range(n):
        u, v = input_num(), input_num()
        sum_uv = u + v
        print(""overflow"" if digit_count_overflow([u, v, sum_uv]) else sum_uv)

if __name__ == ""__main__"":
    handle_input()"
997657.py,4,6,15,65.6,28.53,1.5,42.79,ACCEPTED,"def input_num():
    return int(input())

def digit_count_overflow(num_list):
    return any(len(str(num)) > 80 for num in num_list)

def handle_input():
    n = input_num()
    for _ in range(n):
        u, v = input_num(), input_num()
        sum_uv = u + v
        print(""overflow"" if digit_count_overflow([u, v, sum_uv]) else sum_uv)

if __name__ == ""__main__"":
    handle_input()","def get_input():
    return int(input())

def check_overflow(digits):
    return any(len(str(digit)) > 80 for digit in digits)

def process_input():
    count = get_input()
    for _ in range(count):
        num1, num2 = get_input(), get_input()
        total = num1 + num2
        print(""overflow"" if check_overflow([num1, num2, total]) else total)

if __name__ == ""__main__"":
    process_input()"
997657.py,5,6,14,66.42,28.53,1.5,42.79,ACCEPTED,"def get_input():
    return int(input())

def check_overflow(digits):
    return any(len(str(digit)) > 80 for digit in digits)

def process_input():
    count = get_input()
    for _ in range(count):
        num1, num2 = get_input(), get_input()
        total = num1 + num2
        print(""overflow"" if check_overflow([num1, num2, total]) else total)

if __name__ == ""__main__"":
    process_input()","def get_input():
    return int(input())

def check_overflow(*digits):
    return any(len(str(digit)) > 80 for digit in digits)

def process_input():
    for _ in range(get_input()):
        num1, num2 = get_input(), get_input()
        total = num1 + num2
        print(""overflow"" if check_overflow(num1, num2, total) else total)

if __name__ == ""__main__"":
    process_input()"
