#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

int M, T, P, R;

struct DATA{
  int id, t, sv;
  vector<int> pr, pt;
  DATA(int id_): id(id_), t(0), sv(0), pr(P,false), pt(P,0){} 
  bool operator ==(const DATA& a){
    return (sv==a.sv && t==a.t);
  }
};

bool comp(const DATA& a, const DATA& b){
  if(a.sv != b.sv) return a.sv > b.sv;
  if(a.t != b.t) return a.t < b.t;
  return a.id > b.id;
}

int main(){
  int m, t, p, is;
  vector<DATA> data;
  while(1){
    cin >> M >> T >> P >> R;
    if(!M && !T && !P && !R) break;
    data.clear();
    for(int i=1; i<=T; ++i) data.push_back(DATA(i));
    for(int i=0; i<R; ++i){
      cin >> m >> t >> p >> is;
      --t; --p;
      if(is){
	++data[t].pt[p];
      }else if(!data[t].pr[p]){
	data[t].t += m + 20 * data[t].pt[p];
	++data[t].sv;
	data[t].pr[p] = true;
      }
    }
    sort(data.begin(), data.end(), comp);
    cout << data[0].id;
    for(int i=1; i<data.size(); ++i){
      cout << (data[i]==data[i-1] ? '=' : ',') << data[i].id;
    }
    cout << endl;
  }
  return 0;
}