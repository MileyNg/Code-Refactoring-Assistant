#include <cstdio>
#include <cassert>
#include <functional>
#include <algorithm>
#include <iostream>
#include <vector>
#include <map>
#include <iterator>
#include <queue>
#include <utility>

using namespace std;

int N;
vector<string> ss;
string dfs_cache[1 << 10];

bool input() {
    cin >> N;
    if (N == 0) return false;
    ss.clear(); ss.resize(N);
    for (int i = 0; i < N; i++) {
        cin >> ss[i];
    }
    for (int i = 0; i < (1 << 10); i++) dfs_cache[i] = "";
    return true;
}

string operator*(const string& s, int x) {
    string ret;
    for (int i = 0; i < x; i++) {
        ret += s;
    }
    return ret;
}

string operator^(const string& s, const string& t) {
    int l = min(s.size(), t.size());
    for (int i = l; i >= 0; i--) {
        bool f = true;
        for (int j = 0; j < i; j++) {
            if (s[s.size() - i + j] != t[j]) {
                f = false;
                break;
            }
        }
        if (f) {
            return s.substr(0, s.size() - i) + t;
        }
    }
    assert(false);
}

ostream& operator<<(ostream& os, vector<bool>& v) {
    os << " {";
    for (int i = 0; i < v.size(); i++) {
        os << " " << v[i];
    }
    os << " } ";
    return os;
}

bool comp(const string& s, const string& t) {
    if (s.size() == t.size()) return s < t;
    return s.size() < t.size();
}

const string z = string("z") * 300;
string dfs(int used) {
    //cerr << init << " " << used;
    if (used == (1 << N) - 1) return string("");
    if (dfs_cache[used] != "") return dfs_cache[used];
    string ret = z;
    for (int i = 0; i < N; i++) {
        if (used & (1 << i)) continue;
        int p = used;
        used |= 1 << i;
        ret = min(ret, ss[i] ^ dfs(used), comp);
        used = p;
    }
    //cerr << ret << endl;
    return dfs_cache[used] = ret;
}

int main() {
    while (input()) {
        int used = 0;
        string ans = z;
        for (int i = 0; i < N; i++) {
            int p = used;
            used |= 1 << i;
            ans = min(ans, ss[i] ^ dfs(used), comp);
            used = p;
        }
        cout << ans << endl;
    }
    return 0;
}