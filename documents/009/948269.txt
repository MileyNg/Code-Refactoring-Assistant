#include <stdio.h>

int heap[500005];
int heap_size;

int parent(int i) {
    return i/2;
}

int left(int i) {
    return 2*i;
}

int right(int i) {
    return 2*i+1;
}

void maxHeapify(int A[], int i) {
    int l = left(i);
    int r = right(i);
    int largest;
    if(l <= heap_size && A[l] > A[i]) {
        largest = l;
    } else { 
        largest = i;
    }
    
    if(r <= heap_size && A[r] > A[largest]) {
        largest = r;
    }
    if(largest != i) {
        int t = A[i];
        A[i] = A[largest];
        A[largest] = t;
        maxHeapify(A, largest);
    }
}

void buildMaxHeap(int A[]) {
	int i;
    for(i=heap_size/2;i>0;i--) {
        maxHeapify(A, i);
    }
}

int main(void) {
	int i, n, t;
	scanf("%d\n", &n);
	heap_size = n;
	
	for(i=1;i<=n;i++) {
		scanf("%d", &heap[i]);
	}

	buildMaxHeap(heap);

	for(i=1;i<=n;i++) {
		printf(" %d", heap[i]);
	}
	printf("\n");
	
	return 0;
}