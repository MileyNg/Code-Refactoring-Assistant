#define _USE_MATH_DEFINES
#define INF 0x3f3f3f3f

#include <iostream>
#include <cstdio>
#include <sstream>
#include <cmath>
#include <cstdlib>
#include <algorithm>
#include <queue>
#include <stack>
#include <limits>
#include <map>
#include <string>
#include <cstring>
#include <set>
#include <deque>
#include <bitset>
#include <list>
#include <cctype>
#include <utility>
  
using namespace std;
  
typedef long long ll;
typedef pair <int,int> P;
typedef pair <int,P> PP;
  
static const double EPS = 1e-8;
  
int tx[] = {0,1,0,-1};
int ty[] = {-1,0,1,0};

class Requirement{
public:
  int upper;
  int lower;
  Requirement() : upper(INF),lower(0) {}
  Requirement(int _u,int _l) : upper(_u),lower(_l) {}
};

int total_commands;
int total_skills;

bool check_path(int from_command,int to_command,
		Requirement requirement[101][101]){
  for(int skill_id = 1; skill_id <= total_skills;skill_id++){
    if(requirement[from_command][skill_id].lower
       > requirement[to_command][skill_id].upper){
      return false;
    }
    // if(requirement[from_command][skill_id].upper
    //    < requirement[to_command][skill_id].lower){
    //   return false;
    // }
  }
  return true;
}

bool dfs(bool edge[101][101],bool used[101],int current,
	 int count,int total_commands){
  if(count == total_commands){
    return true;
  }

  used[current] = true;
  bool res = false;

  for(int to=0;to<total_commands;to++){
    if(current == to) continue;

    if(edge[current][to] && !used[to]){
      res |= dfs(edge,used,to,count+1,total_commands);
    }
  }

  return res;
}

int main(){
  while(~scanf("%d %d",&total_commands,&total_skills)){
    Requirement requirement[101][101];

    bool skill_flag = true;
    for(int command_idx = 0; command_idx < total_commands; command_idx++){
      int total_conditions;
      scanf("%d",&total_conditions);
      for(int condition_idx = 0; condition_idx < total_conditions; condition_idx++){
	int skill_id;
	string symbol;
	int required_point;
	cin >> skill_id >> symbol >> required_point;
	if(symbol == ">=") {
	  requirement[command_idx][skill_id].lower
	    = max(required_point,requirement[command_idx][skill_id].lower);
	}
	else if(symbol == "<="){
	  requirement[command_idx][skill_id].upper
	    = min(required_point,requirement[command_idx][skill_id].lower);
	}
	
	if(requirement[command_idx][skill_id].lower
	   > requirement[command_idx][skill_id].upper){
	  skill_flag = false;
	}
      }
    }

    
    bool edge[101][101];
    //init
    for(int from = 0; from < total_commands; from++){
      for(int to = 0; to < total_commands; to++){
	edge[from][to] = check_path(from,to,requirement);
      }
    }

    bool isok = false;
    for(int start = 0; start < total_commands; start++){
      bool used[101];
      memset(used,false,sizeof(used));
      isok |= dfs(edge,used,start,1,total_commands);
    }
    printf("%s\n",(isok && skill_flag) ? "Yes" : "No");
  }
}