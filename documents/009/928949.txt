#include<bits/stdc++.h>
 
#define REP(i,s,n) for(int i=s;i<n;i++)
#define rep(i,n) REP(i,0,n)
 
using namespace std;
 
typedef long long ll;
 
int n,found,buf_length;
vector<string> word[30],buf;
string sequence;
char transfer[26];
vector<ll> bitmask;
vector<int> bc;
set<string> exist;
char table[26];
bool depth[26];
 
bool cmp(const string& a,const string& b){ return a.size() > b.size(); }
 
void dfs(int cur,long long bit,int dph){
 
  if( found >= 2 ) return;
 
  if( cur >= buf_length ){
    found++;
    rep(i,26) transfer[i] = table[i];
    return;
  }
 
  int len = buf[cur].size();
 
  if( __builtin_popcountll( bit & bitmask[cur] ) == bc[cur] ) {
    string tmp = buf[cur];
    rep(i,len) tmp[i] = table[tmp[i]-'A'];
    if( exist.find(tmp) != exist.end() ) dfs(cur+1,bit,dph+1);
    return;
  }
 
  rep(i,word[len].size()){
    bool error = false;
    long long new_bit = bit;
    int ep = len;
    rep(j,len){
      if( table[buf[cur][j]-'A'] == '?' && table[word[len][i][j]-'A'] == '?' ) {
        long long SHIFT = word[len][i][j] - 'A';
        new_bit |= (1LL<<SHIFT);
        SHIFT = buf[cur][j] - 'A';
        new_bit |= (1LL<<SHIFT);
        table[buf[cur][j]-'A']     = word[len][i][j];
        table[word[len][i][j]-'A'] = buf[cur][j];
        depth[buf[cur][j]-'A'] = dph;
        depth[word[len][i][j]-'A'] = dph;
      } else if( !( table[buf[cur][j]-'A'] == word[len][i][j] && table[word[len][i][j]-'A'] == buf[cur][j] ) ) {
        error = true;
        ep = j+1;
        break;
      }
    }
 
    if( !error ) dfs(cur+1,new_bit,dph+1);
    rep(j,ep){
      int idx = buf[cur][j] - 'A';
      int idx2 = word[len][i][j] - 'A';
      if( depth[idx] == dph || depth[idx2] == dph ){
        //table[idx] = tmp_table[idx];
        //table[idx] = tmp_table[idx];
        table[idx] = table[idx2] = '?';
      }
    }
    if( found >= 2 ) return;
  }
}
 
int main(){
  while( cin >> n, n ){
    string tmp;
    found = 0;
    buf.clear(), tmp.clear();
    rep(i,26)transfer[i] = table[i] = '?';
    rep(i,30) word[i].clear();
    rep(i,n){
      cin >> tmp;
      word[(int)tmp.size()].push_back(tmp);
      exist.insert(tmp);
    }
    cin.ignore();
    getline(cin,sequence);
    tmp = sequence.substr(0,(int)sequence.size()-1);
    stringstream ss(tmp);
    while( !( ss >> tmp ).fail() ) buf.push_back(tmp);
 
    sort(buf.begin(),buf.end(),cmp);
    buf.erase(unique(buf.begin(),buf.end()),buf.end());
    buf_length = (int) buf.size();
    bitmask.clear(), bc.clear();
    bitmask.resize(buf_length,0), bc.resize(buf_length);
    rep(i,buf_length){
      rep(j,buf[i].size()){
        long long SHIFT = buf[i][j] - 'A';
        bitmask[i] |= (1LL<<SHIFT);
      }
      bc[i] = __builtin_popcountll(bitmask[i]);
    }
 
    dfs(0,0LL,0);
 
    if( found == 1 ) {
      rep(i,sequence.size()) cout << (isupper(sequence[i])?transfer[sequence[i]-'A']:sequence[i]);
      puts("");
    } else puts("-.");
 
  }
  return 0;
}