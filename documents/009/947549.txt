#include <bits/stdc++.h>
#define REP(i,n) for(int i=0; i<(int)(n); ++i)

using namespace std;

int greedy1(vector<int> v) {
    int res = 0;
    for(int i = 0; i < v.size(); i++) {
        int e = i;
        while(v[e] != i) e++;
        if(e > i) {
            res++;
        }
        while(e > i) {
            swap(v[e - 1], v[e]);
            e--;
        }
    }
    return res;
}
int greedy2(vector<int> v) {
    int res = 0;
    for(int i = v.size() - 1; i >= 0; i--) {
        int b = i;
        while(v[b] != i) b--;
        if(b < i) {
            res++;
        }
        while(b < i) {
            swap(v[b], v[b + 1]);
            b++;
        }
    }
    return res;
}
int greedy3(const vector<int>& v) {
    int n = v.size();
    int dp[22][22] = {};
    REP(i, n + 1) REP(j, n + 1) dp[i][j] = INT_MAX;
    dp[0][n] = 0;
    for(int t = n; t > 0; t--) {
        for(int l = 0; l + t <= n; l++) {
            int r = l + t;
            vector<int> a;
            for(int i = 0; i < n; i++) {
                if(l <= v[i] && v[i] < r) {
                    a.push_back(v[i]);
                }
            }
            int first = a[0];
            int last = a.back();
            dp[l + 1][r] = min(dp[l + 1][r], dp[l][r] + (first == l ? 0 : 1));
            dp[l][r - 1] = min(dp[l][r - 1], dp[l][r] + (last == r - 1 ? 0 : 1));
        }
    }
    int res = INT_MAX;
    for(int l = 0; l < n; l++) {
        res = min(res, dp[l][l]);
    }
    return res;
}

struct State{
    int c, h;
    vector<int> v;
    State(int c_, const vector<int>& v_) : c(c_), v(v_.begin(), v_.end()) {
        h = greedy3(v);
    }
    bool operator < (const State& s) const {
        return c + h > s.c + s.h; // reversed
    }
};


int main(){
    int n;
    while(cin >> n){
        vector<int> init(n);
        REP(i, n) cin >> init[i];
        REP(i, n) init[i]--;
        // cout << greedy1(v) << endl;
        // cout << greedy2(v) << endl;
        // cout << greedy3(v) << endl;
        priority_queue<State> que;
        set< vector<int> > used;
        que.push(State(0, init));
        used.insert(init);
        while(!que.empty()){
            const State s = que.top(); que.pop();
            if(s.h == 0) {
                cout << s.c << endl;
                break;
            }
            for(int i = 0; i < n; i++) {
                if(s.v[i] != i) {
                    vector<int> nv = s.v;
                    int j;
                    assert(nv.size() == n);
                    for(j = 0; j < n; j++) if(nv[j] == i) break;
                    if(i < j) {
                        while(j > i) {
                            swap(nv[j - 1], nv[j]);
                            j--;
                        }
                    } else {
                        while(j < i) {
                            swap(nv[j], nv[j + 1]);
                            j++;
                        }
                    }
                    if(!used.count(nv)) {
                        used.insert(nv);
                        que.push(State(s.c + 1, nv));
                    }
                }
            }
        }
    }
    return 0;
}