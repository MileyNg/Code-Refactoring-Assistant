#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <sstream>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <numeric>
#include <cctype>
#include <tuple>

#ifdef _MSC_VER
#include <agents.h>
#endif

#define FOR(i, a, b) for(int i = (a); i < (int)(b); ++i)
#define rep(i, n) FOR(i, 0, n)
#define ALL(v) v.begin(), v.end()
#define REV(v) v.rbegin(), v.rend()
#define MEMSET(v, s) memset(v, s, sizeof(v))
#define X first
#define Y second

using namespace std;

typedef long long ll;
typedef pair<int, int> P;

int par[1010];
int last[100];
map<string, int> name;

bool check_ancestor(int a, int d){
	if (a < 0 || d < 0) return false;
	if (a == par[d]) return true;
	return check_ancestor(a, par[d]);
}

int main(){
	int n, q;
	while (cin >> n >> q, n|q){
		name.clear();
		MEMSET(last, -1);
		MEMSET(par, -1);
		cin.ignore();
		rep(i, n){
			string s;
			getline(cin, s);
			int cnt = count(ALL(s), ' ');
			last[cnt] = i;
			name[s.substr(cnt)] = i;
			if (!cnt) continue;
			par[i] = last[cnt - 1];
		}
		while (q--){
			string a, b, c, d, e, f;
			cin >> a >> b >> c >> d >> e >> f;
			//cout << f.substr(0, f.size() - 1) << endl;
			int x = name[a], y = name[f.substr(0, f.size() - 1)];
			bool ok;
			switch (d[0]){
			case 'c':
				ok = par[x] == y;
				break;
			case 'a':
				ok = check_ancestor(x, y);
				break;
			case 's':
				ok = par[x] == par[y];
				break;
			case 'p':
				ok = x == par[y];
				break;
			case 'd':
				ok = check_ancestor(y, x);
			}
			cout << (ok ? "True" : "False") << endl;
		}
		cout << endl;
	}

	return 0;
}