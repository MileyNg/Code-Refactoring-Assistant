#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <utility>
#include <cstring>
#include <cmath>
#include <queue>
using namespace std;

#define rep(i,n) for(int i=0; i<n; i++)
#define reps(i,s,n) for(int i=s; i<n; i++)
#define all(x) x.begin(), x.end()
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;

int field[100][100];
void setf(int x, int y, int val) {
    field[x+50][y+50] = val;
}
int getf(int x, int y) {
    return field[x+50][y+50];
}

struct t_node {
    int x, y, t;
    t_node( int tx, int ty, int tt ) {
        x = tx;
        y = ty;
        t = tt;
    }
};
bool operator<( const t_node &lhs, const t_node &rhs ) {
    return lhs.t < rhs.t;
}

const int INF = 1<<30;

int main() {
    int t, n;
    while( cin >> t >> n, t||n ) {
        memset( field, -1, sizeof(field) );
        rep(i, n) {
            int x, y;
            cin >> x >> y;
            setf(x, y, INF);
        }
        int sx, sy;
        cin >> sx >> sy;
        priority_queue<t_node> que;
        que.push( t_node(sx, sy, t) );
        while( !que.empty() ) {
            t_node tn = que.top();
            que.pop();
            if( getf(tn.x, tn.y) > 0 ) continue;
            setf( tn.x, tn.y, tn.t );
            if( tn.t == 0 ) continue;
            int dx[6] = {0, 1, 1,  0, -1, -1};
            int dy[6] = {1, 1, 0, -1, -1,  0};
            rep(i, 6) {
                int nx = tn.x + dx[i];
                int ny = tn.y + dy[i];
                if( -30<=nx && nx<=30 &&
                    -30<=ny && ny<=30 &&
                    getf(nx, ny) <= tn.t-1 ) {
                    que.push( t_node(nx, ny, tn.t-1) );
                }
            }
        }
        int cnt = 0;
        for(int y=-30; y<=30; y++) {
            for(int x=-30; x<=30; x++) {
                int f = getf(x, y);
                if( 0<=f && f<INF ) {
                   cnt++;
                }
            }
        }
        cout << cnt << endl;
    }
    return 0;
}