#include <algorithm>
#include <iostream>
#include <cstdio>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
using namespace std;

#define ISEQ(c) (c).begin(), (c).end()
typedef long long ll;
typedef pair<int, int> P;

const int INF = 1000000000;

typedef struct {
  int to, cost;
}edge;

vector<edge> G[4*30*30+1];
int d[4*30*30+1];


void dijkstra(int s) {
  priority_queue<P, vector<P>, greater<P> > que;
  fill(d, d+4*30*30+1, INF);
  d[s] = 0;
  que.push(P(0, s));

  while (!que.empty()) {
    P p = que.top(); que.pop();
    int v = p.second;
    if (d[v] < p.first) continue;
    for (int i = 0; i < G[v].size(); i++) {
      edge e = G[v][i];
      if (d[e.to] > d[v] + e.cost) {
	d[e.to] = d[v] + e.cost;
	que.push(P(d[e.to], e.to));
      }
    }
  }
}


int main() {
  while (true) {
     int w, h;
  scanf("%d%d", &w, &h);
  if (w == 0 and h == 0) break;
  int s[h][w];
  for (int i = 0; i < h; i++) {
    for (int j = 0; j < w; j++) {
      scanf("%d", &s[i][j]);
    }
  }
  int c[4];
  for (int i = 0; i < 4; i++)
    scanf("%d", &c[i]);



  int dx[4] = {1, 0, -1, 0};
  int dy[4] = {0, 1, 0, -1};
  for (int i = 0; i < 4*30*30+1; i++) {
    G[i].clear();
  }
  for (int i = 0; i < h; i++) {
    for (int j = 0; j < w; j++) {
      for (int k = 0; k < 4; k++) {
	for (int l = 0; l < 4; l++) {
	  int t = (k + l) % 4;
	  int x = j + dx[t], y = i + dy[t];
	  if (0 <= x and x < w and 0 <= y and y < h) {
	    G[4*(w*i+j)+k].push_back(l == s[i][j] ? edge{4*(w*y+x)+t, 0} : edge{4*(w*y+x)+t, c[l]});
	  }
	}
      }
    }
  }
  
    dijkstra(0);
    printf("%d\n", min(d[4*(w*(h-1)+w-1)], d[4*(w*(h-1)+w-1)+1]));
 
  }
}