EPS = 1e-9

class Point
  attr_reader :x, :y, :z
  def initialize(x, y, z)
    @x, @y, @z = [x, y, z].map(&:to_f)
  end
  def +(p)
    Point.new(@x + p.x, @y + p.y, @z + p.z)
  end
  def -(p)
    Point.new(@x - p.x, @y - p.y, @z - p.z)
  end
  def ==(p)
    (@x - p.x).abs < EPS && (@y - p.y).abs < EPS && (@z - p.z).abs < EPS
  end
  def dot(p)
    @x * p.x + @y * p.y + @z * p.z
  end
  def cross(p)
    Point.new(@y * p.z - @z * p.y, @z * p.x - @x * p.z, @x * p.y - @y * p.x)
  end
  def abs
    Math::sqrt(@x * @x + @y * @y + @z * @z)
  end
  def normalize
    Point.new(@x / abs, @y / abs, @z / abs)
  end
end

def solve
  me = Point.new(*gets.split)
  enemy = Point.new(*gets.split)
  barrier = 3.times.map{Point.new(*gets.split)}

  # バリアが作る平面がビームと交わらないときはtrue
  beam = enemy - me
  n_plane = (barrier[1] - barrier[0]).cross(barrier[2] - barrier[0]).normalize
  distance_me_plane = (me - barrier[0]).dot(n_plane).abs
  distance_enemy_plane = (enemy - barrier[0]).dot(n_plane).abs
  distance_me_enemy = (enemy - me).abs
  return true if beam.abs < distance_me_plane + distance_enemy_plane

  # バリアとビームが接するときはfalse
  #  == 直線(me, enemy)と直線(barrier[i], barrier[i+1])が交点を持つときはfalse
  #  == 直線(me, enemy)と直線(barrier[i], barrier[i+1])との最近点対が一致するときはfalse
  ok = true
  [*barrier, barrier.first].each_cons(2) do |b1, b2|
    ab = enemy - me
    cd = b2 - b1
    n1 = ab.normalize
    n2 = cd.normalize
    work1 = n1.dot(n2)
    work2 = 1.0 - work1 * work1
    ac = b1 - me
    d1 = ac.dot(n1) - work1 * ac.dot(n2) / work2
    d2 = work1 * ac.dot(n1) - ac.dot(n2) / work2
    p1 = me + Point.new(d1 * n1.x, d1 * n1.y, d1 * n1.z)
    p2 = b1 + Point.new(d2 * n2.x, d2 * n2.y, d2 * n2.z)
    ok = false if p1 == p2
  end
  return false unless ok

  # バリアの各辺eについて、{e, ビーム, e cross ビーム}がすべて右手系（すべて左手系）ならfalse
  ok = true
  sign = nil
  edge = [*0...3, 0].each_cons(2).map{|i, j| barrier[j] - barrier[i]}
  [*edge, edge.first].each_cons(2) do |e1, e2|
    v = beam.dot((e1 - me).cross(e2 - me)) > 0.0 ? 1 : -1
#p beam.dot((e1 - me).cross(e2 - me))
    sign = v unless sign
    ok = false if sign != v
  end
  return ok
end

puts (solve ? "HIT" : "MISS")