#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <stack>
#include <tuple>
#include <vector>
using namespace std;

constexpr int MAX_N = 500000;
int n;
int l[MAX_N], r[MAX_N];

int leafs[MAX_N + 1];
int depth[MAX_N + 1];
long long memo[MAX_N][2];
int in[MAX_N + 1];
int out[MAX_N + 1];

long long dfs(int v, bool used) {
	if(v == n) return 0;

	long long &res = memo[v][used];
	if(res != -1) return res;

	if(used) {
		res = dfs(l[v], true) + dfs(r[v], true) + depth[v] + 2;
	}
	else {
		res = min({dfs(l[v], false) + dfs(r[v], true)  + 2 - (leafs[r[v]] - 1) * depth[v],
				   dfs(l[v], true)  + dfs(r[v], false) + 2 - (leafs[l[v]] - 1) * depth[v],
				   dfs(l[v], false) + dfs(r[v], false) + 2 + depth[v]});
	}

	return res;
}

void init() {
	stack<tuple<int, int, int>> sta;
	sta.push(make_tuple(1, 0, 0));

	int res;
	while(!sta.empty()) {
		int v, d, cnt;
		tie(v, d, cnt) = sta.top();

		if(v == n) {
			depth[v] = d;
			res = leafs[v] = 1;
			sta.pop();
		}
		else if(cnt == 0) {
			depth[v] = d;
			++get<2>(sta.top());
			sta.push(make_tuple(l[v], d + 1, 0));
		}
		else if(cnt == 1) {
			leafs[v] += res;
			++get<2>(sta.top());
			sta.push(make_tuple(r[v], d + 1, 0));
		}
		else {
			res = (leafs[v] += res);
			sta.pop();
		}
	}
}

int main() {
	cin.tie(nullptr);
	ios::sync_with_stdio(false);

	cin >> n;

	for(int i = 1; i < n; ++i) {
		cin >> l[i] >> r[i];
	}

	init();

	memset(memo, -1, sizeof(memo));
	for(int v = n - 1; v > 1; --v) {
		dfs(v, false);
		dfs(v, true);
	}
	cout << dfs(l[1], false) + dfs(r[1], false) + 2 << endl;

	return EXIT_SUCCESS;
}