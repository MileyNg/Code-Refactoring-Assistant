#include <algorithm>
#include <bitset>
#include <cctype>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

using namespace std;

inline int toInt(string s) {int v; istringstream sin(s);sin>>v;return v;}
template<class T> inline string toString(T x) {ostringstream sout;sout<<x;return sout.str();}
template<class T> inline T sqr(T x) {return x*x;}

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<string> vs;
typedef pair<int, int> pii;
typedef long long ll;

#define all(a)  (a).begin(),(a).end()
#define rall(a) (a).rbegin(), (a).rend()
#define pb push_back
#define mp make_pair
#define each(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)
#define exist(s,e) ((s).find(e)!=(s).end())
#define range(i,a,b) for(int i=(a);i<(b);++i)
#define rep(i,n)  range(i,0,n)
#define clr(a,b) memset((a), (b) ,sizeof(a))
#define dump(x)  cerr << #x << " = " << (x) << endl;
#define debug(x) cerr << #x << " = " << (x) << " (L" << __LINE__ << ")" << " " << __FILE__ << endl;

const double eps = 1e-10;
const double pi  = acos(-1.0);
const ll INF =1LL << 62;
const int inf =1 << 30;

struct node{
	int to;
	string str;
};

struct state{
	int cur;
	string str;
	bool  operator<(const state &a)const{ return str < a.str;}
	bool  operator>(const state &a)const{ return str > a.str;}
};


int main(void){
	int n;
	while(cin >> n,n){
		string dp[500][40];
		vector <node> graph[40];
		int a,s,g;
		cin >> a >> s >> g;
		rep(i,500)rep(j,40) dp[i][j]="";
		rep(i,a){
			int f,t;
			string tmp;
			cin >> f >> t >> tmp;
			node n; 
			n.to=t; n.str=tmp;
			graph[f].pb(n);
		}
		
		priority_queue<state,vector<state>,greater<state> > q;

		state init; init.cur=s; init.str="";

		q.push(init);
		string ans="";

		while(!q.empty()){
				state now=q.top(); q.pop();
				if(now.str.size()>=500)
					continue;

				if(now.cur==g){
					ans=now.str;
					break;
				}

				rep(i,graph[now.cur].size()){
					state next;	
					next.cur=graph[now.cur][i].to;
					next.str=now.str+graph[now.cur][i].str;
					if(next.str.size()>=500) continue;
					if(dp[next.str.size()][next.cur]!=""&&dp[next.str.size()][next.cur]<=next.str) continue;
					dp[next.str.size()][next.cur]=next.str;
					q.push(next);
				}
		}
		if(ans!=""&&ans.size()<=300)
			cout << ans << endl; 
		else
			cout << "NO" << endl;
	}
	return 0;
}