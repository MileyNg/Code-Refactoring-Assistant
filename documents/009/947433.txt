#include <stdio.h>
 
#define PRIME_MAX 1000000
int getprimes(int list[], int top){
    int i, j;
    int index = 0;
    char tmp[PRIME_MAX];
 
    for(i=0;i<top;i++) {
        tmp[i] = 1;
    }
    
    tmp[0] = tmp[1] = 0;
    for(i=2;i<top;i++) {
        if(tmp[i] == 1) {
            /* 素数 */
            list[index] = i;
            index ++;
            for(j=2;j*i<top;j++) {
                tmp[j*i] = 0;
            }
        }
    }
 
    list[index] = -1;
    return index;
}
 
int gcd(int a, int b) {
	if (a < 0 || b < 0) {
		return 0;
	}

	while (b > 0) {
		int c = a % b;
		a = b;
		b = c;
	}

  return a;
}

int main(void) {
    int i, c;
    int n, base;
    int size;
    int primes[100000];
    int div[1000];
    int d;
    int j, find;
    int old_prime = -1;
    int bunki;
	unsigned char* memo;
    size = getprimes(primes, PRIME_MAX);
    
    scanf("%d\n", &base);
    memo = malloc(sizeof(char)*base+1);
    for(i=0;i<base+1;i++) memo[i] = 0;
    
    i = d = 0;
    n = base;
    while(n > 1) {
        if((n % primes[i]) == 0) {
        	if(old_prime != primes[i]) {
	            div[d] = primes[i];
	            d++;
        	}
            n /= primes[i];
            old_prime = primes[i];
        } else {
            i++;
        }
         
        if(i >= size) {
            div[d] = n;
            d++;
            break;
        }
    }

	c = 0;
    for(j=0;j<d;j++) {
        for(i=div[j];i<base;i+=div[j]) {
        	memo[i] = 1;
        }
    }
    
    for(i=1;i<base;i++) {
    	if(memo[i] == 0) c++;
    }
    
    printf("%d\n", c);

    
    return 0;
}