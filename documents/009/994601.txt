#include<iostream>
#include<vector>
#include<queue>
using namespace std;
#define INF (1<<24)

int n,m,a,b,c,R;
int r[1001];
char ch;
int t[201][201];
int u[201][201];
int dp[201][1001];
 
void init();
int solve();
  
int main(){
  while(cin>>n>>m){
    if(n==0&&m==0)break;
    init();
    for(int i=0;i<m;i++){
      cin>>a>>b>>c>>ch;
      a--;b--;
      if(ch=='L'){
	t[a][b]=min(t[a][b],c);
	t[b][a]=min(t[b][a],c);
      }else {
	u[a][b]=min(u[a][b],c);
	u[b][a]=min(u[b][a],c);
      }
    }
    cin>>R;
    for(int i=0;i<R;i++){
      cin>>r[i];
      r[i]--;
    }
 
    for(int k=0;k<n;k++){
      for(int i=0;i<n;i++){
	for(int j=0;j<n;j++){
	  u[i][j]=min(u[i][j],u[i][k]+u[k][j]);
	  t[i][j]=min(t[i][j],t[i][k]+t[k][j]);
	}
      }
    }
    cout<<solve()<<endl;
  }
  return 0;
}
  
int solve(){
  dp[r[0]][0]=0;
  for(int i=0;i<R-1;i++){
    for(int j=0;j<n;j++){
      if(dp[j][i]==INF)continue;

      for(int k=0;k<n;k++){
	dp[k][i+1]=min(dp[k][i+1],dp[j][i]+t[r[i]][j]+u[j][k]+t[k][r[i+1]]);
      }
      
      dp[j][i+1]=min(dp[j][i+1],dp[j][i]+t[r[i]][r[i+1]]);
      
      dp[r[i+1]][i+1]=min(dp[r[i+1]][i+1],dp[j][i]+t[r[i]][j]+u[j][r[i+1]]);

    }
  }
  int res=INF;
  for(int i=0;i<n;i++)res=min(res,dp[i][R-1]);
  return res;
}
  
void init(){
  for(int i=0;i<201;i++){
    for(int j=0;j<201;j++){
      if(i==j)u[i][j]=0;
      else u[i][j]=INF;
      t[i][j]=u[i][j];
    }
    for(int j=0;j<1001;j++)dp[i][j]=INF;
  }
}