#include <vector>
#include <iostream>
#include <set>
#include <cstdio>
#include <queue>
#include <cstdio>
#include <cstdlib>
#include <cassert>
#include <ctime>
#include <algorithm>
#include <algorithm>
#include <limits>
#include <map>

using namespace std;
typedef long long ll;

char s[110];
int n;
int dd[5];
char u[] = "01+-*()";
bool err;
int ec;

int expr(char **begin);

void erce(int i) {
    err |= (i  < 0 || 1024 <= i);
}

int numb(char **begin) {
    int r = 0;
    if (!isdigit(**begin)) err = true;
    while (isdigit(**begin)) {
        r *= 2;
        r += **begin - '0';
        *begin += 1;
    }
    erce(r);
    return r;
}

int fact(char **begin) {
    if (**begin == '(') {
        *begin += 1;
        int ec2 = ec;
        int r = expr(begin);
        if (ec2 == ec) err = true;
        ec = ec2;
        if (**begin != ')') err = true;
        *begin += 1;
        erce(r);
        return r;
    } else {
        return numb(begin);
    }
}

int term(char **begin) {
    int r = fact(begin);
    while (true) {
        if (**begin == '*') {
            ec++;
            *begin += 1;
            r *= fact(begin);
            erce(r);
        } else {
            break;
        }
    }
    return r;
}

int expr(char **begin) {
    int r = term(begin);
    while (true) {
        if (**begin == '+') {
            ec++;
            *begin += 1;
            r += term(begin);
            erce(r);
        } else if (**begin == '-') {
            ec++;
            *begin += 1;
            r -= term(begin);
            erce(r);
        } else {
            break;
        }
    }
    return r;
}


int main() {
    string ss;
    cin >> ss;
    n = ss.size();
    int cc = 1;
    int c = 0;
    for (int i = 0; i < n; i++) {
        s[i] = ss[i];
        if (s[i] == '.') {
            dd[c] = i;
            c++;
            cc *= 7;
        }
    }
    s[n] = '$';
    int res = -1;
    for (int i = 0; i < cc; i++) {
        int ii = i;
        for (int j = 0; j < c; j++) {
            s[dd[j]] = u[ii%7];
            ii /= 7;
        }
        err = false;
        ec = 0;
        char *p = s;
        int r = expr(&p);
        if (*p != '$') err = true; 
        if (!err) res = max(res, r);
        //printf("%10s %d %d\n", s, r, err);
    }
    cout << res << endl;
    return 0;
}