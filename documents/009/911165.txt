#include <vector>
#include <list>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <deque>
#include <algorithm>
#include <utility>
#include <functional>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <climits>
#include <cassert>
#include <memory>
#include <time.h>
using namespace std;
inline int toInt(string s) {int v; istringstream sin(s);sin>>v;return v;}
template<class T> inline string toString(T x) {ostringstream sout;sout<<x;return sout.str();}
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<string> vs;
typedef pair<int, int> pii;
typedef long long ll;
#define ALL(a) (a).begin(),(a).end()
#define RALL(a) (a).rbegin(),(a).rend()
#define EXIST(s,e) ((s).find(e)!=(s).end())
#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define REP(i,n) FOR(i,0,n)
const double EPS = 1e-9;
const double PI  = acos(-1.0);

const int MAX_N=100010;
int par[MAX_N];
int myrank[MAX_N];

void init(int n){
	for(int i=0;i<n;i++){
		par[i]=i;
		myrank[i]=0;
	}
}

int find(int x){
	if(par[x]==x){
		return x;
	}else{
		myrank[x]+=myrank[par[x]];
		return par[x]=find(par[x]);
	}
}

void unite(int x,int y,int w){
	int px=find(x);
	int py=find(y);
	int w2=w-(myrank[y]-myrank[py])+(myrank[x]-myrank[px]);
	if(px==py)return;
	if(w2<0){
		w2=-w2;
		swap(px,py);
	}

	par[py]=px;
	myrank[py]=w2;
}

bool same(int x,int y){
	return find(x)==find(y);
}

int main(){
	int n,m;
	while(cin>>n>>m,n|m){
		init(n+1);
		REP(i,m){
			char q;
			int a,b,w;
			cin>>q>>a>>b;
			if(q=='!'){
				cin>>w;
				unite(a,b,w);
			}else{
				if(same(a,b)){
					cout<<myrank[b]-myrank[a]<<endl;
				}else{
					cout<<"UNKNOWN"<<endl;
				}
			}
		}
	}
}