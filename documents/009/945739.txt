#include <iostream>
#include <string>
#include <vector>

using namespace std;

vector<string> split(string s, string t) {
	vector<string> r;
	int p = s.find(t);
	if (p != s.npos) {
		r.push_back(s.substr(0, p));
		s = s.substr(p+t.size());
	}
	r.push_back(s);
	return r;
}

void output(string text, int cursor) {
	cout << text.substr(0, cursor) << '^' << text.substr(cursor) << endl;
}

int main() {
	int n; cin >> n;
	cin.ignore();
	int i = 0;
	
	while (i<n) {
		// solver
		string text;
		getline(cin, text);
		
		int cursor = 0;
		
		int m; cin >> m;
		cin.ignore();
		
		for (int j=0; j<m; j++) {
			string command;
			getline(cin, command);
			
			vector<string> com = split(command, " ");
			
			if (com[0]=="forward") {
			
				if (com[1]=="char") {
				
					if (cursor < (int)text.size()) cursor++;
					
				} else if (com[1]=="word") {
				
					if (cursor == 0) {
						bool find = false;
						int k;
						for (k=cursor; k<(int)text.size() && !find; k++) {
							if (text[k]==' ') {
								find = true;
								cursor = k;
							}
						}
						if (!find) cursor = (int)text.size();
						
					} else {
					
						bool find = false;
						int b = cursor;
						for (; b<(int)text.size() && !find; b++) {
							if (text[b]!=' ') {
								find = true;
								break;
							}
						}
						
						if (find) {
							find = false;
							int k = b;
							for (; k<(int)text.size() && !find; k++) {
								if (text[k]==' ') {
									find = true;
									cursor = k;
								}
							}
							if (!find) cursor = (int)text.size();
						} else {
							cursor = (int)text.size();
						}
					}
					
				}
				
			} else if (com[0]=="backward") {
			
				if (com[1]=="char") {
				
					if (cursor > 0) cursor--;
					
				} else if (com[1]=="word") {
				
					bool find = false;
					int k = cursor;
					for (; k>=0 && !find; k--) {
						if (text[k]==' ') find = true;
					}
					
					if (find) {
						bool find2 = false;
						for (; k>=0 && !find2; k--) {
							if (text[k]==' ') {
								find2 = true;
								cursor = k + 1;
							}
						}
						if (!find2) cursor = 0;
						
					} else {
						cursor = 0;
					}
					
				}
				
			} else if (com[0]=="insert") {
				
				string ins = com[1].substr(1, (int)com[1].size()-2);
				text = text.substr(0, cursor) + ins + text.substr(cursor);
				cursor += (int)ins.size();
				
			} else if (com[0]=="delete") {
				
				if (com[1] == "char" && cursor < (int)text.size()) {
					
					if (cursor < (int)text.size()) {
						text = text.substr(0, cursor) + text.substr(cursor + 1);
					}
					
				} else if (com[1]=="word" && cursor < (int)text.size()) {
					
					int del = cursor + 1;					
					for (; del < (int)text.size(); del++) {
						if (text[del] == ' ') {
							del++;
							break;
						}
					}					
					text = text.substr(0, cursor) + text.substr(del);
					
				}
				
			}
			
			output(text, cursor);
		}
		
		// output
		
		
		i++;
	}
	
	return 0;
}