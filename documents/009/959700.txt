#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
const int INF = (int)1e9;

struct Edge {
  int to, cap, rev;
  Edge(int to_, int cap_, int rev_) :
    to(to_), cap(cap_), rev(rev_) { }
};

struct FordFulkerson {
  const int V;
  vector<vector<Edge> > G;
  vector<bool> used;
  FordFulkerson(int v) : V(v), G(v), used(v) { }
  void add_edge(int from, int to, int cap) {
    G[from].emplace_back(to, cap, G[to].size());
    G[to].emplace_back(from, 0, G[from].size() - 1);
  }
  int find_flow(int v, int t, int f) {
    if(v == t) return f;
    used[v] = true;
    for(Edge &e : G[v]) {
      if(used[e.to] == false && e.cap > 0) {
        int d = find_flow(e.to, t, min(f, e.cap));
        if(d > 0) {
          e.cap -= d;
          G[e.to][e.rev].cap += d;
          return d;
        }
      }
    }
    return 0;
  }
  int max_flow(int s, int t) {
    int flow = 0;
    while(true) {
      used.assign(V, false);
      int f = find_flow(s, t, INF);
      if(f == 0) return flow;
      flow += f;
    }
  }
};

int main() {
  while(true) {
    int m, n; cin >> m >> n;
    if(m == 0 && n == 0) break;
    int blue[m], red[n];
    for(int i = 0; i < m; i++) cin >> blue[i];
    for(int i = 0; i < n; i++) cin >> red[i];
    FordFulkerson flow(m+n+2);
    for(int i = 0; i < m; i++) {
      for(int j = 0; j < n; j++) {
        if(__gcd(blue[i], red[j]) != 1) {
          flow.add_edge(i, m + j, 1);
        }
      }
    }
    for(int i = 0; i < m; i++) flow.add_edge(m+n, i, 1);
    for(int i = 0; i < n; i++) flow.add_edge(m+i, m+n+1, 1);
    cout << flow.max_flow(m+n, m+n+1) << endl;
  }
}