#include <stdio.h>
#include <math.h>

#include <bitset>
#include <vector>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <cstring>
#include <string>
#include <sstream>
#include <algorithm>
#include <iomanip>
#include <iostream>

#define VARIABLE(x) cerr << #x << "=" << x << endl
#define BINARY(x) cerr << #x << "=" << static_cast<bitset<16> >(x) << endl;
#define rep(i,n) for(int i=0;i<(int)(n);i++)
#define REP(i,m,n) for (int i=m;i<(int)(n);i++)
#define if_range(x, y, w, h) if (0<=(int)(x) && (int)(x)<(int)(w) && 0<=(int)(y) && (int)(y)<(int)(h))

const int INF = 10000000;
int dx[4]={-1, 0, 1, 0}, dy[4]={0, -1, 0, 1};
using namespace std;
typedef pair<int, int> P;


/** Problem1163 : Cards **/
// 二部マッチング
const int MAX_V = 1010;

class Flow {
public:
	struct edge { int to, cap, rev; };
	vector<edge> G[MAX_V];
	bool used[MAX_V];
	
	void add_edge(int from, int to, int cap) {
		G[from].push_back((edge){to, cap, (int)G[to].size()});
		G[to].push_back((edge){from, 0, (int)G[from].size()-1});
	}
	
	int dfs(int v, int t, int f) {
		if (v==t) return f;
		used[v] = true;
		for (int i=0; i<G[v].size(); i++) {
			edge &e = G[v][i];
			if (!used[e.to] && e.cap>0) {
				int d = dfs(e.to, t, min(f, e.cap));
				if (d>0) {
					e.cap-=d;
					G[e.to][e.rev].cap += d;
					return d;
				}
			}
		}
		return 0;
	}
	
	int max_flow(int s, int t) {
		int flow = 0;
		for (;;) {
			memset(used, 0, sizeof(used));
			int f = dfs(s, t, INF);
			if (f==0) return flow;
			flow += f;
		}
	}
};

// 最大公約数を求める
int GCD(int a, int b)
{
    int temp;
	
    if( a < b ) { temp = a; a = b; b = temp; }
    if( b < 1 ) return -1;
	
    if( a % b == 0 ) return b;
    return GCD( b, a % b );
}

int main()
{
	int m, n;
	// 0 ~ m-1 : blue
	// m ~ m+n-1 : red
	// m+n : s
	// m+n+1 : g
	
	while (cin>>m>>n, m||n) {
		vector<int> blue, red;
		int s=m+n, t=s+1;
		Flow F;
		
		rep(i, m) {
			int t; cin>>t;
			blue.push_back(t);
		}
		
		rep(i, n) {
			int t; cin>>t;
			red.push_back(t);
		}
		
		rep(i, m) {
			F.add_edge(s, i, 1);
		}
		
		rep(i, n) {
			F.add_edge(m+i, t, 1);
		}
		
		rep(b, m) {
			rep(r, n) {
				if (GCD(blue[b], red[r])>1) {
					F.add_edge(b, m+r, 1);
				}
			}
		}
		
		cout << F.max_flow(s, t) << endl;
	}
}