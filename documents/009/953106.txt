#include <cstdio>
#include <cstring>
#include <cassert>
#include <functional>
#include <algorithm>
#include <iostream>
#include <iomanip>
#include <vector>
#include <map>
#include <iterator>
#include <queue>
#include <utility>

using namespace std;

#define MN 200
#define MR 1000
#define INF 0x7F7F7F7F
#define FILL_INF(xs) memset(xs, 0x7F, sizeof(xs))

int N, M, R;
int L[MN][MN];
int S[MN][MN];
int Z[MR];

bool input() {
    cin >> N >> M;
    if (N == 0 && M == 0) return false;
    FILL_INF(L);
    FILL_INF(S);
    for (int i = 0; i < M; i++) {
        int x, y, t; char sl;
        cin >> x >> y >> t >> sl;
        x--; y--;
        if (sl == 'L') L[x][y] = L[y][x] = t;
        else           S[x][y] = S[y][x] = t;
    }
    cin >> R;
    for (int i = 0; i < R; i++) {
        cin >> Z[i];
        Z[i]--;
    }
    return true;
}


void WarshallFloyd(int G[MN][MN]) {
    for (int i = 0; i < N; i++) G[i][i] = 0;
    for (int k = 0; k < N; k++) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                if (G[i][k] == INF || G[k][j] == INF) continue;
                G[i][j] = min(G[i][j], G[i][k] + G[k][j]);
            }
        }
    }
}

int Cache[MR][MN];
int dfs(int zindex, int ship) {
    if (zindex == R) return 0;
    if (Cache[zindex][ship] >= 0) return Cache[zindex][ship];
    int next = Z[zindex];
    int prev = Z[zindex - 1];
    int Ans = INF;
    if (L[prev][next] != INF)
        Ans = min(Ans, L[prev][next] + dfs(zindex + 1, ship));
    for (int i = 0; i < N; i++) {
        if (L[prev][ship] == INF || S[ship][i] == INF || L[i][next] == INF) continue;
        Ans = min(Ans, L[prev][ship] + S[ship][i] + L[i][next] + dfs(zindex + 1, i));
    }
    return Cache[zindex][ship] = Ans;
}

int main() {
    while (input()) {
        WarshallFloyd(L);
        WarshallFloyd(S);
        memset(Cache, -1, sizeof(Cache));
        cout << dfs(1, Z[0]) << endl;
    }
    return 0;
}