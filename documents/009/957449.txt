#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstring>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <ctime>
#include <complex>
#include <cmath>
using namespace std;
#define EPS 1.0e-10
#define PI 3.1415926535897932384 
typedef long long int ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
#define REP(i,x) for(int i=0;i<(int)(x);i++)
#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)
#define RREP(i,x) for(int i=(x)-1;i>=0;i--)
#define RFOR(i,c) for(auto i=(c).rbegin();i!=(c).rend();++i)
#define ALL(container) container.begin(), container.end()
#define SZ(container) ((int)container.size())
// 実数の符号関数
inline int signum(double x) { return (abs(x) < EPS ? 0 : x > 0 ? 1 : -1); }
//XY座標
#define X real()
#define Y imag()
// 点
typedef complex<int> P;

const int INF = 1<<28;
const int MOD = 1000000007;


P proj(P p, int rot, int rev){
	REP(i, rot){
		swap(p.X, p.Y);
		p.Y = -p.Y;
	}
	REP(i, rev	){
		p.X = -p.X;
	}
	return p;
}
int d[4][2]={{1,0},{0,1},{-1,0},{0,-1}};

int w, h;
int Map[15][15];
int Map2[15][15];

int &get2(P p){
	return Map2[p.X][p.Y];
}

bool check(P b1, P b2, int rot, int rev){
	memcpy(Map2, Map, sizeof(Map));
	queue<P> q;
	q.push(P(0, 0));
	while(!q.empty()){
		P dir=q.front();
		q.pop();
		if(b1+dir != b2+proj(dir, rot, rev) && get2(b1+dir)==1 && get2(b2+proj(dir, rot, rev))==1){
			get2(b1+dir) = 0;
			get2(b2+proj(dir, rot, rev)) = 0;
			REP(i, 4){
				q.push(P(dir.X+d[i][0],dir.Y+d[i][1]));
			}
		}
	}
	REP(i, h+1)REP(j, w+1) if(Map2[j][i]) return 0;
	return 1;
}

bool solve(){
	vector<P> cand;
	RREP(i, h+1)RREP(j, w+1) if(Map[j][i]) cand.push_back(P(j, i));
	REP(i, cand.size())REP(j, i)REP(k, 4)REP(l, 2) if(check(cand[i], cand[j], k, l)) return 1;
	return 0;
}

main(){
	while(cin >> w >> h, w){
		memset(Map, 0, sizeof(Map));
		REP(i, h)REP(j, w) cin >> Map[j+1][i+1];
		cout << (solve()?"YES":"NO") << endl;
	}
	return 0;
}