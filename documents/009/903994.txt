#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <functional>
#include <numeric>
#include <cmath>
#include <cstring>
#include <queue>
#include <stack>
#include <set>

using namespace std;

#define ALL(co) co.begin(), co.end()

typedef long long LL;
typedef pair<int, int> P;
typedef pair<P, P> PP;
typedef vector<int> Array;
typedef vector<int> LArray;

const int INF = 1 << 29;
const LL LINF = 1LL << 60;

int itiv;
inline int getInt() { return (cin >> itiv, itiv); }
void readAll(Array& vec, int n) { for (int i = 0; i < n; i++) cin >> vec[i]; }
inline bool between(int first, int last, int n) { return first <= n && n <= last; }
inline bool inRange(int begin, int end, int n) { return begin <= n && n < end; }
inline bool inRange(int size, int n) { return 0 <= n && n < size; }

int m, n;
int dx[] = { -1, 0, 1, 0 }, dy[] = { 0, -1, 0, 1 };
int dr[] = { 0, -1, 0, 1 }, dc[] = { -1, 0, 1, 0 };


int main(void)
{
	while(cin >> m && m)
	{
		vector<P> goal;
		int sx = getInt(), sy = getInt();
		goal.push_back(P(0, 0));
		for (int i = 0; i < m - 1; i++)
		{
			int x = getInt() - sx, y = getInt() - sy;
			goal.push_back(P(x, y));
		}

		set<P> stars;
		cin >> n;
		for (int i = 0; i < n; i++)
		{
			int x, y; cin >> x >> y;
			stars.insert(P(x, y));
		}

		P ans;
		for (set<P>::iterator it = stars.begin(); it != stars.end(); it++)
		{
			P p = *it;
			bool flag = true;
			for (int j = 0; j < m; j++)
			{
				int nx = p.first + goal[j].first, ny = p.second + goal[j].second;
				if(!stars.count(P(nx, ny)))
				{
					flag = false;
					break;
				}
			}
			if(flag)
			{
				ans = p;
				break;
			}
		}
		cout << ans.first - sx << ' ' << ans.second - sy << endl;
	}
	return 0;
}