#include <iostream>
#include <vector>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <algorithm>	// require sort next_permutation count __gcd reverse etc.
#include <cstdlib>	// require abs exit atof atoi 
#include <cstdio>		// require scanf printf
#include <functional>
#include <numeric>	// require accumulate
#include <cmath>		// require fabs
#include <climits>
#include <limits>
#include <cfloat>
#include <iomanip>	// require setw
#include <sstream>	// require stringstream 
#include <cstring>	// require memset
#include <cctype>		// require tolower, toupper
#include <fstream>	// require freopen
#include <ctime>		// require srand
#define rep(i,n) for(int i=0;i<(n);i++)
#define ALL(A) A.begin(), A.end()

using namespace std;

typedef long long ll;
typedef pair<int, int> P;
const int MAX_N = (int)1e6 + 5;
bool p[MAX_N];
vector<int> prime;

void make_prime (void ){

	prime.clear();
	fill (p, p+MAX_N, true );
	p[0] = false;
	p[1] = false;
	for (int i = 2; i < MAX_N; i++ ){
		if (p[i] ){
			for (int j = 2*i; j < MAX_N; j+= i ){
				p[j] = false;
			} // end for
		} // end if
	} // end for
	rep (i, MAX_N )
		if (p[i] ) prime.push_back (i );
}
			
int main()
{
	ios_base::sync_with_stdio(0);
	make_prime ();
	int N, P;
	while (cin >> N >> P ){
		if (N == -1 && P == -1 ) break;
		vector<int> pp; pp.clear();
		rep (i, prime.size() ){
			if (prime[i] > N ) pp.push_back (prime[i] );
			if (pp.size() >= P ) break;
		} // end rep
		vector<int> res; res.clear();
		rep (i, P ){
			for (int j = i; j < P; j++ ){
				res.push_back (pp[i] + pp[j] );
			} // end for
		} // end rep
		sort (ALL (res ) );
		cout << res[P-1] << endl;
	} // end while
 
	return 0;
}