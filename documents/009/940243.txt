#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <climits>
#include <cassert>
#include <iostream>
#include <iomanip>
#include <sstream>
#include <algorithm>
#include <numeric>
#include <complex>
#include <stack>
#include <queue>
#include <list>
#include <set>
#include <map>
#include <bitset>
#include <functional>
#include <iterator>

using namespace std;

#define dump(n) cout<<"# "<<#n<<'='<<(n)<<endl
#define repi(i,a,b) for(int i=int(a);i<int(b);i++)
#define peri(i,a,b) for(int i=int(b);i-->int(a);)
#define rep(i,n) repi(i,0,n)
#define per(i,n) peri(i,0,n)
#define iter(c) __typeof__((c).begin())
#define foreach(i,c) for(iter(c) i=(c).begin();i!=(c).end();++i)
#define all(c) (c).begin(),(c).end()
#define mp make_pair

typedef unsigned int uint;
typedef long long ll;
typedef unsigned long long ull;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<double> vd;
typedef vector<vd> vvd;
typedef vector<string> vs;
typedef pair<int,int> pii;

const int INFTY=1<<29;
const double EPS=1e-9;

template<typename T1,typename T2>
ostream& operator<<(ostream& os,const pair<T1,T2>& p){
	return os<<'('<<p.first<<','<<p.second<<')';
}
template<typename T>
ostream& operator<<(ostream& os,const vector<T>& a){
	os<<'[';
	rep(i,a.size()) os<<(i?" ":"")<<a[i];
	return os<<']';
}

set<int> calc(set<int> a,set<int> b,string op)
{
	set<int> s;
	for(int x:a) for(int y:b){
		switch(op[0]){
		case '+': s.insert((x+y)%256);     break;
		case '-': s.insert((x-y+256)%256); break;
		case '*': s.insert((x*y)%256);     break;
		case '/': if(y==0) throw "error"; else s.insert(x/y);
		}
	}
	return s;
}

int main()
{
	for(int m;cin>>m && m!=-1;){
		map<string,pii> ntor; // name -> range
		rep(i,m){
			string s; int a,b; cin>>s>>a>>b;
			ntor[s]=mp(a,b);
		}
		int n; cin>>n;
		vs ts(n);
		rep(i,n) cin>>ts[i];
		
		try{
			stack<set<int>> st;
			for(string t:ts){
				if(t=="*" || t=="+" || t=="-" || t=="/"){
					set<int> b=st.top(); st.pop();
					set<int> a=st.top(); st.pop();
					st.push(calc(a,b,t));
				}
				else if(isdigit(t[0])){
					set<int> s; s.insert(atoi(t.c_str()));
					st.push(s);
				}
				else{
					pii r=ntor[t];
					set<int> s;
					repi(i,r.first,r.second+1) s.insert(i);
					st.push(s);
				}
			}
			cout<<"correct"<<endl;
		}
		catch(...){
			cout<<"error"<<endl;
		}
	}
}