#include <iostream>
#include <iomanip>
#include <cassert>
#include <algorithm>
#include <functional>
#include <vector>
#include <string>
#include <cstring>
#include <stack>
#include <queue>
#include <map>
#include <bitset>
#include <sstream>
#include <istream>
#include <cmath>
#include <cstdio>
#include <complex>

using namespace std;

#define vci vector<int>
#define vcs vector<string>
#define pb push_back
#define sz size()
#define mapii map<int, int>
#define mapci map<char, int>
#define mapsi map<string, int>
#define all(x) x.begin(), x.end()
#define minit(a, i) memset(a, i, sizeof(a));

#define for_(i, a, b) for (int i=(int)a; i<(int)b; i++)
#define for_d(i, a, b) for (int i=(int)a-1; i>=b; i--)
#define for_r(i, a, b, c) for (int i=(int)a; i<(int)b; i += c)
#define for_dr(i, a, b, c) for (int i=(int)a-1; i>=b; i -= c)
#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)

template <class T> int __builtin_popcount(T n) { return n ? 1 + __builtin_popcount(n & (n - 1)) : 0; }

typedef long long ll;
typedef double D;

const int iINF = 2147483647;
const ll lINF = 9223372036854775807;

template <class T> inline void dbg(T t) { cout << t << endl; }


int solve(int n, int m) {
	vci num(n);
	for_(i, 0, n) num[i] = i+1;
	
	int cur = n - 1;
	for_(i, 1, n) {
		int j = 0;
		while (j<m) {
			cur = (cur + 1) % n;
			if (num[cur]>0) j++;
		}
		
		num[cur] = 0;
	}
	
	int ans = -1;
	for_(i, 0, n) if (num[i]!=0) ans = num[i];
	return ans;
}

int main() {
	int n, m;
	
	while (1) {
		cin >> n >> m; if (n==0 && m==0) break;
		
		cout << solve(n, m) << endl;
	}
	
	return 0;
}