#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define N 2000000

int A[N],j=0;

int Parent(int i){
  return i/2;
}

int Left(int i){
  return 2*i;
}

int Right(int i){
  return 2*i+1;
}

void exchange(int x,int y){
  int tmp;

  tmp=A[x];
  A[x]=A[y];
  A[y]=tmp;
}

void heapIncreaseKey(int i,int key){
  if(key<A[i])  return;
  A[i]=key;
  while(i>1 && A[Parent(i)]<A[i]){
    exchange(i,Parent(i));
    i=Parent(i);
  }
}

void maxHeapInsert(int key){
  j++;
  A[j]=INT_MIN;
  heapIncreaseKey(j,key);
}

void maxHeapify(int i){
  int l=Left(i);
  int r=Right(i);
  int largest;

  if(l<=j && A[l]>A[i]) largest=l;
  else largest=i;

  if(r<=j && A[r]>A[largest])largest=r;

  if(largest!=i){
    exchange(i,largest);
    maxHeapify(largest);
  }
}

int heapExtractMax(){
  int max;

  if (j<1) return 0;
  max=A[1];
  A[1]=A[j];
  j--;
  maxHeapify(1);
  return max;
}

main(){
  char str[20];
  int x;
  
  while(1){
    scanf("%s",str);
    if(strcmp(str,"end")==0) break;

    if(str[0]=='i') {
      scanf("%d",&x);
      maxHeapInsert(x);
    }
    else printf("%d\n",heapExtractMax());
  }
  return 0;
}