#include "stdio.h"
#include "math.h"

#include <bitset>
#include <vector>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <cstring>
#include <string>
#include <sstream>
#include <algorithm>
#include <iomanip>
#include <iostream>

#define VARIABLE(x) cerr << #x << "=" << x << endl
#define BINARY(x) cerr << #x << "=" << static_cast<bitset<16> >(x) << endl;
#define rep(i,n) for(int i=0;i<(int)(n);i++)
#define REP(i,m,n) for (int i=m;i<(int)(n);i++)
#define if_range(x, y, w, h) if (0<=x && x<w && 0<=y && y<h)

const int INF = 10000000;
int dx[4]={1, 0, -1, 0}, dy[4]={0, 1, 0, -1};
using namespace std;
typedef pair<int, int> P;

/** Problem1277 : Minimal Backgammon (途中)**/
char board[101];
int N, T, L, B;
double dp[100][100];

int main()
{
	while (cin>>N>>T>>L>>B, N||T||L||B) {
		fill(board, board+100, ' ');
		fill(dp[0], dp[0]+100*100, 0.0);
		
		rep(k, L) {
			int x; cin >> x;
			board[x] = 'L';
		}
		
		rep(k, B) {
			int x; cin >> x;
			board[x] = 'B';
		}
		
		dp[0][0] = 1.0;
		
		rep(t, T) {
			rep(n, N) {
				REP(i, 1, 7) {
					if (dp[t][n]==0) continue;
					
					int nn = n+i;
					if (nn>N) nn=N-(nn-N);
					if (board[nn]=='B') nn=0;
					dp[t+1+(board[nn]=='L')][nn] += dp[t][n] * (1.0/6.0);
				}
			}
		}
		
		double ans=0;
		rep(i, T+1) {
			ans+=dp[i][N];
		}
		printf("%.6f\n", ans);
	}
}