#include <vector>
#include <list>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <deque>
#include <algorithm>
#include <utility>
#include <functional>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <climits>
#include <cassert>
#include <memory>
#include<time.h>
using namespace std;
inline int toInt(string s) {int v; istringstream sin(s);sin>>v;return v;}
template<class T> inline string toString(T x) {ostringstream sout;sout<<x;return sout.str();}
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<string> vs;
typedef pair<int, int> pii;
typedef long long ll;
#define ALL(a) (a).begin(),(a).end()
#define RALL(a) (a).rbegin(),(a).rend()
#define EXIST(s,e) ((s).find(e)!=(s).end())
#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define REP(i,n) FOR(i,0,n)
const double EPS = 1e-9;
const double PI  = acos(-1.0);

int dfs(string &cur,string &goal,int cnt,int pos){
	if(pos==cur.size()){
		return cnt;
	}
	if(cur[pos]==goal[pos]){
		return dfs(cur,goal,cnt,pos+1);
	}
	int ret=INT_MAX;
	REP(i,cur.size()-pos){
		string ncur(cur);
		int plus=goal[pos]-cur[pos];
		if(plus<0)plus+=10;
		REP(j,i+1){
			ncur[pos+j]=(ncur[pos+j]-'0'+plus)%10+'0';
		}
		ret=min(ret,dfs(ncur,goal,cnt+1,pos+1));
	}
	return ret;
}

int main(){
	int k;
	while(cin>>k,k){
		string initial,goal;
		cin>>initial>>goal;
		cout<<dfs(initial,goal,0,0)<<endl;
	}
}