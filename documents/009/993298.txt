#include <iostream>
#include <cstdio>
#include <iomanip>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <stack>
#include <utility>
#include <numeric>
#include <algorithm>
#include <functional>
#include <cctype>
#include <complex>
#include <string>
#include <sstream>
#include <fstream>
#include <cassert>
using namespace std;

//common
typedef int  i32;
typedef long long i64,ll;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii;
typedef long long ll; typedef vector<long long> vl; typedef pair<long long,long long> pll; typedef vector<pair<long long,long long> > vpll;
typedef vector<string> vs; typedef long double ld;

#define BR "\n"
#define ALL(c) (c).begin(),(c).end()
#define REP(i,n) for(int i=0;i<(int)(n);++i)
#define EACH(it,o) for(auto it = (o).begin(); it != (o).end(); ++it)
#define IN(l,v,r) ((l)<=(v) && (v)<(r))

//config
//#undef NDEBUG
//#define INF 1<<30
//#define EPS 1e-8
//const ll MOD =100000007;

//debug
#ifdef NDEBUG
#define DUMP(x)
#define DUMPLN(x)
#define DEBUG(x)
#define DEBUGLN(x)
#define LINE()
#define LINELN()
#define CHECK(exp,act)
#define STOP(e)
#else
#define DUMP(x)  cerr << #x << " = " << (x)
#define DUMPLN(x)  DUMP(x) <<endl
#define DEBUG(x) DUMP(x) << LINE() << " " << __FILE__
#define DEBUGLN(x) DEBUG(x)<<endl
#define LINE()    cerr<< " (L" << __LINE__ << ")"
#define LINELN()    LINE()<<endl
#define CHECK(exp,act)  if(exp!=act){DUMPLN(exp);DEBUGLN(act);}
#define STOP(e)  CHECK(e,true);if(!(e)) exit(1);
#endif

template<class T> inline string toString(const vector<T>& x) {
	stringstream ss;
	REP(i,x.size()){
		if(i!=0)ss<<" ";
		ss<< x[i];
	}
	return ss.str();
}

template<class T> inline string toString(const vector<vector<T> >& map) {
	stringstream ss;
	REP(i,map.size()){
		if(i!=0)ss<<BR;
		ss<< toString(map[i]);
	}
	return ss.str();
}
template<class K,class V>  string toString(map<K,V>& x) {
	string res;stringstream ss;
	for(auto& p:x)ss<< p.first<<":" << p.second<<" ";
	return ss.str();
}

string BITtoString(int bit){
    stringstream ss;
    while(bit!=0){ss<<(bit%2);bit/=2;}
    string res=ss.str();reverse(ALL(res));
    return res;
}

template<typename T,typename V> inline T pmod(T v,V MOD){
	return (v%MOD+MOD)%MOD;
}

ll MOD=1000000007;

class Main{
public:
    
	ll pow(ll x, ll N){
		ll res=1;
		while(N!=0){
			if(N%2==1)res=pmod(res*x,MOD);
			x=pmod(x*x,MOD);
			N/=2;
		}
		return res;
	}
		// O(log M)
	ll inv(const ll x){return pow(x,MOD-2);}

	ll C(int n,int r){
		return pmod(pmod(mfs[n]*inv(mfs[n-r]),MOD)*inv(mfs[r]),MOD);
	}
	ll inv(int n){
		return pow(n,MOD-2);
	}
	vector<ll> mfs;
		
	void run(){
		int W,H,K;cin >> W >> H >> K;

		mfs=vector<ll>(250000,1);
		
		for(int v=1;v<250000;v++){
			mfs[v]=pmod(mfs[v-1]*v,MOD);
		}

		ll res=0;
		for(int xK=0;xK<=K;xK++){
			int yK=K-xK;
			ll v=1;
			//→← or ↓↑ 
			v=pmod(v*C(W+H+2*K,W+2*xK),MOD);
			//→ or　←
			if(xK>=1)v=pmod(v*pmod(C(W+2*xK,xK)-C(W+2*xK,xK-1),MOD),MOD);
			//↓ or ↑
			if(yK>=1)v=pmod(v*pmod(C(H+2*yK,yK)-C(H+2*yK,yK-1),MOD),MOD);
			res=pmod(v+res,MOD);
		}

		cout << res << endl;

	}
};

 int main(){
ios::sync_with_stdio(false);
 	Main().run();
 	return 0;
 }