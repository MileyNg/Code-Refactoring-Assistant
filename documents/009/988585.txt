#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

#define rep(i, n) for(int i=0; i<(n); ++i)
#define all(c) (c).begin(),  (c).end()

const int dx[] = {-1, 0, 1, 0}, dy[] = {0, -1, 0, 1};

int h, w, c;
vector<vector<int> > p, vis;
vector<int> col(6, 0);

bool inrect(int x, int y){
    return 0 <= x && x < h && 0 <= y && y < w;
}

void flip(int x, int y, int k){
    vis[x][y] = 1;
    rep(i, 4){
        int nx = x + dx[i], ny = y + dy[i];
        if(!inrect(nx, ny) || vis[nx][ny] || p[nx][ny] != p[0][0])continue;
        flip(nx, ny, k);
    }
    p[x][y] = col[k];
}

int solve(int k){
    int res = 0;
    if(k == 6){
        vector<vector<int> > tmp(all(p));
        for(int i=k-1; i>=0; --i){
            vis.assign(h, vector<int>(w, 0));
            flip(0, 0, i);
        }
        rep(i, h)res += count(all(vis[i]), 1);
        p.swap(tmp);
    }else{
        for(int co=1; co<=6; ++co){
            if(co == col[k-1])continue;
            col[k] = co;
            res = max(res, solve(k+1));
        }
    }
    return res;
}

int main(){
    while(cin >> h >> w >> c, h|w|c){
        col[0] = col[1] = c;
        p.assign(h, vector<int>(w, 0));
        rep(i, h)rep(j, w)cin >> p[i][j];
        cout << solve(2) << '\n';
    }
    return 0;
}