#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <sstream>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <numeric>
#include <cctype>
#include <tuple>

#ifdef _MSC_VER
#include <agents.h>
#endif

#define FOR(i, a, b) for(int i = (a); i < (int)(b); ++i)
#define rep(i, n) FOR(i, 0, n)
#define ALL(v) v.begin(), v.end()
#define REV(v) v.rbegin(), v.rend()
#define MEMSET(v, s) memset(v, s, sizeof(v))
#define X first
#define Y second

using namespace std;

typedef long long ll;
typedef pair<int, int> P;

std::istream &operator>>(std::istream &is, P &p){
	return is >> p.first >> p.second;
}

struct Dice{
private:
	static const int _roll[4][6], _turn[2][6];
public:
	vector<int> value;
	// 1-6 : top, near, right, left, far, bottom 

	Dice(){
		value.resize(6);
		for (int i = 0; i < 6; ++i) value[i] = i+1;
	}
	Dice(initializer_list<int> il){
		value.resize(6, -1);
		int cnt = 0;
		for (auto &e : il){
			value[cnt++] = e;
			if (cnt >= 6) break;
		}
		for (int i = 0; i < 6; ++i) if (value[i] < 0) value[i] = 5 - value[5 - i];
	}

	void roll(int dir){ // N, E, W, S
		vector<int> nxt(6);
		for (int i = 0; i < 6; ++i){
			nxt[i] = value[_roll[dir][i]];
		}
		value = nxt;
	}

	void turn(int dir){ // L, R
		vector<int> nxt(6);
		for (int i = 0; i < 6; ++i){
			nxt[i] = value[_turn[dir][i]];
		}
		value = nxt;
	}

	int &operator[](int i){
		return value[i];
	}
};

const int Dice::_roll[4][6] = {
	{ 1, 5, 2, 3, 0, 4 }, // North
	{ 3, 1, 0, 5, 4, 2 }, // East
	{ 2, 1, 5, 0, 4, 3 }, // West
	{ 4, 0, 2, 3, 5, 1 }, // South
};

const int Dice::_turn[2][6] = {
	{ 0, 3, 1, 4, 2, 5 }, // Left
	{ 0, 2, 4, 1, 3, 5 }, // Right
};

int board[10][10];

struct state{
	P first;
	Dice second;
	bool operator<(const state &r)const{
		return first < r.first;
	}
};

int dx[] = {0, 1, -1, 0};
int dy[] = {-1, 0, 0, 1};

int main(){
	int h, w;
	while (cin >> h >> w, h | w){
		rep(i, h) rep(j, w) cin >> board[i][j];
		P s, g;
		cin >> s >> g;

		map<state, int> m;

		priority_queue<pair<int, state>, vector<pair<int, state>>, greater<pair<int, state>>> q;
		q.push(make_pair(0, state{ s, Dice() }));
		int ans = -1;
		while (!q.empty()){
			int dist = q.top().first;
			state s = q.top().second;
			P &pos = s.first;
			Dice &d = s.second;
			q.pop();
			
			if (m[s] < dist) continue;
			if (s.first == g){
				ans = dist;
				break;
			}

			rep(i, 4){
				int nx = pos.second + dx[i], ny = pos.first + dy[i];
				if (nx < 0 || nx >= w || ny < 0 || ny >= h) continue;
				state nxt = s;
				nxt.second.roll(i);
				nxt.first = make_pair(ny, nx);
				if (m.count(nxt) && m[nxt] <= dist + nxt.second[5] * board[ny][nx]) continue;
				m[nxt] = dist + nxt.second[5] * board[ny][nx];
				q.push(make_pair(dist + nxt.second[5] * board[ny][nx], nxt));
			}
		}
		//cout << "+++";
		cout << ans << endl;
	}

	return 0;
}