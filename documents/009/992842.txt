#include <iostream>
#include <cmath>
#include <vector>
#include <algorithm>
#include <cstring>
 
using namespace std;
 
#define MAX 21
#define EPS 1e-9
#define INF 1e9

struct Point{
  double x, y;
  Point(double x = 0,double y = 0) : x(x), y(y) {}
}; 

int N;
Point h, d, crystal[MAX];
 
double dist(Point a, Point b){
  return sqrt(pow(a.x-b.x,2) + pow(a.y-b.y,2));
}

bool ok;

void rec(int S, int v, double total_dist){
  if(ok) return;

  if(S == (1 << N) - 1){
    ok = true;
    return;
  }
  for(int u = 0 ; u < N ; u++){
    if(!(S >> u & 1)){
      if(total_dist + dist(crystal[v],crystal[u]) >= dist(d, crystal[u])){
	return;
      }
    }
  }
  for(int u = 0 ; u < N ; u++){
    if(!(S >> u & 1) && !ok){
      rec(S | 1 << u, u, total_dist + dist(crystal[v],crystal[u]));
    }
  }
}

bool solve(){
  for(int i = 0 ; i < N ; i++){
    ok = false;
    rec(0, i, dist(h, crystal[i]));
    if(ok){
      return true;
    }
  }  

  return false;
}
 
int main(){
  while(cin >> N >> h.x >> h.y >> d.x >> d.y, (N + h.x + h.y + d.x + d.y)){
    for(int i = 0 ; i < N ; i++){
      cin >> crystal[i].x >> crystal[i].y;
    }
    cout << (solve() ? "YES" : "NO") << endl;
  }
  
  return 0;
}