#include <bitset>
#include <vector>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <cstring>
#include <string>
#include <sstream>
#include <algorithm>
#include <iomanip>
#include <iostream>

#define VARIABLE(x) cerr << #x << "=" << x << endl
#define BINARY(x) cerr << #x << "=" << static_cast<bitset<16> >(x) << endl;
#define rep(i,n) for(int i=0;i<(int)(n);i++)
#define REP(i,m,n) for (int i=m;i<(int)(n);i++)

const int INF = 10000000;
int dx[4]={1, 0, -1, 0}, dy[4]={0, 1, 0, -1};
using namespace std;
typedef long long  ll;
/** Problem1138 : Traveling by Stagecoach **/
int n, m, a, b, p;
int t[10];
int d[30][30];
double dp[1<<10][30];

void solve()
{
	rep(i, 1<<n)
		fill(dp[i], dp[i]+m, INF);
	
	dp[(1<<n)-1][a-1]=0;
	double res = INF;
	for (int S = (1<<n)-1; S>=0; S--) {
		res = min(res, dp[S][b-1]);
		rep(v, m) {
			rep(i, n) {
				if (S>>i&1) {
					rep(u, m) {
						if (d[v][u]>=0) {
							dp[S&~(1<<i)][u] = min(dp[S&~(1<<i)][u], dp[S][v]+(double)d[v][u]/t[i]);
						}
					}
				}
			}
		}
	}
	if (res==INF)
		printf("Impossible\n");
	else
		printf("%.3f\n", res);
}

int main()
{
	while (cin>>n>>m>>p>>a>>b, n||m||p||a||b) {
		fill(d[0], d[0]+30*30, -1);
		rep(i, n) cin >> t[i];
		rep(i, p) {
			int x, y, z; cin >> x >> y >> z;
			d[x-1][y-1]=z;
			d[y-1][x-1]=z;
		}
		solve();
	}
	return 0;
}