#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <sstream>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <numeric>
#include <cctype>
#include <tuple>
#include <array>

// BEGIN CUT HERE
#ifdef _MSC_VER
#include <agents.h>
#endif
// END CUT HERE 

#define FOR(i, a, b) for(int i = (a); i < (int)(b); ++i)
#define rep(i, n) FOR(i, 0, n)
#define ALL(v) begin(v), end(v)
#define REV(v) rbegin(v), rend(v)
#define MEMSET(v, s) memset(v, s, sizeof(v))
#define MP make_pair
#define MT make_tuple
#define X first
#define Y second

using namespace std;

typedef pair<int, int> P;

int main(){
	int n, m;
	cin >> n >> m;

	vector<string> v(n);
	rep(i, n) cin >> v[i];

	vector<P> a[26];
	rep(i, n) rep(j, m){
		if (v[i][j] != '.') a[v[i][j] - 'A'].push_back(MP(j, i));
	}

	vector<int> bits[26];
	int ex[26] = {};

	auto f_x = [&bits, &v](int x1, int x2, int y, int i, int j){
		for (int x = x1; x <= x2; ++x) if (v[y][x] != '.') bits[i][j] |= 1 << v[y][x] - 'A';
		bits[i][j] &= ~(1 << i);
	};
	auto f_y = [&bits, &v](int y1, int y2, int x, int i, int j){
		for (int y = y1; y <= y2; ++y) if (v[y][x] != '.') bits[i][j] |= 1 << v[y][x] - 'A';
		bits[i][j] &= ~(1 << i);
	};

	rep(i, 26){
		if (a[i].empty()) continue;
		ex[i] = 1;
		bits[i].resize(1);

		int t, b, l, r;
		t = a[i][0].Y;
		b = a[i][1].Y;
		l = a[i][0].X;
		r = a[i][1].X;
		if (l == r){
			if (t > b) swap(t, b);
			f_y(t, b, l, i, 0);
			if (b - t == 1) bits[i][0] = -1;
		}
		else if (t == b){
			if (l > r) swap(l, r);
			f_x(l, r, t, i, 0);
			if (r - l == 1) bits[i][0] = -1;
		}
		else{
			bits[i].resize(2);
			vector<int> j = { 0, 1, 1, 0 };
			if (l > r){
				swap(j[1], j[3]);
				swap(l, r);
			}
			f_x(l, r, t, i, j[0]);
			f_y(t, b, l, i, j[1]);
			f_x(l, r, b, i, j[2]);
			f_y(t, b, r, i, j[3]);
		}
	}

	int cnt = 0;
	int state = (1 << 26)-1;
	while (1){
		bool upd = false;

		rep(i, 26){
			if (!ex[i]) continue;
			bool er = false;
			for(auto x : bits[i]){
				if (x&state) continue;
				er = true;
			}
			if (er){
				ex[i] = 0, upd = true, ++cnt;
				state &= ~(1 << i);
			}
		}

		if (!upd) break;
	}
	cout << cnt * 2 << endl;

	return 0;
}