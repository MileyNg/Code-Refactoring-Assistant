#include<cstdio>
#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<complex>
#include<set>
#include<map>
#include<queue>

using namespace std;

#define reps(i,f,n) for(int i=f;i<int(n);i++)
#define rep(i,n) reps(i,0,n)

const int W = 31;
const int H = 61;

class P{
	public:
	int a,b,c,d;
	int val;
	P(int a,int b,int c,int d,int val):a(a),b(b),c(c),d(d),val(val){}
	bool operator<(const P& tmp)const{
		return val>tmp.val;
	}
};

int h,w;
char masu[H][W];

void initQue(priority_queue<P>& que){
	rep(i,h)rep(j,w){
		if(masu[i][j]=='S')que.push(P(i,j,i,j,0));
	}
}

int getCost(int y,int x){
	if(y<0 || x<0 || y>=h || x>=w)return -1;
	if(masu[y][x]=='X')return -1;
	if(masu[y][x]=='T')return 0;
	if(masu[y][x]=='S')return 0;
	return masu[y][x]-'0';
}

void addQue(priority_queue<P> &que, P& u){
	int dy[]={-2,-1,-1,0,0,0,1,1,2};
	int dx[]={1,1,2,1,2,3,1,2,1};
	
	rep(p,9){
		int ny = u.a + dy[p];
		int nx = u.b + dx[p];
		int ncost = getCost(ny,nx);
		if(ncost != -1) que.push(P(u.a,u.b, ny,nx, u.val+ncost));
	}
	rep(p,9){	
		int ty = u.c + dy[p];
		int tx = u.d - dx[p];
		int tcost = getCost(ty,tx);
		if(tcost != -1) que.push(P(ty,tx, u.c,u.d, u.val+tcost));
	}
}

bool isGoal(P& u){
	return masu[u.a][u.b]=='T' || masu[u.c][u.d]=='T';
}

int visit[H][W][H][W];
int solve(){
	rep(i,h)rep(j,w)cin>>masu[i][j];
	
	priority_queue<P> que;
	initQue(que);
	
	int ans = -1;
	rep(i,h)rep(j,w)rep(k,h)rep(p,w)visit[i][j][k][p]=0;
	while(1){
		if(que.empty())break;
		
		P u = que.top();
		que.pop();
		
		if(visit[u.a][u.b][u.c][u.d]==1)continue;
		visit[u.a][u.b][u.c][u.d]=1;
		
		//printf("(%d %d) (%d %d) %d\n",u.a,u.b,u.c,u.d,u.val);
		
		if(isGoal(u)){
			ans = u.val;
			break;
		}
		addQue(que, u);
	}
	
	return ans;
}

int main(){
	while(1){
		cin>>w>>h;
		if(h==0 && w==0)break;
		
		printf("%d\n",solve());
	}
}