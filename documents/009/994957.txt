
#include<cstdio>
#include<cstdlib>
#include<ctime>
#include<cmath>
#include<cstring>
#include<cctype>
#include<complex>
#include<iostream>
#include<sstream>
#include<algorithm>
#include<functional>
#include<vector>
#include<string>
#include<stack>
#include<queue>
#include<map>
#include<set>
#include<bitset>
#include<numeric>
using namespace std;
const int dx[]={1,0,-1};
const int dy[]={0,1,0};
#define INF 1e+8
#define EPS 1e-7
#define PB push_back
#define fi first
#define se second
#define ll long long
#define reps(i,j,k) for(int i = (j); i < (k); i++)
#define rep(i,j) reps(i,0,j)
typedef pair<int,int> Pii;
typedef vector<int> vi;
class data{
    public:
    int y;
    int x;
    int cost;
    int o;
    data(){}
    data(int _y,int _x,int _cost,int _o){
        y = _y;
        x = _x;
        cost = _cost;
        o = _o;
    }
    bool operator<(const data &a)const{
        return cost<a.cost;
    }
};
int main(){
    int W,H;
    while(scanf("%d%d",&W,&H),W){
    int f,m,o;
    int stage[12][12];
    bool memo[12][12][52]={{{0}}};
        scanf("%d%d%d",&f,&m,&o);
        rep(i,H){
            rep(j,W){
                scanf("%d",&stage[i][j]);
            }
        }

        priority_queue < data > Q;
        rep(i,W){
            if(stage[0][i]>0){
                if(o+stage[0][i]>m){
                    Q.push(data(0,i,f,m));
                    memo[0][i][m] = 1;
                }
                else{
                    Q.push(data(0,i,f,o+stage[0][i]));
                    memo[0][i][o+stage[0][i]] = 1;
                }
            }
            else if(f+stage[0][i] >= 0){
                Q.push(data(0,i,f+stage[0][i],o-1));
                memo[0][i][o-1] = 1;
            }
        }
        int ans = -1;
        while(!Q.empty()){
            data d = Q.top();Q.pop();
            if(d.o == 0 ||d.cost < 0)continue;
            if(d.y == H){
                ans = d.cost;
                break;
            }
            rep(i,3){
                int ny = d.y + dy[i];
                int nx = d.x + dx[i];
                if(ny < 0 || nx < 0 || nx > W-1)continue;
                if(stage[ny][nx] > 0){
                    if(d.o+stage[ny][nx]>m){
                        if(memo[ny][nx][m]++)continue;
                        Q.push(data(ny,nx,d.cost,m));
                    }
                    else{
                        if(memo[ny][nx][d.o+stage[ny][nx]]++)continue;
                        Q.push(data(ny,nx,d.cost,d.o+stage[ny][nx]));
                    }
                }
                else{
                    if(d.cost+stage[ny][nx] >= 0){
                        if(memo[ny][nx][d.o-1]++)continue;
                        Q.push(data(ny,nx,d.cost+stage[ny][nx],d.o-1));
                    }
                }
            }
        }
        if(ans == -1)puts("NA");
        else printf("%d\n",f-ans);
    }
    return 0;
}