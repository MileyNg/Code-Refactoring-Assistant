//include----------------------------------------------------------------------------------------------------------------------
#include <bits/stdc++.h>

//using namespace--------------------------------------------------------------------------------------------------------------
using namespace std;

//define-----------------------------------------------------------------------------------------------------------------------
#define rep(i, n) for(int i = 0; i < n; i++)
#define FOR(i, s, n) for(int i = s; i < n; i++)
#define per(i, n) for(int i = n; i >= 0; i--)
#define ROF(i, s, n) for(int i = s; i >= n; i--)
#define FORIT(i, A) for (auto i : A)
#define PRINT(x) cout << (x) << endl
#define ALL(a) (a).begin(),(a).end()
#define RALL(a) (a).rbegin(), (a).rend()
#define PB push_back
#define MP make_pair
#define FOREACH(i, n) for (__typeof((n).begin()) i = (n).begin(); i != (n).end(); ++i)
#define SZ(a) int((a).size())
#define EACH(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)
#define EXIST(s,e) ((s).find(e)!=(s).end())
#define SORT(c) sort((c).begin(),(c).end())
#define INF 1 << 25
#define CLR(a) memset((a), 0 ,sizeof(a))
#define dump(x) cerr << #x << " = " << (x) << endl;
#define debug(x) cerr << #x << " = " << (x) << " (L" << __LINE__ << ")" << " " << __FILE__ << endl;
#define sq(n) (n) * (n)

//typedef----------------------------------------------------------------------------------------------------------------------
typedef vector<int> VI;
typedef vector<VI> VVI;
typedef vector<string> VS;
typedef pair<int, int> PII;
typedef long long LL;
typedef unsigned int uint;
typedef unsigned long long ull;

//const------------------------------------------------------------------------------------------------------------------------
const double EPS = 1e-10;
const double PI = acos( -1.0 );

//global-----------------------------------------------------------------------------------------------------------------------
int n, m;
int can_go[ 5000 ], money_tax[ 5000 ];
bool road[ 5000 ][ 5000 ];
bool go_can[ 5000 ];
int can_go_1[ 5000 ];
int ans[ 5000 ];
int s[ 5000 ][ 5000 ];

//function---------------------------------------------------------------------------------------------------------------------

int main() {
	scanf( "%d %d", &n, &m );
	rep( i, n ) {
		scanf( "%d %d", &money_tax[ i ], &can_go[ i ] );
		go_can[ i ] = false;
		ans[ i ] = INF;
	}
	go_can[ 0 ] = true;
	rep( i, n ) {
		rep( j, n ) {
			s[ i ][ j ] = INF;
			road[ i ][ j ] = false;
			if ( i == j )
				road[ i ][ j ] = true;
		}
		can_go_1[ i ] = INF;
	}
	can_go_1[ 0 ] = 0;
	rep( i, m ) {
		int a, b;
		scanf( "%d %d", &a, &b );
		road[ a - 1 ][ b - 1 ] = true;
		road[ b - 1 ][ a - 1 ] = true;
		s[ a - 1 ][ b - 1 ] = 1;
		s[ b - 1 ][ a - 1 ] = 1;
		if ( a == 1 ) {
			go_can[ b - 1 ] = true;
			can_go_1[ b - 1 ] = 1;
		}
		if ( b == 1 ) {
			go_can[ a - 1 ] = true;
			can_go_1[ a - 1 ] = 1;
		}
	}
	rep( i, n ) {
		if ( !go_can[ i ] || i == 0 )
			continue;
		rep( j, n ) {
			if ( road[ i ][ j ] && !go_can[ j ] ) {
				go_can[ j ] = true;
				can_go_1[ j ] = can_go_1[ i ] + 1;
			}
		}
	}
	rep( i, n ) {
		rep( j, n ) {
			if ( j == 0 )
				continue;
			rep( k, n ) {
				if ( k == 0 )
					continue;
				s[ j ][ k ] = min( s[ j ][ k ], s[ j ][ i ] + s[ i ][ k ] );
			}
		}
	}
	rep( i, n ) {
		go_can[ i ] = false;
	}
	go_can[ 0 ] = true;
	rep( i, n ) {
		if ( go_can[ i ] )
			continue;
		if ( can_go_1[ i ] <= can_go[0] ) {
			ans[ i ] = money_tax[ 0 ];
		}
	}
	rep( i, n ) {
		rep( j, n ) {
			if ( can_go[ i ] >= s[ i ][ j ] )
				ans[ j ] = min( ans[ i ] + money_tax[ i ], ans[ j ] );
		}
	}
	printf( "%d\n", ans[ n - 1 ] );
	return 0;
}