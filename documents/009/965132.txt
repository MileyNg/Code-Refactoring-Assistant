#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <cassert>

using namespace std;

constexpr int UNKNOWN = (1 << 25);

void solve(vector<vector<int>> &matrix) {
  const int h = matrix.size();
  const int w = matrix[0].size();

  vector<vector<bool>> is_question(h - 1, vector<bool>(w - 1));
  vector<pair<int, int>> questions; // r, c
  vector<int> num_qr(h - 1, 0), num_qc(w - 1, 0);
  vector<int> sum_r(h - 1, 0), sum_c(w - 1, 0);

  for(int i = 0; i < h - 1; ++i) {
    sum_r[i] += matrix[i][w - 1];
  }

  for(int i = 0; i < w - 1; ++i) {
    sum_c[i] += matrix[h - 1][i];
  }

  for(int i = 0; i < h - 1; ++i) {
    for(int j = 0; j < w - 1; ++j) {
      if(matrix[i][j] == UNKNOWN) {
	questions.emplace_back(i, j);
	++num_qr[i];
	++num_qc[j];
	is_question[i][j] = true;
      }
      else {
	sum_r[i] -= matrix[i][j];
	sum_c[j] -= matrix[i][j];
      }
    }
  }

  while(!questions.empty()) {
    bool unloop = true;
    int i = 0;

    while(i < questions.size()) {
      const int r = questions[i].first;
      const int c = questions[i].second;

      int value = UNKNOWN;
      if(num_qr[r] == 1) {
	value = sum_r[r];
      }
      else if(num_qc[c] == 1) {
	value = sum_c[c];
      }

      if(value == UNKNOWN) {
	++i;
	continue;
      }

      matrix[r][c] = value;
      sum_r[r] -= value;
      sum_c[c] -= value;
      --num_qr[r];
      --num_qc[c];
      unloop = false;
      questions.erase(questions.begin() + i);
    }

    if(unloop) break;
  }

  if(questions.empty()) { // unique answer
    for(int i = 0; i < h - 1; ++i) {
      for(int j = 0; j < w - 1; ++j) {
	if(is_question[i][j]) {
	  cout << matrix[i][j] << endl;
	}
      }
    }
  }
  else {
    cout << "NO" << endl;
  }
  cout << endl;
}

int main(){
  for(int p, s; cin >> p >> s && p;) {
    vector<vector<int>> matrix(p + 1, vector<int>(s + 1));
    for(auto &row : matrix) {
      for(auto &e : row) {
	string input;
	cin >> input;
	e = (input == "?" ? UNKNOWN : stoi(input));
      }
    }

    solve(matrix);
  }

  return 0;
}