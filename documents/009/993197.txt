#include <string>
#include <vector>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <map>
#include <list>
#include <set>
#include <numeric>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <climits>
#include <cfloat>
#include <ctime>
#include <complex>
#include <cassert>
#include <iomanip>
#include <tuple>
using namespace std;
typedef long long LL;
typedef pair<int,int> P;
typedef tuple<double, int, int, int> T;
int n,m;
double best[30][30][31];
int dist[30][30];
int limit[30][30];
void exec()
{
	cin >> n >> m;
	if(n==0&&m==0){
		exit(0);
	}
	memset(dist,-1,sizeof(dist));
	memset(limit,-1,sizeof(limit));
	int start,goal;
	cin >> start >> goal;
	start--;
	goal--;
	for(int i=0;i<m;i++){
		int x,y,d,c;
		cin >> x >> y >> d >> c;
		x--;
		y--;
		dist[x][y]=dist[y][x]=d;
		limit[x][y]=limit[y][x]=c;
	}
	fill(best[0][0],best[0][0]+30*30*31,1e20);
	priority_queue<T, vector<T>, greater<T> > q;
	q.push(T(0,start,start,0));
	best[start][start][0]=0;
	while(q.size())
	{
		double t=get<0>(q.top());
		int f=get<1>(q.top());
		int p=get<2>(q.top());
		int s=get<3>(q.top());
		q.pop();
		if(t>best[start][start][s])continue;
		for(int i=0;i<n;i++){
			if(i==p)continue;
			for(int ss=max(s-1,1);ss<=min(s+1,limit[f][i]);ss++){
				assert(dist[f][i]>0);
				double tt=t+dist[f][i]/(double)ss;
				if(tt<best[i][f][ss]){
					best[i][f][ss]=tt;
					q.push(T(tt,i,f,ss));
				}
			}
		}
	}
	double ret=1e20;
	for(int i=0;i<n;i++)
	{
		ret=min(ret,best[goal][i][1]);
	}
	if(ret==1e20){
		cout << "unreachable" << endl;
	}
	else
	{
		cout << ret << endl;
	}
}

int main() {
	cout << setprecision(10);
	while(1)exec();
}