
#include <algorithm>
#include <numeric>
#include <map>
#include <vector>
#include <iostream>
#include <queue>

using namespace std;

#define REP(i,n) for(int i=0;i<n;i++)
#define ALL(a) a.begin(),a.end()
#define EACH(it,a) for(auto it=a.begin();it!=a.end();it++)

int dx[4]={1,0,-1,0};
int dy[4]={0,1,0,-1};


int INF=1<<28;

namespace ShortestPath{
    struct Edge{
        int from,to,cost;
        Edge(int from,int to,int cost)
            : from(from),to(to),cost(cost) {};
    };
    ostream& operator <<(ostream& os,const Edge& e){
            os<<"("<<e.from<<"->"<<e.to<<")";
            return os;
    }
    struct Task{
        int prev,pos,cost;
        Task(int prev,int pos,int cost)
            :prev(prev),pos(pos),cost(cost){};
        bool operator>(const Task& r) const{
            return cost>r.cost;
        }
    };
    typedef vector<vector<Edge> > Graph;
    typedef  vector<vector<int> > Mat;

    //verified by codoforces 144D http://codeforces.com/contest/144/submission/4976825
    // // 負の辺がない
    // // O(E*logV)
    vector<int> dijkstra(const Graph& g,const int s,vector<int>& prev){
        const int V=g.size();
        vector<int> d(V,INF);d[s]=0;
        fill(ALL(prev), -2);
        priority_queue<Task,vector<Task>,greater<Task> > que;
        que.push(Task(-1,s,0));
        while(!que.empty()){
            Task task=que.top();que.pop();
            //if(prev[task.pos]!=-2)continue;
            if(d[task.pos]<task.cost)continue;
            prev[task.pos]=task.prev;
            EACH(e,g[task.pos]){
                if(d[e->to]>d[e->from]+e->cost){
                    d[e->to]=d[e->from]+e->cost;
                    que.push(Task(e->from,e->to,d[e->to]));
                }
            }   
        }
        return d;
    }
    vector<int> dijkstra(const Graph& g,const int s){
        vector<int> prev(g.size());return dijkstra(g,s,prev);
    }
}
using namespace ShortestPath;


int W,H;
int enc(int y,int x){
	return y*W+x;
}


int main() {


	while (true) {
		cin >> W >> H;if(W==0 && H==0)break;
        

        Graph g(W*H);
        
		REP(inpy,2*H-1){
			int y=inpy/2;
			if(inpy%2==0){
				REP(x,W-1){
					int b;cin >> b;
					if(b==0){
						g[enc(y,x)].push_back(Edge(enc(y,x),enc(y,x+1),1));
						g[enc(y,x+1)].push_back(Edge(enc(y,x+1),enc(y,x),1));
					}
				}
			}else{
				REP(x,W){
					int b;cin >> b;
					if(b==0){
						g[enc(y,x)].push_back(Edge(enc(y,x),enc(y+1,x),1));
						g[enc(y+1,x)].push_back(Edge(enc(y+1,x),enc(y,x),1));
					}
				}
			}
		}
        int d=dijkstra(g,enc(0,0))[enc(H-1,W-1)];
		if(d<INF)cout << d+1<<endl;
		else cout << 0 <<endl;
	}
}