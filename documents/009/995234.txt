#include<cstdio>
#include<iostream>
#include<vector>
#include<queue>
#include<functional>
#define rep(i,a,b) for(int (i)=(a);(i)<(b);(i)++)
using namespace std;

#define MAX_V 900
#define E 900
#define INF 10000
int h,w,V;
#define pos(_h,_w) ((_h)*w)+(_w) 
struct edge{int to,cost;};
vector<edge> G[MAX_V];
int d[MAX_V];
typedef pair<int,int>P;

void dk(int s){
	priority_queue<P,vector<P>,greater<P> >que;
	fill(d,d+V,INF);
	d[s]=0;que.push(P(0,s));

	while(!que.empty()){
		P p=que.top();que.pop();
		int v=p.second;
		if(d[v]<p.first)continue;
		rep(i,0,(int)G[v].size()){
			edge e=G[v][i];
			if(d[e.to]>d[v]+e.cost){
			d[e.to]=d[v]+e.cost;
			que.push(P(d[e.to],e.to));
			}
		}
	}
}
 


int main(void){
while(true){
	cin>>w>>h;
	V=h*w;
	if(w==0)return(0);
	rep(i,0,2*h-1){
		int now_h=i/2;
	if(!(i&1))
		rep(j,0,w-1){
			edge temp;cin>>temp.cost;
			if(temp.cost>0)continue;
			temp.cost++;
			temp.to=pos(now_h,j+1);
			G[pos(now_h,j)].push_back(temp);
			temp.to=pos(now_h,j);
			G[pos(now_h,j+1)].push_back(temp);
	}else{
		rep(j,0,w){
			edge temp;cin>>temp.cost;
			if(temp.cost>0)continue;
			temp.cost++;
			temp.to=pos(now_h+1,j);
			G[pos(now_h,j)].push_back(temp);
			temp.to=pos(now_h,j);
			G[pos(now_h+1,j)].push_back(temp);
		}

	}	
	
	}
	dk(0);
	if(d[V-1]>=INF)d[V-1]=0;
	else d[V-1]++;
	cout<<d[V-1]<<endl;
		rep(i,0,V)while(!G[i].empty())G[i].pop_back();
}
}