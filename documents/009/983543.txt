#include <cstdio>
#include <cstring>
#include <cmath>
#include <iostream>
#include <algorithm>
#include <numeric>
#include <functional>
#include <vector>
#include <queue>
#include <string>

#define REP(i,n) for (int i = 0; i < (n); i++)
#define FOR(i,s,n) for (int i = (s); i < (n); i++)
#define ALLOF(c) c.begin(), c.end()
#define RANGEOF(c,i,n) c.begin() + (i), c.begin() + (i) + (n)
#define EPS 1e-9
#define INF 1000000000
using namespace std;

template <class T> T read() { T t; cin >> t; return t; }
template <class T> vector<T> read_n(int n) { vector<T> v; REP(i,n) { v.push_back(read<T>()); } return v; }
template <class T> vector<vector<T>> read_nn(int n, int m) { vector<vector<T>> v; REP(i,n) { v.push_back(read_n<T>(m)); } return v; }
template <class T> void write(const T &t) { cout << t << endl; }
struct _Reader { template <class T> _Reader operator ,(T &rhs) { cin >> rhs; return *this; } };
#define READ(t,...) t __VA_ARGS__; _Reader(), __VA_ARGS__
void solve();
int main() { solve(); return 0; }
/// template end ///

void solve()
{
	while (true)
	{
		READ(int, N);
		if (!N) { break; }
		
		auto gems = read_nn<int>(N, 2);
		READ(int, M);

		vector<int> pos(2, 10);
		gems.erase(remove(ALLOF(gems), pos), gems.end());

		REP(j, M)
		{
			READ(char, d);
			READ(int, l);

			int dx = 0, dy = 0;
			switch (d)
			{
			case 'N': dy = 1; break;
			case 'E': dx = 1; break;
			case 'W': dx = -1; break;
			case 'S': dy = 1; break;
			}

			REP(x, l)
			{
				pos[0] += dx;
				pos[1] += dy;
				gems.erase(remove(ALLOF(gems), pos), gems.end());
			}
		}
		write(gems.empty() ? "Yes" : "No");
	}
}