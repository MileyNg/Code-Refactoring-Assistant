#include <iostream>
#include <cstdio>
using namespace std;
#define rep(i,n) for(int i=0;i<n;++i)
#define rep1(i,n) for(int i=1;i<=n;++i)
#define ALL(c) (c).begin(),(c).end()
#define fs first
#define sc second
typedef pair<int,int> P;
P dp[32][32][32][32];		//dp[大きさ-1][初め]=分割数,最小値(q以上が無理なら-1,-1)
int sum[32][32][32][32];
int main(){
	while(true){
		int h,w,s,u[32][32]={},su=0;
		cin >> h >> w >> s;
		if(h==0) break;
		rep(i,h) rep(j,w){
			cin >> u[i][j];
			sum[0][0][i][j]=u[i][j];
			su+=u[i][j];
		}
		s=su-s;				//s以上に
		rep(i,h) rep(j,w){
			if(u[i][j]>=s) dp[0][0][i][j]=P(1,u[i][j]);
			else dp[0][0][i][j]=P(-1,-1);
		}
		rep1(i,h){				//縦の大きさ
			rep1(j,w){			//横の大きさ
				if(i==1 && j==1) continue;
				rep(k,h-i+1){		//縦の初め
					rep(l,w-j+1){	//横の初め
						if(i!=1) sum[i-1][j-1][k][l]=sum[0][j-1][k][l]+sum[i-2][j-1][k+1][l];
						else sum[i-1][j-1][k][l]=sum[i-1][0][k][l]+sum[i-1][j-2][k][l+1];
						//cout << sum[i-1][j-1][k][l] << endl;
						if(sum[i-1][j-1][k][l]<s) dp[i-1][j-1][k][l]=P(-1,-1);
						else dp[i-1][j-1][k][l]=P(1,sum[i-1][j-1][k][l]);
						rep1(m,i-1){	//ちぎった方の大きさ
							P one=dp[m-1][j-1][k][l],two=dp[i-1-m][j-1][k+m][l];
							if(one.fs==-1 || two.fs==-1) continue;
							dp[i-1][j-1][k][l]=max(dp[i-1][j-1][k][l],P(one.fs+two.fs,min(one.sc,two.sc)));
						}
						rep1(m,j-1){	//ちぎった方の大きさ
							P one=dp[i-1][m-1][k][l],two=dp[i-1][j-1-m][k][l+m];
							if(one.fs==-1 || two.fs==-1) continue;
							dp[i-1][j-1][k][l]=max(dp[i-1][j-1][k][l],P(one.fs+two.fs,min(one.sc,two.sc)));
						}
					}
//					cout << endl;
				}
//				cout << endl;
			}
//			cout << endl;
		}
/*		while(true){
			int x,y,xx,yy;
			cin >> x >> y >> xx >> yy;
			cout << sum[x-1][y-1][xx][yy] << endl;
		}
*/
		cout << dp[h-1][w-1][0][0].fs << " " << dp[h-1][w-1][0][0].sc-s << endl;
	}
	return 0;
}