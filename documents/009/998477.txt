#include <iostream>
#include <vector>
#include <algorithm>
#include <cctype>

using namespace std;

class Zone
{
public:
	int value;
	vector<Zone> zones;
	
	Zone() :value(-1) {}
	Zone(int v) :value(v) {}
	
	int best()
	{
		if(value != -1) return value / 2 + 1;
		
		vector<int> needs;
		
		for(auto zone : zones) {
			needs.push_back(zone.best());
		}
		
		sort(needs.begin(), needs.end());
		
		return std::accumulate(needs.begin(), needs.begin() + needs.size() / 2 + 1, 0);
	}
};

int number(string::const_iterator it);

Zone read(string::const_iterator it)
{
	if(isdigit(*it)) {
		int n = number(it);
		it++;
		return Zone(n);
	}
	
	Zone zone;
	while(*it == '[') {
		zone.zones.push_back(read(it));
		*it++;
	}
	
	return zone;
}

int number(string::const_iterator it)
{
	int n = 0;
	while(isdigit(*it)) {
		n *= 10;
		n += (*it) - '0';
	}
	
	return n;
}

int main()
{
	int n;
	cin >> n;
	
	for(int i = 0; i < n; i++) {
		string line;
		cin >> line;
		cout << read(line.begin()).best() << endl;
	}
}