#include <cstdio>
#include <cmath>
#include <cstring>
#include <cstdlib>
#include <climits>
#include <ctime>
#include <queue>
#include <stack>
#include <algorithm>
#include <list>
#include <vector>
#include <set>
#include <map>
#include <iostream>
#include <deque>
#include <complex>
#include <string>
#include <iomanip>
#include <sstream>
#include <bitset>
#include <valarray>
#include <iterator>
using namespace std;
typedef long long int lli;
typedef unsigned int uint;
typedef unsigned char uchar;
typedef unsigned long long ull;
typedef pair<int, int> pii;
typedef vector<int> vi;

#define REP(i,x) for(int i=0;i<(int)(x);i++)
#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();i++)
#define RREP(i,x) for(int i=(x);i>=0;i--)
#define RFOR(i,c) for(__typeof((c).rbegin())i=(c).rbegin();i!=(c).rend();i++)
#define ALL(container) container.begin(), container.end()
#define SZ(container) ((int)container.size())

const int INF = 1<<28;
const double EPS = 1e-8;
const int MOD = 1000000007;


int S, R, a, b, Q;

vector<pii> edges;

void dijkstra(const vector< vector<pii> > &g, int s, int t, vector<int> &ret){
	int n = g.size();
	ret = vector<int>(n, INF);
	vector< vector<int> > prev(S);

	priority_queue<pii, vector<pii>, greater<pii> > dp;
	dp.push(pii(0, s));
	ret[s] = 0;
	while(!dp.empty()){
		int s = dp.top().second;
		dp.pop();
		FOR(it, g[s]){
			int t = it->first;
			if(ret[t] > ret[s]+it->second){
				ret[t] = ret[s]+it->second;
				prev[t].clear();
				prev[t].push_back(s);
				dp.push(pii(ret[t], t));
			}else if(ret[t] == ret[s]+it->second){
				prev[t].push_back(s);
			}
		}
	}
	queue<int> q;
	vector<int> vis(S, 0);
	q.push(t);
	vis[t] = 1;
	while(!q.empty()){
		int s = q.front();
		q.pop();
		FOR(it, prev[s]){
			edges.push_back(pii(*it, s));
			if(!vis[*it]){
				q.push(*it);
				vis[*it] = 1;
			}
		}
	}
	
	reverse(ALL(edges));
}

void solve(vector<ull> src, vector<ull> dest){
	vector<ull> f(S, 0);
	REP(i, src.size()) f[src[i]] |= 1LL << i;
	FOR(it, edges) f[it->second] |= f[it->first];
	REP(i, dest.size()) puts((f[dest[i]] & (1LL << i)) ? "Yes" : "No");
}

main(){
	scanf("%d%d", &S, &R);
	vector< vector<pii> > g(S);
	REP(i, R){
		int u, v, w;
		scanf("%d%d%d", &u, &v, &w);
		g[u-1].push_back(pii(v-1, w));
		g[v-1].push_back(pii(u-1, w));
	}
	scanf("%d%d%d", &a, &b, &Q);
	vector<int> dis;
	dijkstra(g, a-1, b-1, dis);
	vector<ull> src(64), dest(64);
	REP(i, Q){
		int c, d;
		scanf("%d%d", &c, &d);
		src[i%64] = c-1;
		dest[i%64] = d-1;
		if(i%64 == 63) solve(src, dest);
	}
	if(Q%64){
		src.resize(Q%64);
		dest.resize(Q%64);
		solve(src, dest);
	}
	return 0;
}