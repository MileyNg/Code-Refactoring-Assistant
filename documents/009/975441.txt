#include <bits/stdc++.h>
using namespace std;

#define dump(n) cout<<"# "<<#n<<'='<<(n)<<endl
#define repi(i,a,b) for(int i=int(a);i<int(b);i++)
#define peri(i,a,b) for(int i=int(b);i-->int(a);)
#define rep(i,n) repi(i,0,n)
#define per(i,n) peri(i,0,n)
#define all(c) begin(c),end(c)
#define mp make_pair
#define mt make_tuple

typedef unsigned int uint;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<double> vd;
typedef vector<vd> vvd;
typedef vector<string> vs;

const int INF=1e9;
const int MOD=1e9+7;
const double EPS=1e-9;

template<typename T1,typename T2>
ostream& operator<<(ostream& os,const pair<T1,T2>& p){
	return os<<'('<<p.first<<','<<p.second<<')';
}
template<typename T>
ostream& operator<<(ostream& os,const vector<T>& a){
	os<<'[';
	rep(i,a.size()) os<<(i?" ":"")<<a[i];
	return os<<']';
}

struct Edge{
	int src,dst,weight;
	Edge(){}
	Edge(int s,int d,int w):src(s),dst(d),weight(w){}
};
bool operator<(const Edge& a,const Edge& b){return a.weight<b.weight;}
bool operator>(const Edge& a,const Edge& b){return a.weight>b.weight;}

int solve(const vvi& g,vi& rs,int i)
{
	int n=g.size();
	if(i==n){
		if(rs.size()==1) return 0;
		int res=0;
		for(int u:rs){
			int x=INF;
			for(int v:rs) if(u!=v)
				x=min(x,g[u][v]);
			res+=x;
		}
		return res;
	}
	
	int res=solve(g,rs,i+1);
	bool ok=true;
	for(int r:rs)
		if(g[i][r]==0){
			ok=false;
			break;
		}
	if(ok){
		rs.push_back(i);
		res=max(res,solve(g,rs,i+1));
		rs.pop_back();
	}
	return res;
}

int main()
{
	for(int n,m;cin>>n>>m && n|m;){
		if(m==0){
			cout<<0<<endl;
			continue;
		}
		
		vvi g(n,vi(n));
		rep(i,m){
			int u,v,w; cin>>u>>v>>w; u--,v--;
			g[u][v]=g[v][u]=w;
		}
		
		vi rs;
		cout<<solve(g,rs,0)<<endl;
	}
}