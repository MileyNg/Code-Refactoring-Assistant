#include <iostream>
#include <complex>
#include <sstream>
#include <string>
#include <algorithm>
#include <deque>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <vector>
#include <set>
#include <limits>
#include <cstdio>
#include <cctype>
#include <cmath>
#include <cstring>
#include <cstdlib>
#include <ctime>
using namespace std;
#define REP(i, j) for(int i = 0; i < (int)(j); ++i)
#define FOR(i, j, k) for(int i = (int)(j); i < (int)(k); ++i)
#define P pair<int, int>
#define SORT(v) sort((v).begin(), (v).end())
#define REVERSE(v) reverse((v).begin(), (v).end())
const int MAX_N = (1 << 16);
const int INF = 100000 * 20;

int N, dp[MAX_N];
vector< vector<int> > v;

int calc(int bit, int now){
  int ret = v[now][0];
  //REP(i, N + 1) cout <<v[now][i] <<" "; cout <<endl;
  REP(i, N){
    int tmp = (1 << i);
    if(bit & tmp){
      //cout <<tmp <<", " <<i <<", " <<v[now][i] <<endl;
      ret = min(ret, v[now][i + 1]);
    }
  }
  //cout <<"now = " <<now <<", bit = " <<bit <<", ret = " <<ret <<endl;
  //cout <<"---" <<endl;
  return ret;
}

void disp(){
  REP(i, (1 << N)){
    cout <<i <<" : " <<dp[i] <<endl;
  }
}

int main() {
  while(cin >>N && N){
    v = vector<vector<int> >(N, vector<int>(N + 1));
    REP(i, N) REP(j, N + 1) cin >>v[i][j];
    //debug
    //REP(i, N){
    //  REP(j, N + 1) cout <<v[i][j] <<" ";
    //  cout <<endl;
    //}
    REP(i, (1 << N)) dp[i] = INF;
    dp[0] = 0;
    REP(mask, (1 << N)){
      if(mask == INF) continue;
      REP(i, N){
        int next = (1 << i);
        if(mask & next) continue;
        dp[(mask | next)] = min(dp[(mask | next)], dp[mask] + calc(mask, i));
        //cout <<(mask | next) <<", " <<mask <<", " <<next <<", " <<dp[(mask | next)] <<endl;
      }
    }
    //disp();
    cout <<dp[(1 << N) - 1] <<endl;
  }
  return 0;
}