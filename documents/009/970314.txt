#include <iostream>
#include <vector>
#include <algorithm>
#include <functional>
using namespace std;
void print(vector<vector<int> > dp){
  cout << "---------------" << endl;
  for(int i = 0;i  < dp.size();i++){
	for(int j = 0;j < dp.size();j++){
	  cout << dp[i][j] << " ";
	}
	cout << endl;
  }
}
int cal(vector<pair<int,int> > vec){
  vector<vector<int> > dp(vec.size(),vector<int>(vec.size(),0));  
  for(int i = 0;i < vec.size()-1;i++){
	for(int j = 0;j < vec.size();j++){
	  for(int k = j+1;k < vec.size();k++){
		if(vec[j].first > vec[k].first && vec[j].second > vec[k].second){
		  dp[i+1][k] = max(dp[i][j]+1,dp[i+1][k]);

		}
	  }
	}
  }
  int ans = 0;
  for(int i = 0;i < vec.size();i++){
	ans = max(ans,dp[vec.size()-1][i]);
  }
  return ans;
}
void print2(vector<int> vec){
  for(int i = 0;i < vec.size();i++)
	cout << vec[i] << " ";
  cout << endl;

}
int cal2(vector<pair<int,int> > vec){
  vector<int> dp(vec.size(),0);
  for(int i = 0;i < vec.size();i++){
	for(int j =i+1;j < vec.size();j++){
	  if(vec[i].first > vec[j].first && vec[i].second > vec[j].second){
		dp[j] = max(dp[i]+1,dp[j]);
	  }
	}
//	print2(dp);
  }
  int ans = 0;
  for(int i = 0;i < dp.size();i++){
	ans = max(ans,dp[i]);
  }
  return ans;
}
int main(){
  int n;

  while(cin >> n && n!=0){
	vector<pair<int,int> > vec;
	vec.emplace_back(10000,10000);
	for(int i = 0;i < n;i++){
	  int h,r;
	  cin >> h >> r;
	  vec.emplace_back(h,r);  
	}
	cin >> n;
	for(int i = 0;i < n;i++){
	  int h,r;
	  cin >> h >> r;
	  vec.emplace_back(h,r);
	}
	sort(vec.begin(),vec.end(),greater<pair<int,int> >());
	cout << cal(vec) << endl;
//	cout << cnt << endl;
  }
  return 0;
}