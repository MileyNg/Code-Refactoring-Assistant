#include <iostream>
#include <queue>
using namespace std;

int main() {

  long long int w, h;

  int walls[30][30];
  int wallv[30][30];

  while( true ) {

    cin >> w >> h;

    if ( w == 0 ) break;

    for ( long long int i = 0; i < h; i++ ) {

      for ( long long int j = 0; j < w - 1; j++ ) {
	cin >> walls[j][i];
      }
      if ( i == h - 1 ) break;
      for ( long long int j = 0; j < w; j++ ) {
	cin >> wallv[j][i];
      }

    }

    int map[30][30] = {};
    map[0][0] = 1;
    queue<int> qx, qy;
    qx.push(0);
    qy.push(0);

    while( qx.size() > 0 ) {

      int x = qx.front();
      int y = qy.front();
      qx.pop();
      qy.pop();

      if ( x > 0 ) {
	if ( walls[x-1][y] == 0 && map[x-1][y] == 0 ) {
	  map[x-1][y] = map[x][y] + 1;
	  qx.push(x-1);
	  qy.push(y);
	}
      }
      if ( x < w - 1 ) {
	if ( walls[x][y] == 0 && map[x+1][y] == 0 ) {
	  map[x+1][y] = map[x][y] + 1;
	  qx.push(x+1);
	  qy.push(y);
	}
      }
      if ( y > 0 ) {
	if ( wallv[x][y-1] == 0 && map[x][y-1] == 0 ) {
	  map[x][y-1] = map[x][y] + 1;
	  qx.push(x);
	  qy.push(y-1);
	}
      }
      if ( y < h - 1 ) {
	if ( wallv[x][y] == 0 && map[x][y+1] == 0 ) {
	  map[x][y+1] = map[x][y] + 1;
	  qx.push(x);
	  qy.push(y+1);
	}
      }

      if ( map[w-1][h-1] != 0 ) break;

    }

    cout << map[w-1][h-1] << endl;

  }

  return 0;

}