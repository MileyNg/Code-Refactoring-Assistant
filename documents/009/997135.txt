#include <algorithm>
#include <iostream>
#include <cstdio>
#include <map>
#include <set>
#include <sstream>
#include <string>
#include <vector>
#include <complex>
#include <queue>
using namespace std;
typedef long long ll;
//typedef pair<int, int> P;
#define ISEQ(c) (c).begin(), (c).end()

namespace Ps{
	const double EPS = 1e-8;
	const double INF = 1e12;

	typedef complex<double> P;
#define X real()
#define Y img()

	double cross(const P& a, const P& b) {
		return imag(conj(a)*b);
	}
	double dot(const P& a, const P& b) {
		return real(conj(a)*b);
	}

	int ccw(const P& a, P b, P c) {
		b -= a; c-= a;
		if (cross(b, c) > 0) return 1;
		if (cross(b, c) < 0) return -1;
		if (dot(b, c) < 0) return 2;
		if (norm(b) < norm(c)) return -2;
		return 0;
	}

	double pfmod(double v, double MOD) {
		return fmod(fmod(v,MOD)+MOD,MOD);
	}
	double AbsArg(double a) {
		double ret = pfmod(max(a,-a),2*M_PI);
		return min(ret,2*M_PI-ret);
	}


	struct L : public vector<P> {
		L(const P &a, const P &b) {
			push_back(a); push_back(b);
		}
	};

	bool isIntersect(const L &s, const L &t) {
		return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 and ccw(t[0], t[1], s[0])*ccw(t[0],t[1],s[1]) <= 0;
	}
}
using namespace Ps;

double G[1010][1010];


double d[1010];
bool used[1010];

void dijkstra(int s, int n) {
	fill(d, d+1010, INF);
	fill(used, used+1010, false);
	d[s] = 0;

	while (true) {
		int v = -1;
		for (int u = 0; u < n; u++) {
			if (!used[u] and (v == -1 or d[u] < d[v])) v = u;
		}

		if (v == -1) break;
		used[v] = true;

		for (int u = 0; u < n; u++) {
			d[u] = min(d[u], d[v]+G[v][u]);
		}
	}
}

int main() {
	int na, nb;
	cin >> na >> nb;
	vector<int> xa(na), ya(na), xb(nb), yb(nb);
	for (int i = 0; i < na; i++) {
		cin >> xa[i] >> ya[i];
	}
	for (int i = 0; i < nb; i++) {
		cin >> xb[i] >> yb[i];
	}
	L la(P(xa[0],ya[0]),P(xa[1],ya[1]));
	L lb(P(xb[0],yb[0]),P(xb[1],yb[1]));
	
	for (int i = 0; i < na; i++) {
		for (int j = i+1; j < na; j++) {
			if (isIntersect(lb, L(P(xa[i],ya[i]),P(xa[j],ya[j])))) {
				G[j][i] = G[i][j] = INF;
			} else {
				G[j][i] = G[i][j] = hypot(xa[i]-xa[j],ya[i]-ya[j]);
			}
		}
		G[i][i] = INF;
	}
	dijkstra(0, na);
	double res = d[1] + abs(lb[0]-lb[1]);

	for (int i = 0; i < nb; i++) {
		for (int j = i+1; j < nb; j++) {
			if (isIntersect(la, L(P(xb[i],yb[i]),P(xb[j],yb[j])))) {
				G[j][i] = G[i][j] = INF;
			} else {
				G[j][i] = G[i][j] = hypot(xb[i]-xb[j],yb[i]-yb[j]);
			}
		}
		G[i][i] = INF;
	}
	dijkstra(0, nb);
	res = min(res, d[1]+abs(la[0]-la[1]));
	if (res >= INF) cout << -1 << endl;
	else
		printf("%.20f\n",res); 

}