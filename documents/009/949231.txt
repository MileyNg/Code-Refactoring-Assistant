//ヘッダファイル
#include<stdio.h>
#include<math.h>

//マクロ定義
#define DIM2 2
#define X 0
#define Y 1

//プロトタイプ宣言
double func_calAB(double num1, double num2);
double func_calC(double num1, double num2, double num3, double num4);
double func_calX(double a1, double a2, double b1, double b2, double c1, double c2);
double func_calY(double a1, double a2, double b1, double b2, double c1, double c2);
double func_calR(double p1[], double result[]);

main()
{
	int n = 0, i = 0; //繰り返し回数制御変数
	double p1[DIM2] = {0, 0}, p2[DIM2] = {0, 0}, p3[DIM2] = {0, 0}; //変数の宣言と初期化
	double a1 = 0, a2 = 0, b1 = 0, b2 = 0, c1 = 0, c2 = 0;
	double r  = 0, result[DIM2] = {0, 0};
	scanf("%d", &n); //繰り返し回数の入力
	
	for(i = 0; i < n; i++)
	{
		//座標の入力を取得
		scanf("%lf %lf %lf %lf %lf %lf", &p1[X], &p1[Y], &p2[X], &p2[Y], &p3[X], &p3[Y]);
		
		a1 = func_calAB(p2[X], p1[X]);
		b1 = func_calAB(p2[Y], p1[Y]);
		c1 = func_calC(p1[X], p2[X], p1[Y], p2[Y]);
		
		a2 = func_calAB(p3[X], p1[X]);
		b2 = func_calAB(p3[Y], p1[Y]);
		c2 = func_calC(p1[X], p3[X], p1[Y], p3[Y]);
		
		result[X] = func_calX(a1, a2, b1, b2, c1, c2);
		result[Y] = func_calY(a1, a2, b1, b2, c1, c2);
		
		r = func_calR(result, p1);
		
		printf("%.3lf %.3lf %.3lf\n", result[X], result[Y], r);
		r = 0, result[X] = 0, result[Y] = 0;
	}
	return 0;
}
double func_calAB(double num1, double num2)
{
	double result = 0;
	result = 2 * (num1 - num2);
	return result;
}
double func_calC(double num1, double num2, double num3, double num4)
{
	double result = 0;
	result = pow(num1, 2) - pow(num2, 2) + pow(num3, 2) - pow(num4, 2);
	return result;
}
double func_calX(double a1, double a2, double b1, double b2, double c1, double c2)
{
	double result = 0;
	result = ((b1 * c2) - (b2 * c1)) / ((a1 * b2) - (a2 * b1));
	return result;
}
double func_calY(double a1, double a2, double b1, double b2, double c1, double c2)
{
	double result = 0;
	result = ((c1 * a2) - (c2 * a1)) / ((a1 * b2) - (a2 * b1));
	return result;
}
double func_calR(double p1[], double result[])
{
	double r = 0;
	r = sqrt(pow(p1[X] - result[X], 2) + pow(p1[Y] - result[Y], 2));
	return r;
}