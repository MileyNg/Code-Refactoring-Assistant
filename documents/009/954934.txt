#include <iostream>
#include <cstdio>
#include <iomanip>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <stack>
#include <utility>
#include <numeric>
#include <algorithm>
#include <functional>
#include <cctype>
#include <complex>
#include <string>
#include <sstream>
#include <fstream>
#include <cassert>
using namespace std;

//common
typedef int  i32;
typedef long long i64,ll;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii;
typedef long long ll; typedef vector<long long> vl; typedef pair<long long,long long> pll; typedef vector<pair<long long,long long> > vpll;
typedef vector<string> vs; typedef long double ld;

#define BR "\n"
#define ALL(c) (c).begin(),(c).end()
#define REP(i,n) for(int i=0;i<(int)(n);++i)
#define EACH(it,o) for(auto it = (o).begin(); it != (o).end(); ++it)
#define IN(l,v,r) ((l)<=(v) && (v)<(r))

//config
//#undef NDEBUG
//#define INF 1<<30
//#define EPS 1e-8
//const ll MOD =100000007;

//debug
#ifdef NDEBUG
#define DUMP(x)
#define DUMPLN(x)
#define DEBUG(x)
#define DEBUGLN(x)
#define LINE()
#define LINELN()
#define CHECK(exp,act)
#define STOP(e)
#else
#define DUMP(x)  cerr << #x << " = " << (x)
#define DUMPLN(x)  DUMP(x) <<endl
#define DEBUG(x) DUMP(x) << LINE() << " " << __FILE__
#define DEBUGLN(x) DEBUG(x)<<endl
#define LINE()    cerr<< " (L" << __LINE__ << ")"
#define LINELN()    LINE()<<endl
#define CHECK(exp,act)  if(exp!=act){DUMPLN(exp);DEBUGLN(act);}
#define STOP(e)  CHECK(e,true);if(!(e)) exit(1);
#endif

template<class T> inline string toString(const vector<T>& x) {
	stringstream ss;
	REP(i,x.size()){
		if(i!=0)ss<<" ";
		ss<< x[i];
	}
	return ss.str();
}

template<class T> inline string toString(const vector<vector<T> >& map) {
	stringstream ss;
	REP(i,map.size()){
		if(i!=0)ss<<BR;
		ss<< toString(map[i]);
	}
	return ss.str();
}
template<class K,class V>  string toString(map<K,V>& x) {
	string res;stringstream ss;
	for(auto& p:x)ss<< p.first<<":" << p.second<<" ";
	return ss.str();
}

string BITtoString(int bit){
    stringstream ss;
    while(bit!=0){ss<<(bit%2);bit/=2;}
    string res=ss.str();reverse(ALL(res));
    return res;
}

template<typename T,typename V> inline T mod(T v,V MOD){
	return (v%MOD+MOD)%MOD;
}


#include <iostream>
#include <string>
#include <cctype>
#include <sstream>

using namespace std;

namespace SyntaxAnalysis{
	typedef string::const_iterator Cursor;
	
	class ParseError{};

	Cursor last;
	// <数>           ::= (0|1|2|3|4|5|6|7|8|9)+
	map<string,int> atommap;
	int molecule(Cursor&);int term(Cursor&);
	int factor(Cursor&);
	int atom(Cursor&);int number(Cursor&);

	int molecule(Cursor& c){
		int res=0;
		while(c!=last && *c!=')'){
			if(*c=='('){
				c++;
				int m=molecule(c);
				c++;
				int n=number(c);
				res+=m*n;
			}else{
				int a=atom(c);
				if(isdigit(*c)){
					int n=number(c);
					res+=a*n;
				}else{
					res+=a;
				}
			}
		}
		return res;
	}

	int atom(Cursor& c){
		stringstream ss;
		ss<<*c;
		c++;
		if(islower(*c)){
			ss<<*c;
			c++;
		}
		string at;ss>>at;
		if(atommap.count(at)==0) throw ParseError();
		return atommap[at];
	}

	// <数>           ::= (0|1|2|3|4|5|6|7|8|9)+
	int number(Cursor& c){
	    stringstream ss;
	    while(isdigit(*c)){
	        ss << *c;
	        c++;
	    }
	    int ret;
	    ss >> ret;
	    return ret;
	}
}
using namespace SyntaxAnalysis;

class Main{
public:

	void run(){
		while(true){
			string s;cin >> s;
			if(s=="END_OF_FIRST_PART")break;
			int v;cin >> v;
			atommap[s]=v;
		}

		while(true){
			string s;cin >> s;
			if(s=="0")break;
			Cursor c=s.begin();
			last=s.end();
			try{
				cout << molecule(c)<<endl;
			}catch(ParseError e){
				cout << "UNKNOWN"<<endl;
			}
		}

	}
};

 int main(){
	//ios::sync_with_stdio(false);
 	Main().run();
 	return 0;
 }