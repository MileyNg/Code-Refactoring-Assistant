#include <algorithm>
#include <iostream>
#include <cstdio>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
using namespace std;

#define ISEQ(c) (c).begin(), (c).end()
typedef long long ll;
typedef pair<int, int> P;

int board[100][100];
int num[100][100];
int m = 50;
map<P, int> memo;

void calc(int t, int f, int x, int y) {
  P p = P(t,f);
  bool flag = false;
  for (int i = 6; i > 3 and !flag; i--) {
    if (f == i and board[x][y] > board[x][y-1]) {
      flag = true;
      calc(7-i, t, x, y-1);
    } else if (f == 7-i and board[x][y] > board[x][y+1]) {
      flag = true;
      calc(7-i, 7-t, x, y+1);
    } else if (memo[p] == i and board[x][y] > board[x+1][y]) {
      flag = true;
      calc(7-i, f, x+1, y);
    } else if (memo[p] == 7-i and board[x][y] > board[x-1][y]) {
      flag = true;
      calc(7-i, f, x-1, y);
    } 
  }
  if(!flag) {
    board[x][y]++;
    num[x][y] = t;
  }
}

int main() {
  memo[P(1,2)] = 3;
  memo[P(1,3)] = 5;
  memo[P(1,4)] = 2;
  memo[P(1,5)] = 4;
  memo[P(2,1)] = 4;
  memo[P(2,3)] = 1;
  memo[P(2,4)] = 6;
  memo[P(2,6)] = 3;
  memo[P(3,1)] = 2;
  memo[P(3,2)] = 6;
  memo[P(3,5)] = 1;
  memo[P(3,6)] = 5;
  memo[P(4,1)] = 5;
  memo[P(4,2)] = 1;
  memo[P(4,5)] = 6;
  memo[P(4,6)] = 2;
  memo[P(5,1)] = 3;
  memo[P(5,3)] = 6;
  memo[P(5,4)] = 1;
  memo[P(5,6)] = 4;
  memo[P(6,2)] = 4;
  memo[P(6,3)] = 2;
  memo[P(6,4)] = 5;
  memo[P(6,5)] = 3;
  while (true) {
    int n;
    cin >> n;
    if(!n) break;
    for (int i = 0; i < 100; i++)
      for (int j = 0; j < 100; j++) {
	board[i][j] = 0;
	num[i][j] = 0;
      }
    
    for (int i = 0; i < n; i++) {
      int t, f;
      cin >> t >> f;
      calc(t, f, m, m);
    }
    int res[7] = {};
    for (int i = 0; i < 100; i++) {
      for (int j = 0; j < 100; j++) {
	res[num[i][j]]++;
      }
    }
    for (int i = 1; i < 6; i++)
      cout << res[i] << " ";
    cout << res[6] << endl;
  }
}