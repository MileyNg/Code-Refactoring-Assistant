#include<iostream>
#include<algorithm>
#include<vector>
using namespace std;
int compress( vector< int >& x){
  sort(x.begin(),x.end());
  x.erase(unique(x.begin(),x.end()),x.end());
  return x.size();
}
int calc(vector<vector<int> >& mas,int y, int x, int ny, int nx){
  return mas[ny][nx] + mas[y - 1][x - 1] - mas[y - 1][nx] - mas[ny][x - 1];
}
int main(){
  int n, m;
  vector< int > x, y, cx, cy; //ああ
  const int INF = 1e9 + 1;
  cin >> n >> m;
  x.resize(n + 2), y.resize(n + 2), cx.resize(n), cy.resize(n);
  x[n] = INF, y[n] = INF, x[n + 1] = -INF, y[n + 1] = -INF;
  for(int i = 0; i < n; i++){
    cin >> x[i] >> y[i];
    cx[i] = x[i], cy[i] = y[i];
  }
  static vector< vector< int > > mas( compress(y) + 1, vector< int >( compress(x) + 1, 0));
  for(int i = 0; i < n; i++){
    int yy = lower_bound(y.begin(),y.end(),cy[i])-y.begin();
    int xx = lower_bound(x.begin(),x.end(),cx[i])-x.begin();
    mas[yy][xx]++;
  }
  for(int i = 0; i < mas.size() - 1; i++){
    for(int j = 0; j < mas[i].size() - 1; j++){
      mas[i + 1][j + 1] += mas[i + 1][j] + mas[i][j + 1] - mas[i][j];
    }
  }
  int x1, y1, x2, y2;
  while(m--){
    cin >> x1 >> y1 >> x2 >> y2;
    x1 = lower_bound( x.begin(), x.end(), x1) - x.begin();
    x2 = upper_bound( x.begin(), x.end(), x2) - x.begin() - 1;
    y1 = lower_bound( y.begin(), y.end(), y1) - y.begin();
    y2 = upper_bound( y.begin(), y.end(), y2) - y.begin() - 1;
    cout << calc(mas,y1,x1,y2,x2) << endl;
  }
}