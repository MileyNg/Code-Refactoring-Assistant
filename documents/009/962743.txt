
//i日目の当番,i-1日目に鍵を持ち帰った人どちらも、i-1日目に鍵を持ち帰った人と考えたほうがやりやすい。

#include<iostream>
#define rep(i,n) for(i = 0;i < n;i++)
using namespace std;

int N;
char S[1002];
int dp[1001][2][2][2];	//dp[i][ほげ] = i日目の出席状況.0日目はJだけが出席している。
char *str = "JOI";

int main(){
	int i,j,k,l,m,n,o,p;
	int touJ,touO,touI;		//次の日当番かどうか
	int keyJ,keyO,keyI;		//次の日鍵を持ってくるかどうか
	int bitJ,bitO,bitI;		//次の日必ず出席するかどうか
	cin >> N >> S;

	dp[0][1][0][0] = 1;
	rep(i,N){
		touJ = (S[i]==str[0]);
		touO = (S[i]==str[1]);
		touI = (S[i]==str[2]);
		rep(j,2){
			rep(k,2){
				rep(l,2){
					if( dp[i][j][k][l] == 0 ){
						continue;
					}

					int plusflag[2][2][2] = {0};
					rep(m,3){
						keyJ = 0,keyO = 0,keyI = 0;
						keyJ = ( m == 0 && j == 1 );
						keyO = ( m == 1 && k == 1 );
						keyI = ( m == 2 && l == 1 );
						if( keyJ == 0 && keyO == 0 && keyI == 0 )
							continue;
						bitJ = max( touJ,keyJ );
						bitO = max( touO,keyO );
						bitI = max( touI,keyI );
						//あり得る候補にタス(各状態で1回だけ)
						rep(n,2){
							rep(o,2){
								rep(p,2){
									if( n < bitJ || o < bitO || p < bitI )
										continue;
									if( plusflag[n][o][p] )
										continue;
									dp[i+1][n][o][p] += dp[i][j][k][l];
									dp[i+1][n][o][p] %= 10007;
									plusflag[n][o][p] = 1;
								}
							}
						}
					}
				}
			}
		}
	}

	//デバッグ
	/*rep(i,N+1){
		rep(j,2){
			rep(k,2){
				rep(l,2){
					cout << dp[i][j][k][l] << " ";
				}
			}
		}
		cout << endl;
	}*/

	int ans = 0;
	rep(i,2){
		rep(j,2){
			rep(k,2){
				ans += dp[N][i][j][k];
				ans %= 10007;
			}
		}
	}
	cout << ans << endl;
	return 0;
}