#include<vector>
#include<algorithm>
#include<iostream>
using namespace std;
struct UnionFind{
  vector<int> rank;
  UnionFind(int size) : rank(size, -1) {}
  bool unite(int x, int y){
    x = find(x);
    y = find(y);
    if(x == y){
      return 0;
    }
    if(rank[y] < rank[x]){
      swap(x, y);
    }
    rank[x] += rank[y];
    rank[y] = x;
    return 1;
  }
  bool same(int x, int y){
    return find(x) == find(y);
  }
  int find(int x){
    return rank[x] < 0 ? x : rank[x] = find(rank[x]);
  }
  int size(int x){
    return -rank[find(x)];
  }
};

int main(){
  int n, q, com, x, y;
  cin >> n >> q;
  UnionFind uf(n);
  for(int i = 0; i < q; ++i){
    cin >> com >> x >> y;
    if(com == 0){
      uf.unite(x, y);
    }
    else{
      cout << (uf.same(x, y) ? 1 : 0) << endl;
    }
  } 
  return 0;
}