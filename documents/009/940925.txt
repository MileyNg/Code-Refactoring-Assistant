#include <bits/stdc++.h>

#define rep_(v, f, l) for (int v = (f); v < (l); ++v)
#define rep(v, n) rep_(v, 0, n)
#define lep(v, n) rep_(v, 1, n + 1)

using namespace std;

typedef long long int lint;

static inline int in(){ int x; scanf("%d", &x); return x; }
static inline lint inl(){ lint x; scanf("%lld", &x); return x; }

const int MAX_N = 10000000;

bool sieve[MAX_N + 1];
int main()
{
    rep(i, MAX_N + 1) sieve[i] = true;
    for (int i = 2; i * i <= MAX_N; i++){
        for (int j = i * i; j <= MAX_N; j += i){
            sieve[j] = false;
        }
    }
    vector<int> quad_prime;
    for (int i = 13; i <= MAX_N; i += 2){
        if (sieve[i] && sieve[i - 2] && sieve[i - 6] && sieve[i - 8]){
            quad_prime.push_back(i);
        }
    }

    int n;
    while (n = in()){
        printf("%d\n", quad_prime[upper_bound(quad_prime.begin(), quad_prime.end(), n) - quad_prime.begin() - 1]);
    }

    return (0);
}