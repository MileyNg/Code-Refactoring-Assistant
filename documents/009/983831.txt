#include<iostream>
#define REP(i,n) for(int i=0;i<(int)(n);i++)
#define MAX_V 500000
using namespace std;
struct node{
  int id,key;
  node *parent,*left,*right;
  node():key(0),parent(NULL),left(NULL),right(NULL){}
};
node nodes[MAX_V]{};
int id=0;
node* make_binary_tuple(int key){
  nodes[id].key=key;
  return &nodes[id++];
}
node* find_node(node* root, int key){
  if(root==NULL) return NULL;
  if(key>root->key) return find_node(root->right,key);
  if(key<root->key) return find_node(root->left,key);
  return root;
}
bool contain(node* root, int key){
  return find_node(root,key)!=NULL;
}

void printPreorder(node* n){
  cout<<" "<<n->key;
  if(n->left!=NULL) printPreorder(n->left);
  if(n->right!=NULL) printPreorder(n->right);
}
void printInorder(node* n){
  if(n->left!=NULL) printInorder(n->left);
  cout<<" "<<n->key;
  if(n->right!=NULL) printInorder(n->right);
}

node* tree_insert(node* root, int key){
  node* z=make_binary_tuple(key);
  node* y=NULL;
  node* x=root;
  while(x!=NULL){
    y=x;
    if(z->key<x->key)
      x=x->left;
    else
      x=x->right;
  }
  z->parent=y;
  if(y==NULL)
    root=z;
  else if(z->key<y->key)
    y->left=z;
  else
    y->right=z;
  return root;
}
node* tree_minimum(node* x){
  while(x->left!=NULL)
    x=x->left;
  return x;
}
node* tree_successor(node* x){
  if(x->right!=NULL)
    return tree_minimum(x->right);
  node *y=x->parent;
  while(y!=NULL&&x==y->right){
    x=y;
    y=y->parent;
  }
  return x;
}
node* tree_delete(node* root, int key){
  node* z = find_node(root, key);
  if(z==NULL) return root;
  node *x=NULL,*y=NULL;
  if(z->left==NULL||z->right==NULL)
    y=z;
  else
    y=tree_successor(z);
  if(y->left!=NULL)
    x=y->left;
  else
    x=y->right;
  if(x!=NULL)
    x->parent=y->parent;
  if(y->parent==NULL)
    root=x;
  else if(y==y->parent->left)
    y->parent->left=x;
  else
    y->parent->right=x;
  if(y!=z)
    z->key=y->key;
  return root;
}
int main(){
  node* root=NULL;
  int n; cin>>n;
  REP(i,n){
    string s; cin>>s;
    if(s=="insert"){
      int key; cin>>key;
      root = tree_insert(root,key);
    } else if(s=="print"){
      printInorder(root); cout<<"\n";
      printPreorder(root); cout<<"\n";
    } else if(s=="find"){
      int key; cin>>key;
      if(contain(root,key)) cout<<"yes\n";
      else cout<<"no\n";
    } else if(s=="delete"){
      int key; cin>>key;
      root=tree_delete(root,key);
    }
  }
}