#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

const int MAX_=1000000;

bool is_prime[MAX_];
vector<int> prime;

bool sieve(){
	fill(is_prime,is_prime+MAX_,true);
	is_prime[0]=is_prime[1]=false;
	for(int i=2; i<MAX_; ++i){
		if(is_prime[i]){
			prime.push_back(i);
			for(int j=2*i; j<MAX_; j+=i){
				is_prime[j]=false;
			}
		}
	}
}

int solve(int n,int p){
	vector<int> sum_prime;
	auto it=upper_bound(prime.begin(),prime.end(),n);
	//cout << *it << endl;
	for(int i=0; it!=prime.end()&&i<p; ++it,++i){
		auto it_=it;
		for(int j=0; it_!=prime.end()&&j<p; ++it_,++j){
			sum_prime.push_back((*it)+(*it_));
			//cout << (*it)+(*it_) << endl;
		}
	}
	sort(sum_prime.begin(),sum_prime.end());
	return sum_prime[p-1];
}

int main(){
	int N,P;
	sieve();
	while(cin>>N>>P&&!(N==-1&&P==-1)){
		cout << solve(N,P) << endl;
	}
	return 0;
}