#include<iostream>
#include<queue>
using namespace std ;

int map[200][200] = {} ;
int dx[] = { -1,0,1,0 } ;
int dy[] = { 0,-1,0,1 } ;

queue<int> count ;
queue<int> x ;
queue<int> y ;

int main(){
	
	int w , h ;
	int nx , ny , nc ;
	
	while(1){
		cin >> w >> h ;
		if( w==0 && h==0 ) break ;
		
		for( int i=0 ; i<=(h-1)*2 ; i++ ){
			for( int j=(i+1)%2 ; j<=(w-1)*2 ; j += 2  ){
				cin >> map[i][j] ;
			}
		}
		
		count.push(1) ;
		x.push(0) ;
		y.push(0) ;
		
		while(1){
			if( count.empty() ){
				cout << 0 << endl ;
				break ;
			}
			else if( x.front() == (w-1)*2 && y.front() == (h-1)*2 ){
				cout << count.front() << endl ;
				break ;
			}
			
			nc = count.front() ;
			nx = x.front() ;
			ny = y.front() ;
			count.pop() ;
			x.pop() ;
			y.pop() ;
			
			for( int i=0 ; i<4 ; i++ ){
				if( nx+dx[i]*2 >= 0 && nx+dx[i]*2 <= (w-1)*2 &&
					ny+dy[i]*2 >= 0 && ny+dy[i]*2 <= (h-1)*2 &&
					map[ ny+dy[i]*2 ][ nx+dx[i]*2 ] == 0 &&
					map[ ny+dy[i] ][ nx+dx[i] ] == 0 ){
					map[ ny+dy[i]*2 ][ nx+dx[i]*2 ] = nc+1 ;
						x.push( nx+dx[i]*2 ) ;
						y.push( ny+dy[i]*2 ) ;
						count.push( nc+1 ) ;
				}
			}
		}
		
		while(1){
			if( count.empty() ) break ;
			else{
				count.pop() ;
				x.pop() ;
				y.pop() ;
			}
		}
		
		for( int i=0 ; i<=(h-1)*2 ; i++ ){
			for( int j=0 ; j<=(w-1)*2 ; j++ ){
				map[i][j] = 0 ;
			}
		}
	}
	
return 0 ;
}