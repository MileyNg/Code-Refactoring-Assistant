//include
//------------------------------------------
#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>

using namespace std;

//debug
#define DUMP(x)  cerr << #x << " = " << (x) << endl;
#define DEBUG(x) cerr << #x << " = " << (x) << " (L" << __LINE__ << ")" << " " << __FILE__ << endl;

int main(){
    int N=1;
    while(cin >> N && N){

    	vector<pair<int,int> >dia;
    	for(int i =0;i< N;i++){
    		vector<string>ss;
    		string st;
    		cin >> st;
    		ss.push_back(st);
    		cin >> st;
    		ss.push_back(st);
    		pair<int,int>buf(0,0);
    		buf.first = (ss[0][0]*10+ss[0][1])*3600+(ss[0][3]*10+ss[0][4])*60+(ss[0][6]*10+ss[0][7]);
    		
    		buf.second = (ss[1][0]*10+ss[1][1])*3600+(ss[1][3]*10+ss[1][4])*60+(ss[1][6]*10+ss[1][7]);
    		dia.push_back(buf);

    	}
    	int ans =0;
    	bool used[100001]={false};
    	for(int i =0;i< dia.size();i++){
    		if(used[i] == false){
    			ans += 1;
                int now = dia[i].second;
                used[i] = true;
                for(int j =i+1;j < dia.size();j++){
                    if(used[j]== false&&now <= dia[j].first){
                        now = dia[j].second;
                        used[j] = true;
                    }
                }
    		
    		}
    	}
    	cout << ans << endl;
    }
}/*for(int j =0;j < used.size();j++){
                    if(i==used[j])us = false;
                }
                if(us){
                    ans +=1;
                    used.push_back(i);
                    int now=dia[i].second;
                    for(int k = i+1;k< dia.size();k++){
                        bool s = true;
                        int a = used.size();
                        for(int l =0;l < a;l++){
                            if(used[l] == k)s = false;
                        }
                        if(now <= dia[k].first && s){
                            now = dia[k].second;
                            used.push_back(k);
                        }
*/