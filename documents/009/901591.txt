#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

typedef long long LL;
#define TIMES(i_, n_) for(int i_ = 0; i_ < n_; ++i_)

template <class T>
struct BinaryIndexedTree/*{{{*/
{
  vector<T> tree;
  const int size;
  BinaryIndexedTree(int s) : tree(s), size(s) {}
  // i 番目までの要素の累積和
  T read(int i) const
  {
    T sum = 0;
    while (i > 0) {
      sum += tree[i];
      i -= i & -i;
    }
    return sum;
  }

  // i 番目の要素
  T read_single(int i) const
  {
    T sum = tree[i];
    if (i > 0) {
      const int z = i - (i & -i);
      --i;
      while (i != z) {
        sum -= tree[i];
        i -= (i & -i);
      }
    }
    return sum;
  }

  void add(int i, T v)
  {
    while (i <= size) {
      tree[i] += v;
      i += (i & -i);
    }
  }

  int search(T v) {
      int left = 0, right = size;
      while(left+1 < right) {
          const int center = (left+right) / 2;
          if(read(center) < v) {
              left = center;
          } else {
              right = center;
          }
      }
      if(right == size || read(right) != v) return -1;
      return right;
  }
};/*}}}*/

struct Bug {
    LL a, b;
};

bool solve() {
    int N;
    if(!(cin >> N)) return false;
    if(!N) return false;

    vector<Bug> bugs(N);
    TIMES(i, N) {
        cin >> bugs[i].a >> bugs[i].b;
    }
    sort(bugs.begin(), bugs.end(), [](const Bug a, const Bug b) {
            return a.a < b.a;
            });
    int ans = 0;
    int left = 0, right = N+1;
    while(left+1 < right) {
        const int k = (left + right) / 2;
        BinaryIndexedTree<LL> bit(100002);
        BinaryIndexedTree<int> bit_cnt(100002);
        for(const auto &bug : bugs) {
            const int idx = 100001 - int(bug.b);
            bit.add(idx, bug.a);
            bit_cnt.add(idx, 1);
            const auto lim = bit_cnt.search(k);
            //cout << k << ' ' << (100001 - lim) << ' ' << bit.read(lim) << ' ' << bit_cnt.read(lim) << endl;
            if(lim != -1 && bit.read(lim) <= k * (100001 - lim)) {
                ans = k;
                break;
            }
        }
        if(ans == k) {
            left = k;
        } else {
            right = k;
        }
    }
    cout << ans << endl;
    return true;
}

int main() {
    cin.tie(0);
    ios::sync_with_stdio(0);

    while(solve()) ;
    return 0;
}