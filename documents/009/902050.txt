#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <sstream>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <numeric>
#include <cctype>
#include <tuple>

#ifdef _MSC_VER
#include <agents.h>
#endif

#define FOR(i, a, b) for(int i = (a); i < (int)(b); ++i)
#define rep(i, n) FOR(i, 0, n)
#define ALL(v) v.begin(), v.end()
#define REV(v) v.rbegin(), v.rend()
#define MEMSET(v, s) memset(v, s, sizeof(v))
#define X first
#define Y second

using namespace std;

typedef long long ll;
typedef pair<int, int> P;

int valid[256];
int cnt[256];
int kind;

void add(char c){
	if (!valid[c]) return;
	if (cnt[c]++) return;
	++kind;
}

void sub(char c){
	if (!valid[c]) return;
	if (--cnt[c]) return;
	--kind;
}

int main(){
	string in, str, key;
	bool f = true;
	while (getline(cin, in)){
		if (!f) cout << endl;
		f = false;
		str = in;
		while (getline(cin, in), !in.empty()){
			str += in;
		}
		getline(cin, key);

		//cout << str << endl;
		//cout << key << endl;
		MEMSET(cnt, 0);
		MEMSET(valid, 0);
		kind = 0;
		for (auto &c : key) valid[c] = 1;
		int n = str.size(), m = key.size();

		int l = 0, r = 0;
		int ans = n + 1;
		int anscnt = 0;
		P p;
		while (1){
			while (kind < m && r < n){
				add(str[r++]);
			}
			if (kind == m){
				if (r - l < ans){
					ans = r - l;
					p = make_pair(l, r);
					anscnt = 1;
				}
				else if (r - l == ans){
					++anscnt;
				}
			}
			if (l >= r) break;
			sub(str[l++]);
		}

		cout << anscnt << endl;
		int chr = 0;
		for (int i = p.first; i < p.second; ++i){
			cout << str[i];
			++chr;
			if (chr % 72 == 0) cout << endl;
		}
		if (chr % 72) cout << endl;
	}

	return 0;
}