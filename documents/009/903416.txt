#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <functional>
#include <numeric>
#include <cmath>
#include <cstring>
#include <queue>
#include <stack>
#include <set>

using namespace std;

#define ALL(co) co.begin(), co.end()

typedef long long LL;
typedef pair<int, int> P;
typedef pair<int, P> IP;
typedef pair<P, P> PP;
typedef vector<int> Array;
typedef vector<int> LArray;

const int INF = 1 << 29;
const LL LINF = 1LL << 60;

int itiv;
inline int getInt() { return (cin >> itiv, itiv); }
void readAll(Array& vec, int n) { for (int i = 0; i < n; i++) cin >> vec[i]; }
inline bool between(int first, int last, int n) { return first <= n && n <= last; }
inline bool inRange(int begin, int end, int n) { return begin <= n && n < end; }
inline bool inRange(int size, int n) { return 0 <= n && n < size; }

int m, n;
int dx[] = { -1, 0, 1, 0 }, dy[] = { 0, -1, 0, 1 };
int dr[] = { 0, -1, 0, 1 }, dc[] = { -1, 0, 1, 0 };

int main(void)
{
	while(cin >> n && n)
	{
		set<int> anses;
		int k = getInt();
		Array cards(n);
		readAll(cards, n);


		queue<IP> que;
		que.push(IP(0, P(0, k)));
		while (!que.empty())
		{
			IP ip = que.front(); que.pop();
			int bit = ip.first;
			P p = ip.second;
			int num = p.first; int rem = p.second;
			if(rem == 0) anses.insert(num);
			
			for (int i = 0; i < n; i++)
			{
				if(bit & (1 << i)) continue;
				IP nex;
				nex.first = bit | (1 << i);
				nex.second.first = num * (cards[i] >= 10 ? 100 : 10) + cards[i];
				nex.second.second = rem - 1;
				que.push(nex);
			}
		}

		cout << anses.size() << endl;
	}
	return 0;
}