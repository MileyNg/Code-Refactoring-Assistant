#include <algorithm>
#include <bitset>
#include <cctype>
#include <complex>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <utility>
#include <vector>

using namespace std;

inline int toInt(string s) {int v; istringstream sin(s);sin>>v;return v;}
template<class T> inline string toString(T x) {ostringstream sout;sout<<x;return sout.str();}
template<class T> inline T sqr(T x) {return x*x;}

typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<string> vs;
typedef pair<int, int> pii;
typedef long long ll;

#define all(a)  (a).begin(),(a).end()
#define rall(a) (a).rbegin(), (a).rend()
#define pb push_back
#define mp make_pair
#define each(i,c) for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); ++i)
#define exist(s,e) ((s).find(e)!=(s).end())
#define range(i,a,b) for(int i=(a);i<(b);++i)
#define rep(i,n)  range(i,0,n)
#define clr(a,b) memset((a), (b) ,sizeof(a))
#define dump(x)  cerr << #x << " = " << (x) << endl;
#define debug(x) cerr << #x << " = " << (x) << " (L" << __LINE__ << ")" << " " << __FILE__ << endl;

const double eps = 1e-10;
const double pi  = acos(-1.0);
const ll INF =1LL << 62;
const int inf =1 << 29;



int main(void){
	int n,k;
	while(cin >> n >> k,n|k){
		//dump(n) dump(k)
		bool seq[100010];
		bool empty=false;
		rep(i,100010) seq[i]=false;
		rep(i,k){
			int in;
			cin >> in;
			if(in)
				seq[in-1]=true;
			else
				empty=true;
		}
		int cmax=0;
		int l=0,r=0;
		rep(i,n){
			if(seq[i])
				r++;
			else{
				cmax=max(cmax,r-l);
				l=i+1,r=i+1;
			}
			//dump(cmax)
		}
		cmax=max(cmax,r-l);
		l=0,r=0;
		int mid=-1;
		if(empty){
			rep(i,n){
				if(seq[i])
					r++;
				else if(!seq[i]&&mid==-1){
					mid=i;
				}else{
					cmax=max(cmax,r-l);
					l=mid+1,mid=i,r=i+1;
				}
				/*dump(i) dump(l) dump(mid) dump(r)
				cout << endl;*/
			}
		}
		cmax=max(cmax,r-l);
		cout << cmax << endl;
	}
	return 0;
}