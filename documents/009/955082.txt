#include <bits/stdc++.h>

#define rep_(v, f, l) for (int v = (f), v##_ = (l); v < v##_; ++v)
#define rep(v, n) rep_(v, 0, n)
#define lep(v, n) rep_(v, 1, n + 1)
#define rrep_(v, f, l) for (int v = (l), v##_ = (f); v >= v##_; --v)
#define rrep(v, n) rrep_(v, 0, n - 1)
#define rlep(v, n) rrep_(v, 1, n)
#define show_a(a, size) rep(a##_it, size) std::cout << a[a##_it] << " \n"[a##_it == a##_it_ - 1];
#define show_v(v) show_a(v, v.size())
#define eachv(v, i) rep(i, v.size())
#define reachv(v, i) rrep(i, v.size())
#define debug(x) std::cerr << #x << " = " << x << "\n";

using namespace std;

typedef long long int lint;

static inline int in(){ int x; scanf("%d", &x); return x; }
static inline lint inl(){ lint x; scanf("%lld", &x); return x; }

int main()
{
    int n;
    while (n = in()){
        int bucket[256] = {};
        rep(i, n){
            bucket[in()] = 1;
        }
        lep(i, 2 * n){
            if (!bucket[i]) bucket[i] = 2;
        }
        int field = -1; // empty
        int tarou, hanako;
        tarou = hanako = n;
        while (1){
            lep(i, 2 * n){
                if (bucket[i] == 1 && field < i){
                    bucket[i] = 0;
                    field = i;
                    tarou--;
                    break;
                }
                if (i == 2 * n){
                    field = -1;
                }
            }
            if (!tarou) break;
            lep(i, 2 * n){
                if (bucket[i] == 2 && field < i){
                    bucket[i] = 0;
                    field = i;
                    hanako--;
                    break;
                }
                if (i == 2 * n){
                    field = -1;
                }
            }
            if (!hanako) break;
        }
        tarou = hanako = 0;
        lep(i, 2 * n){
            if (bucket[i] == 1) tarou++;
            if (bucket[i] == 2) hanako++;
        }
        printf("%d\n%d\n", hanako, tarou);
    }
    return (0);
}