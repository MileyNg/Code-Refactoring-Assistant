#include <iostream>
#include <string>
#include <complex>

using namespace std;

// typedef complex<int> comp;

class comp : public complex<int> {
public:
    comp() : complex<int>() {}
    comp(complex<int> const& c) {
        real(c.real()), imag(c.imag());
    }
    bool overflow;
};

int const lim = 10000;

comp operate(const comp &a, const comp &b, char o) {
    comp c;
    if (o == '+') {
        c=a+b;
    } else if (o == '-') {
        c=a-b;
    } else /* if (0 == '*') */ {
        c=a*b;
    }

    bool t = c.real() > lim || c.real() < -lim || c.imag() > lim || c.imag() < -lim;
    c.overflow = a.overflow || b.overflow ? true : t;
    return c;
}

comp expr(string const&);
comp term(string const&);
comp fctr(string const&);

comp expr(string &s) {
    comp a = term(s);
    while (s[0] == '+' || s[0] == '-') {
        char o = s[0];
        s.erase(0, 1);
        comp b = term(s);
        a = operate(a, b, o);
    }
    return a;
}

comp term(string &s) {
    comp a = fctr(s);
    while (s[0] == '*') {
        s.erase(0, 1);
        comp b = fctr(s);
        a = operate(a, b, '*');
    }
    return a;
}

comp fctr(string &s) {
    comp z;
    z.overflow = false;
    if (s[0] == '(') {
        s.erase(0, 1);
        z = expr(s);
        s.erase(0, 1);
        return z;
    }

    int sign = 1;
    if (s[0] == '+')
        s.erase(0, 1);
    else if (s[0] == '-') {
        s.erase(0, 1);
        sign = -1;
    }

    if (s[0] == 'i') {
        s.erase(0, 1);
        z.imag(sign);
        return z;
    }

    int i = 0;
    while (s[i] >= '0' && s[i] <= '9') {
        z.real(z.real() * 10 + s[i] - '0');
        i++;
        if (z.real() > lim) z.overflow = true;
    }
    z.real(z.real()*sign);
    s.erase(0, i);
    return z;
}

 void print(const comp &z) {
     if (z.imag() == 0){
         cout << z.real() << endl;
     } else if (z.real() == 0) {
         cout << z.imag() << "i" << endl;
     } else {
         cout << z.real();
         if (z.imag() > 0)
             cout << "+";
         cout << z.imag() << "i" << endl;
     }
 }

int main() {
    string s;
    while (cin >> s) {
        comp z = expr(s);
        if (z.overflow) puts("overflow");
        else print(z);
    }
}