#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <functional>
#include <numeric>
#include <cmath>
#include <cstring>
#include <queue>
#include <stack>
#include <set>

using namespace std;

#define ALL(co) co.begin(), co.end()

typedef long long LL;
typedef pair<int, int> P;
typedef pair<int, P> IP;
typedef pair<P, P> PP;
typedef vector<int> Array;
typedef vector<vector<int> > Array2;
typedef vector<int> LArray;

const int INF = 1 << 29;
const LL LINF = 1LL << 60;

int itiv;
inline int getInt() { return (cin >> itiv, itiv); }
void readAll(Array& vec, int n) { for (int i = 0; i < n; i++) cin >> vec[i]; }
inline bool between(int first, int last, int n) { return first <= n && n <= last; }
inline bool inRange(int begin, int end, int n) { return begin <= n && n < end; }
inline bool inRange(int size, int n) { return 0 <= n && n < size; }

int m, n;
int dx[] = { -1, 0, 1, 0 }, dy[] = { 0, -1, 0, 1 };
int dr[] = { 0, -1, 0, 1 }, dc[] = { -1, 0, 1, 0 };

const int MOD = 10007;

int toNum(char c)
{
	switch(c)
	{
	case 'J':
		return 1;
	case 'O':
		return 2;
	case 'I':
		return 4;
	}
	return 0;
}

int main(void)
{
	while(cin >> n && n)
	{
		int pre[8] = {0}, nex[8] = {0};
		string sch;
		cin >> sch;
		pre[1] = 1;
		for (int i = 0; i < n; i++)
		{
			for (int j = 1; j < 8; j++)
			{
				for (int k = 1; k < 8; k++)
				{
					if((j & k) && (k & toNum(sch[i])))
					{
						nex[k] += pre[j] % MOD;
					}
				}
			}

			for (int j = 0; j < 8; j++)
			{
				pre[j] = nex[j];
				nex[j] = 0;
			}
		}
		cout << accumulate(pre, pre + 8, 0) % MOD << endl;
	}
	return 0;
}