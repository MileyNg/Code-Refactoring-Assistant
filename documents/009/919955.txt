#include <bits/stdc++.h>
#define REP(i,n) for(int i=0; i<(int)(n); ++i)
 
using namespace std;
 
const double EPS = 1e-6;
typedef complex<double> Point;
struct Line : public vector<Point> {
    Line() {}
    Line(const Point& a, const Point& b){
        push_back(a);
        push_back(b);
    }
    Point vector() const {
        return back() - front();
    }
};
int sign(double x) {
    if(x > EPS) return 1;
    if(x < -EPS) return -1;
    return 0;
}
double dot(Point a, Point b){
    return real(conj(a) * b);
}
double cross(Point a, Point b){
    return imag(conj(a) * b);
}
Point projection(const Line& l, const Point& p){
    double t = dot(p - l[0], l.vector()) / norm(l.vector());
    return l[0] + t * l.vector();
}
Point reflection(const Line& l, const Point& p){
    return p + 2.0 * (projection(l, p) - p);
}
bool intersectionLS(const Line& l, const Line& s){
    return sign(cross(l.vector(), s[0] - l[0]) * 
                cross(l.vector(), s[1] - l[0])) <= 0;
}
 
int main(){
    int N;
    while(cin >> N && N){
        Point s;
        double sx, sy;
        cin >> sx >> sy;
        s = Point(sx, sy);
        vector<Point> vp_(N);
        REP(i, N){
            double px, py;
            cin >> px >> py;
            vp_[i] = Point(px - sx, py - sy);
        }
        s = Point(0, 0);
        vector<Line> l(N);
        REP(i, N) l[i] = Line(vp_[i], vp_[(i + 1) % N]);
        vector<int> perm(N);
        REP(i, N) perm[i] = i;
        int ans = 0;
        do{
            vector<Line> lines(N);
            REP(i, N) lines[i] = l[ perm[i] ];
            for(int i = 0; i < N; i++){
                for(int j = 0; j < i; j++){
                    lines[i][0] = reflection(lines[j], lines[i][0]);
                    lines[i][1] = reflection(lines[j], lines[i][1]);
                }
            }
            bool ok = false;
            REP(i, N){
                Point tp = lines[i][0] + lines[i].vector() * EPS;
                Line sl(s, tp);
                int cnt = 0;
                REP(j, N) if(intersectionLS(sl, lines[j])) cnt++;
                if(cnt == N) ok = true;
 
                cnt = 0;
                tp = lines[i][1] - lines[i].vector() * EPS;
                REP(j, N) if(intersectionLS(sl, lines[j])) cnt++;
                if(cnt == N) ok = true;
            }
            if(ok) ans++;
        }while(next_permutation(perm.begin(), perm.end()));
        cout << ans << endl;
    }
    return 0;
}