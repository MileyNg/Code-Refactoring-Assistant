#include <bits/stdc++.h>
using namespace std;

#define dump(n) cout<<"# "<<#n<<'='<<(n)<<endl
#define repi(i,a,b) for(int i=int(a);i<int(b);i++)
#define peri(i,a,b) for(int i=int(b);i-->int(a);)
#define rep(i,n) repi(i,0,n)
#define per(i,n) peri(i,0,n)
#define all(c) begin(c),end(c)
#define mp make_pair
#define mt make_tuple

typedef unsigned int uint;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<double> vd;
typedef vector<vd> vvd;
typedef vector<string> vs;

const int INF=1e9;
const int MOD=1e9+7;
const double EPS=1e-9;

template<typename T1,typename T2>
ostream& operator<<(ostream& os,const pair<T1,T2>& p){
	return os<<'('<<p.first<<','<<p.second<<')';
}
template<typename T>
ostream& operator<<(ostream& os,const vector<T>& a){
	os<<'[';
	rep(i,a.size()) os<<(i?" ":"")<<a[i];
	return os<<']';
}

struct Edge{
	int src,dst;
	Edge(){}
	Edge(int s,int d):src(s),dst(d){}
};
typedef vector<vector<Edge>> Graph;

void DFS(const Graph& g,const vi& ps,int u,vi& vis,int cur,int rem,int& res)
{
	int n=g.size();
	if(cur+rem<=res) return;
	res=max(res,cur);
	if(u==n) return;
	
	if(vis[u]){
		DFS(g,ps,u+1,vis,cur,rem,res);
		return;
	}
	
	// use u
	vi tmp=vis;
	vis[u]=1;
	rep(i,g[u].size()){
		int v=g[u][i].dst;
		if(!vis[v]) vis[v]=2,rem-=ps[v];
	}
	DFS(g,ps,u+1,vis,cur+ps[u],rem-ps[u],res);
	swap(vis,tmp);
	rep(i,g[u].size()){
		int v=g[u][i].dst;
		if(!vis[v]) rem+=ps[v];
	}
	
	if(u==0) return;
	
	// don't use u
	if(g[u].size()>=1){
		vis[u]=2;
		DFS(g,ps,u+1,vis,cur,rem-ps[u],res);
		vis[u]=0;
	}
}

int MaxIndependentSet(const Graph& g,const vi& ps)
{
	vi vis(g.size());
	int res=0;
	DFS(g,ps,0,vis,0,accumulate(all(ps),0),res);
	return res;
}

int main()
{
	for(int n;cin>>n && n;){
		Graph g(n);
		vi ps(n); // 軍事力
		map<string,int> f;
		rep(i,n){
			string s; cin>>s;
			f.insert(mp(s,f.size()));
			int u=f[s];
			cin>>ps[u];
			int m; cin>>m;
			rep(j,m){
				string t; cin>>t;
				f.insert(mp(t,f.size()));
				int v=f[t];
				g[u].emplace_back(u,v);
			}
		}
		
		cout<<MaxIndependentSet(g,ps)<<endl;
	}
}