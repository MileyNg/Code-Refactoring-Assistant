#include <iostream>
#include <algorithm>
#include <queue>

using namespace std;

struct Point{
	int x,y;
};

const Point DIR[4] = {{1,0},{0,1},{-1,0},{0,-1}};

bool inField(int w,int h, int x,int y){
	return 0<= x && x < w && 0<= y && y<h;
}

int main(){
	while(true){
		int w,h;
		cin >> w >> h;
		if(w == 0){
			break;
		}
		char map[20][20];
		bool visited[20][20];
		Point init;//初期位置
		for(int i=0;i<h;i++){
			for(int j=0;j<w;j++){
				cin >> map[i][j];
				visited[i][j] = false;
				if(map[i][j] == '@'){
					init = (Point){j,i};
					map[i][j] = '.';
				}
			}
		}
		//入力終わり。探索開始

		int cnt=1;//初期位置の分を含める
		visited[init.y][init.x] = true;//初期位置の処理
		
		queue<Point> open;
		open.push(init);
		while(open.empty()==false){
			Point now = open.front();//先頭の要素をget
			open.pop();//front()とセットで使う。先頭の要素をremove
			for(int i=0;i<4;i++){
				Point next = {now.x + DIR[i].x, now.y + DIR[i].y};
				if(inField(w,h,next.x,next.y)==true){
					if(visited[next.y][next.x] == false && map[next.y][next.x] == '.'){
						visited[next.y][next.x] = true;
						cnt++;
						open.push(next);
					}
				}
			}
		}
		cout << cnt << endl;
	}

}
//(特にboolの)代入時にcheck == trueなんてしないように注意