#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <functional>
#include <numeric>
#include <cmath>
#include <cstring>
#include <queue>
#include <stack>
#include <set>

using namespace std;

#define ALL(co) co.begin(), co.end()

typedef long long LL;
typedef pair<int, int> P;
typedef pair<P, P> PP;
typedef vector<int> Array;
typedef vector<int> LArray;

const int INF = 1 << 29;
const LL LINF = 1LL << 60;

int itiv;
inline int getInt() { return (cin >> itiv, itiv); }
void readAll(Array& vec, int n) { for (int i = 0; i < n; i++) cin >> vec[i]; }
inline bool between(int first, int last, int n) { return first <= n && n <= last; }
inline bool inRange(int begin, int end, int n) { return begin <= n && n < end; }
inline bool inRange(int size, int n) { return 0 <= n && n < size; }

int m, n;
int dx[] = { -1, 0, 1, 0 }, dy[] = { 0, -1, 0, 1 };
int dr[] = { 0, -1, 0, 1 }, dc[] = { -1, 0, 1, 0 };

const int MOD = 10007;

int toBit(char c)
{
	switch (c)
	{
	case 'J':
		return 1;
	case 'O':
		return 2;
	case 'I':
		return 4;
	default:
		return 0;
	}
}
//day, people
int dp[1001][8];
int main(void)
{
	while(cin >> n && n)
	{
		memset(dp, 0, sizeof(dp));
		dp[0][1] = 1;
		for (int i = 1; i <= n; i++)//日付
		{
			char c; cin >> c;
			int master = toBit(c);
			for (int j = 0; j < 8; j++)//前日出た人
			{
				for (int k = 0; k < 8; k++)//今日出た人
				{
					if(!(master & k) || !(j & k)) continue;
					dp[i][k] = (dp[i][k] + dp[i - 1][j]) % MOD;
				}
			}
		}

		cout << accumulate(dp[n], dp[n] + 8, 0) % MOD << endl;
	}
	return 0;
}