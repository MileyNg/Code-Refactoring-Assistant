00.00 sec    564 KB    130 lines     1950 bytes    2014-06-26 14:34
?
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
#include<stdio.h>
#include<stdlib.h>
 
struct node{
  struct node *right;
  struct node *left;
  struct node *parent;
  int key;
};
typedef struct node *Node;
#define NIL NULL
 
Node root;
/*
  Node treeMinimum(Node x){
  while(x->left != NIL){
  x=x->right;
  }
  return x;
  }
   
  Node treeSearch(Node u, int k){
  if(u==NIL || k==u->key){
  return u;
  }
  if(k<u->key){
  return treeSearch(u->left,k);
  } else {
  return treeSearch(u->right,k);
  }
  }
   
  Node treeSuccessor(Node x){
  Node y;
  if(x->right != NIL){
  return treeMinimum(x->right);
  }
  y=x->parent;
  while(y!=NIL && x==y->right){
  x=y;
  y=y->parent;
  }
  return y;
  }
   
  void treeDelete(Node z){
  Node y; // node to be deleted
  Node x; // child of y
   
   
   
  }
*/
void insert(int k){
   
  Node y = NIL;
  Node x = root;
  Node z;
  z = malloc(sizeof(struct node));
  z->key = k;
  z->left = NIL;
  z->right = NIL;
   
  while(x != NIL){
    y = x;
    if(z->key < x->key){
      x = x->left;
    } else {
      x = x->right;
    }
  }
  z->parent = y;
  if(y == NIL){
    root= z;
  } else if(z->key < y->key){
    y->left = z;
  } else{
    y->right = z;
  }
}
 
void inorder(Node u){
  if(u!=NIL){
    inorder(u->left);
    printf("%2d",u->key);
    inorder(u->right);
  }
}
void preorder(Node u){
  if(u!=NIL){  
    printf("%2d",u->key);
    preorder(u->left);
    preorder(u->right);
  }
}
 
 
int main(){
  int n, i, x;
  char com[20];
  Node z;
  scanf("%d", &n);
   
  for ( i = 0; i < n; i++ ){
    scanf("%s", com);
    if ( com[0] == 'f' ){
      scanf("%d", &x);
      /*      Node t = treeSearch(root, x);
       if ( t != NIL ) printf("yes\n");
       else printf("no\n");*/
    } else if ( com[0] == 'i' ){
    scanf("%d", &x);    
    insert(x);
      } else if ( com[0] == 'p' ){
    inorder(root);
    printf("\n");
    preorder(root);
    printf("\n");
      } else if ( com[0] == 'd' ){
    scanf("%d", &x);
    //treeDelete(treeSearch(root, x));
      }
  }
   
  return 0
}