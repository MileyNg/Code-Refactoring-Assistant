#include <cstdio>
#include <vector>
#include <string>
#include <set>
#include <iostream>
using namespace std;


int destruct_inner(int a, int b, string &s, vector<pair<int, int> > &tree)
{
	//printf("debug: destruct %d - %d\n", a, b);

	if(s[a] == 'x') {
		tree.push_back(make_pair(-1, -1));
		return tree.size() - 1;
	}

	int it;

	if(s[a + 1] == 'x') {

		it = a + 2;

	} else {

		int count = 1;
		it = a + 2;
		while(count > 0) {
			if(s[it] == '(') count += 1;
			if(s[it] == ')') count -= 1;
			it += 1;
		}
	}

	int l = destruct_inner(a + 1, it, s, tree);
	int r = destruct_inner(it + 1, b - 1, s, tree);

	//printf("debug: l, r = %d %d\n", l, r);

	tree.push_back(make_pair(l, r));
	return tree.size() - 1;
}


vector<pair<int, int> > destruct(string &s)
{
	vector<pair<int, int> > ret;

	destruct_inner(0, s.size(), s, ret);

	return ret;
}


int compare_level(int l, int r, vector<double> &level, vector<pair<int, int> > &tree)
{
	if(l > r)
		swap(l, r);
	if(level[l] != level[r])
		return level[l] > level[r] ? 1 : -1;
	if(tree[l].first == -1)
		return 0;

	int l1 = tree[l].first;
	int l2 = tree[l].second;
	int r1 = tree[r].first;
	int r2 = tree[r].second;

	int c1 = compare_level(l1, r1, level, tree);
	int c2 = compare_level(l2, r2, level, tree);

	if(c1 != 0)
		return c1;
	return c2;
} 


const string x_str = "x";
string construct_inner(int v, bool left, vector<pair<int, int> > &tree,
		set<string> &subs, vector<double> &level)
{
	//printf("debug: construct %d\n", v);
	int l = tree[v].first, r = tree[v].second;

	if(l == -1) {
		subs.insert(x_str);
		return x_str;
	}

	string lstr, rstr;
	set<string> lsubs, rsubs;
	lstr = construct_inner(l, true, tree, lsubs, level);
	rstr = construct_inner(r, false, tree, rsubs, level);

	int cr = compare_level(l, r, level, tree);

	if(cr < 0) {
		swap(lstr, rstr);
		swap(tree[v].first, tree[v].second);
	}

	double total = 0, cross = 0;

	if(lsubs.size() < rsubs.size())
		swap(lsubs, rsubs);
	subs = lsubs;
	total = subs.size();
	for(set<string>::iterator it = rsubs.begin(); it != rsubs.end(); ++it) {
		if(subs.count(*it) > 0) {
			cross += 1;
		} else {
			total += 1;
			subs.insert(*it);
		}
	}
	subs.insert("(" + lstr + " " + rstr + ")");

	level[v] = cross / total;

	if(left)
		return "(" + rstr + " " + lstr + ")";
	else
		return "(" + lstr + " " + rstr + ")";
}


string construct(vector<pair<int, int> > &tree)
{
	set<string> subs;
	vector<double> level(tree.size());
	return construct_inner(tree.size() - 1, true, tree, subs, level);
}


int main()
{
	while(true) {

		char buf[4096];
		string input;
		
		cin.getline(buf, sizeof(buf));
		if(buf[0] == '0')
			break;
		input = buf;

		vector<pair<int, int> > tree = destruct(input);
		string output = construct(tree);

		printf("%s\n", output.c_str());
	}

	return 0;
}