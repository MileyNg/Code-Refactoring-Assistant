#include <iostream>
#include <map>
#include <algorithm>
#include <string>
using namespace std;

class Node{
    public:
        int id;
        int parent;
        int depth;
        int degree;
        int sibling;
        int high;
        string type;
        Node* right;
        Node*  left;
        Node():id(-1),parent(-1),depth(-1),degree(0),sibling(-1),high(0),type(""){}
};

vector<Node> root;

int dfs(int id,int d){
    
    int h;
     
    /*深さ*/
    if(root[id].depth<d)
        root[id].depth=d;

    /*兄弟を親が子として*/
    if(root[id].right->id!=-1){
        root[id].right->sibling=root[id]. left->id;
    }
    if(root[id]. left->id!=-1){
        root[id]. left->sibling=root[id].right->id;
    }

    /*子供がいた場合潜る*/
    if(root[id].right->id!=-1){
        h=dfs(root[id].right->id,d+1);
    }                 
    /*比較して深かったら更新*/
    if(root[id].high<h)
        root[id].high=h;
    /*もう一人のほう*/
    if(root[id]. left->id!=-1){
        h=dfs(root[id].left->id,d+1);
    }
    if(root[id].high<h)
        root[id].high=h;
    //return h+1;
    //自分の高さ+1を返す。
    return root[id].high+1;
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(0); 

    int n, l, r;
    cin>>n;
    for(int i=0;i<n;i++){
        Node node;
        cin>>node.id>>l>>r;
        node.left=new Node();
        node.right=new Node();
        node.left->id=l;
        node.right->id=r;
        root.push_back(node);
    }

    sort(begin(root),end(root),
            [](const Node &r, const Node &l){
            return r.id < l.id;
    });

   for(int i=0; i<n; i++){
        root[root[i].right->id].parent=root[i].id;
        root[root[i].left->id].parent=root[i].id;
        /*親をセット*/
   }
   for(int i=0;i<n;i++){
       /*高さと子供を設定*/
       if(root[i].parent==-1)
            root[i].high=dfs(i,0);
       if(root[i]. left->id!=-1){
            root[i].degree++;
       }
       if(root[i].right->id!=-1){
            root[i].degree++;
       }
   }
   for(int i=0;i<n;i++){
         root[root[i].right->id].sibling=root[root[i]. left->id].id;
         root[root[i]. left->id].sibling=root[root[i].right->id].id;
   }

   for(int i=0;i<n;i++){  
        
        if(root[i].parent==-1){
            root[i].type="root";  
            root[i].high--; 
        }else{
            if(root[i].left->id!=-1||root[i].right->id!=-1){
                root[i].type="internal node";
            }else{
                root[i].type="leaf";
                root[i].high=0;
            }
        }
    }

    for(int i=0; i<n; i++){
        cout<<"node "<<root[i].id<<": parent = "<<root[i].parent<<", sibling = "<<root[i].sibling;
        cout<<", degree = "<<root[i].degree<<", depth = "<<root[i].depth<<", height = "<<root[i].high<<", "<<root[i].type<<endl;
    }

    /* shard_ptrでも良い*/
    for(int i=0;i<root.size();i++){
        delete root[i].right;
        delete root[i].left;
    }
    return 0; 
}