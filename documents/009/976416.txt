#include<bits/stdc++.h>
using namespace std;
typedef pair<int,int> pii;

const int dy[] = {-1,0,1,0}, dx[] = {0,1,0,-1};
const double EPS = 1e-8;
int h,w;
string g[100];

void dfs(int y, int x, vector<pii> &b){
  for(int i=0;i<(int)b.size();i++){
    if(b[i] == pii(y,x))return;
  }
  b.push_back(pii(y,x));

  for(int i=0;i<4;i++){
    int ny = y+dy[i], nx = x+dx[i];
    if(ny<0 || nx<0 || ny>=h || nx>=w)continue;
    if(g[ny][nx] == g[y][x])dfs(ny,nx,b);
  }
}

bool rec(int y, int x, double &mid, int &num){
  vector<pii> b;
  dfs(y,x,b);

  num = 1;
  int l = 1000, r = -1000;
  mid = 0;
  set<int> cols;

  for(int i=0;i<(int)b.size();i++){
    int by = b[i].first+1, bx = b[i].second;
    if(by==h || (g[by][bx] != g[y][x] && g[by][bx] != '.')){
      l = min(l, bx); r = max(r, bx+1);
    }
    mid += ((double)bx+0.5)/b.size();

    by = b[i].first-1;

    if(by>=0 && (g[by][bx] != g[y][x] && g[by][bx] != '.')){
      if(cols.find(g[by][bx])!=cols.end())continue;
      cols.insert(g[by][bx]);
      int tmpnum = 0;
      double tmpmid = 0;
      if(!rec(by,bx,tmpmid,tmpnum))return false;

      num += tmpnum;
      mid += tmpmid * tmpnum;
    }
  }

  mid /= num;
  return (l+EPS < mid && mid < r-EPS);
}


int main(){
  while(cin >> w >> h, h){
    for(int i=0;i<h;i++)cin >> g[i];

    for(int i=0;i<w;i++){
      int num = 0;
      double mid = 0;
      if(g[h-1][i]!='.'){
	cout << (rec(h-1,i,mid,num)?"STABLE":"UNSTABLE") << endl;
	break;
      }
    }
  }
}