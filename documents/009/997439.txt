#include <iostream>
#include <vector>
#include <queue>

using namespace std;

#define rep(i, n) for(int i=0; i<(n); ++i)
#define mp(a, b) make_pair(a, b)
const int inf = 1 << 28;

template<typename T> void chmin(T &t, T f){if(t > f)t = f;}

int n, m, c, s, g;

vector<vector<vector<int> > > dist, cost;
vector<int> mem;
vector<vector<pair<int, int> > > table;

void init(){
    dist.assign(c, vector<vector<int> >(n, vector<int>(n, inf)));
    cost.assign(c, vector<vector<int> >(n, vector<int>(n, inf)));
    mem.assign(n, inf);
    table.assign(c, vector<pair<int, int> >());
    rep(i, c)rep(j, n)dist[i][j][j] = cost[i][j][j] = 0;
}

void doWF(){
    rep(r, c)rep(k, n)rep(i, n)rep(j, n){
        chmin(dist[r][i][j], dist[r][i][k] + dist[r][k][j]);
    }
}

int calc(int r, int a, int b){
    if(cost[r][a][b] != inf)return cost[r][a][b];
    int res = 0, p = 0;
    for(auto& v: table[r]){
        if(dist[r][a][b] <= v.first){
            res += (dist[r][a][b] - p) * v.second;
            break;
        }
        else{
            res += (v.first - p) * v.second;
            p = v.first;
        }
    }
    return cost[r][a][b] = res;
}

int solve(){
    mem[s] = 0;
    priority_queue<pair<int, int> > q;
    for(q.emplace(0, s); !q.empty();){
        pair<int, int> p = q.top(); q.pop();
        if(p.second == g)return -p.first;
        rep(r, c)rep(u, n){
            if(dist[r][p.second][u] == inf)continue;
            int nc = calc(r, p.second, u) - p.first;
            if(mem[u] <= nc)continue;
            mem[u] = nc;
            q.emplace(-nc, u);
        }
    }
    return -1;
}

int main(){
    while(cin >> n >> m >> c >> s >> g, n|m|c|s|g){
        s--; g--;
        init();
        while(m--){
            int x, y, d, k;
            cin >> x >> y >> d >> k;
            x--; y--; k--;
            chmin(dist[k][x][y], d);
            dist[k][y][x] = dist[k][x][y];
        }
        doWF();
        rep(i, c){
            int p;
            cin >> p;
            table[i].assign(p, mp(inf, inf));
        }
        rep(i, c){
            rep(j, (int)table[i].size()-1)cin >> table[i][j].first;
            for(auto& v: table[i])cin >> v.second;
        }
        cout << solve() << '\n';
    }
    return 0;
}