#include <iostream>
#include <complex>
using namespace std;

typedef complex<double> C;


C v[4];
double r;

double dot(C &a, C &b) {
  return a.real()*b.real() + a.imag()*b.imag();
}

double ncross(C &a, C &b) {
  return a.real()*b.imag() - a.imag()*b.real();
}

bool tri_in_check() {
  bool c[3];
  C a;
  double r2 = r*r;
  for (int i=0; i<3; i++) {
    a = v[i] - v[3];
    if (norm(a) < r2) {
      c[i] = true;
    } else {
      c[i] = false;
    }
  }
  return (c[0] && c[1] && c[2]);
}

bool center_in_check() {
  C a, b;
  bool f[3];
  for (int i=0; i<3; i++) {
    a = v[(i+1)%3] - v[i];
    b = v[3] - v[(i+1)%3];
    f[i] = (ncross(a,b) > 0);
  }
  return (f[0]==f[1] && f[0]==f[2]);
}

bool intersect() {
  C a, b;
  double na, nb, dab, d, sd, s, t;
  for (int i=0; i<3; i++) {
    a = v[(i+1)%3] - v[i];
    b = v[3] - v[i];
    na = norm(a);
    nb = norm(b);
    dab = dot(a,b);
    d = dab*dab - na*(nb-r*r);
    if (d < 0.) continue;
    sd = sqrt(d);
    s = (dab+sd)/na;
    t = (dab-sd)/na;
    if ((s>= 0.&&s<=1.) || (t>=0.&&t<=1.)) {
      return true;
    }
  }
  return false;
}

int main() {
  while (1) {
    cin >> v[0].real() >> v[0].imag();
    if (!v[0].real() && !v[0].imag()) break;
    for (int i=1; i<4; i++) {
      cin >> v[i].real() >> v[i].imag();
    }
    cin >> r;
    if (tri_in_check()) {
      cout << "b" << endl;
    } else {
      if (intersect()) {
        cout << "c" << endl;
      } else if (center_in_check()) {
        cout << "a" << endl;
      } else {
        cout << "d" << endl;
      }
    }
  }
  return 0;
}