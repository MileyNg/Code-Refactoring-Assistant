#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <sstream>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <numeric>
#include <cctype>
#include <tuple>
#include <array>

// BEGIN CUT HERE
#ifdef _MSC_VER
#include <agents.h>
#endif
// END CUT HERE 

#define FOR(i, a, b) for(int i = (a); i < (int)(b); ++i)
#define rep(i, n) FOR(i, 0, n)
#define ALL(v) begin(v), end(v)
#define REV(v) rbegin(v), rend(v)
#define MEMSET(v, s) memset(v, s, sizeof(v))
#define MP make_pair
#define MT make_tuple
#define X first
#define Y second

using namespace std;

typedef pair<int, int> P;
typedef long long ll;

double EPS = 1e-9;

int main(){
	int n, k, T, u, v, l;
	cin >> n >> k >> T >> u >> v >> l;
	vector<int> d(n);
	rep(i, n) cin >> d[i];
	d.push_back(l);

	double pos = 0, time = 0, car = 0;
	int cnt = 0;

	auto mov = [](double from, double to, double vel){
		return (to - from) / vel;
	};

	while (pos + EPS < l){
		int nxt = upper_bound(ALL(d), pos) - d.begin();

		if (car > EPS){
			double t = mov(pos, d[nxt], v);
			if (car < t){
				time += car;
				pos += car*v;
				car = 0;
			}
			else{
				time += t;
				pos = d[nxt];
				car -= t;
				++cnt;
				if (cnt > k) car = 0;
			}
		}
		else{
			double t = mov(pos, d[nxt], u);
			if (cnt == 0){
				time += t;
				pos = d[nxt];
				++cnt;
			}
			else{
				cnt--;
				car = T;
			}
		}
	}

	cout.setf(ios::fixed);
	cout.precision(10);
	cout << time << endl;

	return 0;
}