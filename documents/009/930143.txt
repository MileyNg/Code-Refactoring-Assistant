#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;
const static int TEAM_MAX = 100;

struct winp_data {
  int team_id;
  int point;
};
bool operator < ( const winp_data &wp1, const winp_data &wp2 ) {
  if( wp1.point == wp2.point ) {
    return wp1.team_id < wp2.team_id;
  } 
  return wp1.point < wp2.point;
}

int main() {
  int n;
  winp_data win_p [ TEAM_MAX ];
  int rank_data[ TEAM_MAX ];
  cin >> n;
  for( int i = 0; i < n; i++ ) {
    win_p[ i ].team_id = i + 1;
    win_p[ i ].point = 0;
  }
  int combinum = n * ( n - 1 ) / 2;
  for( int i = 0; i < combinum; i++ ) {
    int a, b, ap, bp;
    cin >> a >> b >> ap >> bp;
    if( ap > bp ) {
      win_p[ a - 1 ].point += 3;
    } else if( ap == bp ) {
      win_p[ a - 1 ].point += 1;
      win_p[ b - 1 ].point += 1;
    } else {
      win_p[ b - 1 ].point += 3;
    }
  }

  sort( win_p, win_p + n );
  int rank = 1;
  int frank = 1;
  int prev_p = -1;
  for( int i = n - 1; i >= 0; i-- ) {
    if( prev_p != win_p[ i ].point ) {
      rank = frank;
    }
    frank++;
    rank_data[ win_p[ i ].team_id - 1 ] = rank;
    prev_p = win_p[ i ].point;
  }

  for( int i = 0; i < n; i++ ) {
    cout << rank_data[ i ] << endl;
  }
  return EXIT_SUCCESS;
}