#include<iostream>
#include<vector>
#include<cmath>
#include<cstdio>

using namespace std;

struct P{
  double x, y;
  P(){ x=0, y=0; }
  P(double x_, double y_){ x=x_, y=y_; }
  P operator + (const P& p){ return P(x+p.x, y+p.y); }
  P operator - (const P& p){ return P(x-p.x, y-p.y); }
  P operator * (double d){ return P(x*d, y*d); }
};

double r;
P p_;

double get_dis(const P& a, const P& b){
  return sqrt(pow(a.x-b.x,2) + pow(a.y-b.y,2));
}
double get_dot(const P& a, const P& b){
  return a.x*b.x + a.y*b.y;
}
double get_cross(const P& a, const P& b){
  return a.x*b.y - a.y*b.x;
}
double get_angle(const P& a, const P& b){
  return atan2(get_cross(a,b), get_dot(a,b));
}

P get_point(double t_){
  double t = M_PI/2 - t_*M_PI/50;
  return P(r*cos(t), r*sin(t));
}
int solve(P& p1, P& p2){
  double t = get_angle(p1, p2);
  if(t < 0) t += 2*M_PI;
  double s1 = r*r*t/2;
  double s2 = s1;
  s2 -= r*r*sin(t)/2;
  s2 += get_dis(p1,p_)*get_dis(p2,p_)*sin(get_angle(p1-p_,p2-p_))/2;
  return 100*(int)s2/(int)s1;
}

int main(){
  int n;
  vector<P> p;
  cin >> r >> p_.x >> p_.y >> n;
  for(int i=0, a=0, b=0; i<n; ++i){
    p.push_back(get_point((double)a));
    cin >> b;
    a += b;
  }
  for(int i=1; i<n; ++i){
    printf("%d ", solve(p[i], p[i-1]));
  }
  printf("%d\n", solve(p[0], p[p.size()-1]));
  return 0;
}