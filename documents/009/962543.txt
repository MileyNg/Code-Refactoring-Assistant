#include <bits/stdc++.h>
using namespace std;

#define dump(n) cout<<"# "<<#n<<'='<<(n)<<endl
#define repi(i,a,b) for(int i=int(a);i<int(b);i++)
#define peri(i,a,b) for(int i=int(b);i-->int(a);)
#define rep(i,n) repi(i,0,n)
#define per(i,n) peri(i,0,n)
#define all(c) begin(c),end(c)
#define mp make_pair
#define mt make_tuple

typedef unsigned int uint;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<double> vd;
typedef vector<vd> vvd;
typedef vector<string> vs;

const int INF=1e9;
const int MOD=1e9+7;
const double EPS=1e-9;

template<typename T1,typename T2>
ostream& operator<<(ostream& os,const pair<T1,T2>& p){
	return os<<'('<<p.first<<','<<p.second<<')';
}
template<typename T>
ostream& operator<<(ostream& os,const vector<T>& a){
	os<<'[';
	rep(i,a.size()) os<<(i?" ":"")<<a[i];
	return os<<']';
}

struct UnionFind{
	vi data;
	UnionFind(int size):data(size,-1){}
	int Find(int n){
		return data[n]<0?n:(data[n]=Find(data[n]));
	}
	void Unite(int a,int b){
		int ra=Find(a),rb=Find(b);
		if(ra!=rb){
			if(-data[ra]<-data[rb])
				swap(ra,rb);
			data[ra]+=data[rb];
			data[rb]=ra;
		}
	}
	int Size(int n){
		return -data[Find(n)];
	}
};

int main()
{
	for(int n,w,h;cin>>n>>w>>h && n|w|h;){
		vi xs(n),ys(n);
		rep(i,n) cin>>xs[i]>>ys[i];
		
		vi is(n); iota(all(is),0);
		UnionFind uf(n);
		sort(all(is),[&](int i,int j){return xs[i]<xs[j];});
		rep(i,n-1) if(xs[is[i]]==xs[is[i+1]]) uf.Unite(is[i],is[i+1]);
		sort(all(is),[&](int i,int j){return ys[i]<ys[j];});
		rep(i,n-1) if(ys[is[i]]==ys[is[i+1]]) uf.Unite(is[i],is[i+1]);
		
		int cnt=count_if(all(uf.data),[](int x){return x<0;});
		int res=n-cnt;
		if(cnt>1){
			res+=2*cnt-1;
			rep(i,n) if(xs[i]==1 || xs[i]==w || ys[i]==1 || ys[i]==h){
				res--;
				break;
			}
		}
		cout<<res<<endl;
	}
}