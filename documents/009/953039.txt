#include <iostream>
#include <string>
#include <vector>
#include <map>

using namespace std;

#define rep(i, n) for(int i=0; i<(n); ++i)

int p, q;
vector<string> P, Q;

void countBracket(vector<int> &rcs, string &s){
    for(char c: s){
        switch(c){
            case '(': rcs[0]++; break;
            case ')': rcs[0]--; break;
            case '{': rcs[1]++; break;
            case '}': rcs[1]--; break;
            case '[': rcs[2]++; break;
            case ']': rcs[2]--; break;
            default: break;
        }
    }
}

vector<int> solve(){
    map<vector<int>, int> indent;
    vector<int> rcs(3, 0), res(q, -2);
    rep(i, p-1){
        countBracket(rcs, P[i]);
        indent[rcs] = P[i+1].find_first_not_of('.');
    }
    for(int r=1; r<=20; ++r){
        for(int c=1; c<=20; ++c){
            for(int s=1; s<=20; ++s){
                bool ok = true;
                for(auto x: indent){
                    rcs = x.first;
                    if(r * rcs[0] + c * rcs[1] + s * rcs[2] != x.second){
                        ok = false;
                        break;
                    }
                }
                if(!ok)continue;
                rcs = {0, 0, 0};
                rep(i, q){
                    int t = r * rcs[0] + c * rcs[1] + s * rcs[2];
                    if(res[i] == -2)res[i] = t;
                    else if(res[i] != t)res[i] = -1;
                    countBracket(rcs, Q[i]);
                }
            }
        }
    }
    return res;
}

int main(){
    while(cin >> p >> q, p|q){
        P.resize(p); Q.resize(q);
        rep(i, p)cin >> P[i];
        rep(i, q)cin >> Q[i];
        vector<int> ans(solve());
        rep(i, q)cout << ans[i] << (i != q-1? ' ': '\n');
    }
    return 0;
}