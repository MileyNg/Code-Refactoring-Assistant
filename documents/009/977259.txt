#include <iostream>
#include <algorithm>
#include <cmath>
#include <bitset>
using namespace std;

typedef double D;
const double EPS = 1e-8;

struct P {
  D x, y;
  P() { }
  P(D x_, D y_) : x(x_), y(y_) { }
};

struct C {
  P p;
  D r;
  C() { }
  C(P p_, D r_) : p(p_), r(r_) { }
  C(D x_, D y_, D r_) : p(x_, y_), r(r_) { }
};

int sig(double a, double b) {
  if(a < b - EPS) return -1;
  if(a > b + EPS) return +1;
  return 0;
}

bool iCC(C a, C b) {
  D dx = a.p.x - b.p.x;
  D dy = a.p.y - b.p.y;
  D d2 = dx*dx + dy*dy;
  return sig(d2, (a.r + b.r)*(a.r + b.r)) < 0;
}

int N;
C circle[24];
int color[24];
bool overlap[24][24];

int solve(int S) {
  int top = 0;
  for(int i = 0; i < N; ++i) {
    if(((S >> i) & 1) == 0) continue;
    bool ok = true;
    for(int j = 0; j < i; ++j) {
      if(((S >> j) & 1) == 0) continue;
      if(overlap[i][j]) {
        ok = false;
        break;
      }
    }
    if(ok) {
      top |= (1 << i);
    }
  }
  int res = 0;
  for(int i = 0; i < N; ++i) {
    for(int j = i + 1; j < N; ++j) {
      if(((top >> i) & 1) && ((top >> j) & 1) && color[i] == color[j]) {
        int B = S;
        B &= ~(1 << i);
        B &= ~(1 << j);
        res = max(res, 2 + solve(B));
      }
    }
  }
  return res;
}

int main() {
  while(true) {
    cin >> N;
    if(N == 0) break;
    for(int i = 0; i < 24; ++i)
      for(int j = 0; j < 24; ++j)
        overlap[i][j] = false;
    for(int i = 0; i < N; ++i) {
      cin >> circle[i].p.x >> circle[i].p.y >> circle[i].r >> color[i];
      color[i]--;
    }
    for(int i = 0; i < N; ++i) {
      for(int j = 0; j < i; ++j) {
        if(iCC(circle[i], circle[j])) {
          overlap[i][j] = true;
        }
      }
    }
    cout << solve((1 << N) - 1 ) << endl;
  }
}