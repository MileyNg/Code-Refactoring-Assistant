
#include <algorithm>
#include <numeric>
#include <map>
#include <vector>
#include <iostream>
#include <queue>

using namespace std;

#define REP(i,n) for(int i=0;i<n;i++)


int dx[4]={1,0,-1,0};
int dy[4]={0,1,0,-1};

int INF=1<<28;
int main() {
	while (true) {
		int W,H;cin >> W >> H;if(W==0 && H==0)break;

		vector<vector<vector<bool>>> wall(H,vector<vector<bool>>(W,vector<bool>(4)));

		REP(inpy,2*H-1){
			int y=inpy/2;
			if(inpy%2==0){
				REP(x,W-1){
					int b;cin >> b;
					wall[y][x][0]=b;
					if(x-1>=0)wall[y][x-1][2]=b;
				}
			}else{
				REP(x,W){
					int b;cin >>b;
					wall[y][x][1]=b;
					if(x+1<W)wall[y][x+1][3]=b;
				}
			}
		}

		priority_queue<pair<int,pair<int,int>>,vector<pair<int,pair<int,int>>>,greater<pair<int,pair<int,int>>>> que;
		que.push(make_pair(0,make_pair(0,0)));
		vector<vector<int>> ds(H,vector<int>(W,INF));ds[0][0]=0;

		vector<vector<bool>> passed(H,vector<bool>(W));
		while(!que.empty()){
			pair<int,pair<int,int>> p=que.top();que.pop();
			int y=p.second.first,x=p.second.second;
			if(passed[y][x])continue;
			passed[y][x]=true;
			REP(d,4)if(!wall[y][x][d]){	
				
				int ny=y+dy[d],nx=x+dx[d];			
				if(0<=nx && nx < W && 0 <= ny && ny < H){
					if(ds[ny][nx]>ds[y][x]+1){
						que.push(make_pair(p.first+1,make_pair(ny,nx)));
						ds[ny][nx]=ds[y][x]+1;
					}
				}
			}
		}
		if(ds[H-1][W-1]!=INF)cout << ds[H-1][W-1]+1<<endl;
		else cout << 0 <<endl;
	}
}