#include <iostream>
#include <algorithm>
#include <cstring>

using namespace std;

const int N = 6*4;
int dp[1 << N];
int cover[N];
int x[N], y[N], r[N], c[N];
int n;

int rec(int bits){
	if (bits == 0) return 0;

	int &res = dp[bits];
	if (res >= 0) return res;
	res = 0;
	for (int i = 0; i < n; ++i){
		if (~bits&(1 << i)) continue;
		if (bits&cover[i]) continue;
		for (int j = i+1; j < n; ++j){
			if (~bits&(1 << j)) continue;
			if (bits&cover[j]) continue;
			if (c[i] != c[j]) continue;
			res = max(res, 2 + rec(bits&~(1 << i)&~(1 << j)));
		}
	}
	return res;
}

int main(){
	auto sq = [](int x){return x*x; };
	while (cin >> n, n){
		memset(dp, -1, sizeof(dp));
		for (int i = 0; i < n; ++i){
			cin >> x[i] >> y[i] >> r[i] >> c[i];
			cover[i] = 0;
		}
		for (int i = 0; i < n; ++i){
			for (int j = 0; j < i; ++j){
				if (sq(x[i] - x[j]) + sq(y[i] - y[j]) >= sq(r[i] + r[j])) continue;
				cover[i] |= 1<<j;
			}
		}

		cout << rec((1 << n) - 1) << '\n';
	}


	return 0;
}