
#include <iostream>
#include <vector>
#include <cmath>
#include <cassert>
#include <complex>
#include <algorithm>
#define rep(i,n) for(int i = 0;i < n;i++)
using namespace std;

typedef complex<double> P;
const double EPS = 1e-8;
const double INF = 1e6;


double cross(const P a, const P b){
    return imag(conj(a)*b);
}

P crosspoint(const P x1,const P x2,const P y1,const P y2) {
    double A = cross(y2 - y1, x2 - x1);
    double B = cross(y2 - y1, y2 - x1);
    if (abs(A) < EPS && abs(B) < EPS) return x1; // same line
    if (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!
    return x1 + B / A * (x2 - x1);
}
P v[110];

bool isint(double x){
    if(abs(x -(double)(((int)(x+EPS+2000))-2000)) < EPS){
        return 1;
    }
    return 0;
}


int main(int argc, const char * argv[])
{
    int n;
    while(cin >> n && n != 0){
        int area = 0;
        int ymax = -2005;
        int ymin = 2005;
        rep(i,n){
            int fac,fad;
            cin >> fac >> fad;
            v[i]=P((double)fac,(double)fad);
            if(v[i].imag() > ymax)
                ymax = v[i].imag();
            if(v[i].imag() < ymin)
                ymin = v[i].imag();
        }
        v[n] = v[0];
        for(int y = ymin;y < ymax;y++){

            pair<int,int> edge[230];
            int k = 0;
            rep(i,n){
                if((v[i].imag() <= y && v[i+1].imag() <= y) || (v[i].imag() >= y+1 && v[i+1].imag() >= y+1)){
                    continue;}
                
                double co1 = crosspoint(P(-INF,y),P(INF,y),v[i],v[i+1]).real();
                double co2 = crosspoint(P(-INF,y+1),P(INF,y+1),v[i],v[i+1]).real();

                int xla,xra,xlb,xrb;
                if(isint(co1)){
                    xla = (int)(co1+EPS+2000)-2000;
                    xra = (int)(co1+EPS+2000)-2000;
                }else{
                    xla = (int)(co1+2000)-2000;
                    xra = ceil(co1+2000)-2000;
                }
                if(isint(co2)){
                    xlb = (int)(co2+EPS+2000)-2000;
                    xrb = (int)(co2+EPS+2000)-2000;
                }else{
                    xlb = (int)(co2+2000)-2000;
                    xrb = ceil(co2+2000)-2000;
                }
                edge[k].first = min(xla,xlb);
                edge[k].second = max(xra,xrb);
                k++;
            }
            sort(edge,edge+k);
            int prev = -INF;
            for (int i = 0;i < k;i += 2){
                area += edge[i+1].second - max(edge[i].first,prev);
                prev =  edge[i+1].second;
            }
        }
        cout << area << endl;
    }

}