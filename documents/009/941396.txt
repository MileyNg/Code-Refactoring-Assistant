#include<iostream>
#include<vector>

using namespace std;

#define rep(i, n) for (int i = 0; i < int(n); ++i)

class UnionFind {
private:
  int n;
  vector<int> a;
public:
  UnionFind(int n) : n(n), a(n, -1) {}
  int find(int x) {return a[x] < 0 ? x : (a[x] = find(a[x]));}
  bool equal(int x, int y) {return find(x) == find(y);}
  void unite(int x, int y) {
    x = find(x), y = find(y);
    if (x == y) return;
    if (a[x] > a[y]) swap(x, y);
    a[x] += a[y];
    a[y] = x;
    --n;
  }
  int size() {return n;}
};

int main() {
  int n;
  while (cin >> n) {
    int cnt[7] = {};
    UnionFind uf(7);
    rep (i, n) {
      string domino;
      cin >> domino;
      ++cnt[domino[0] - '0'];
      ++cnt[domino[1] - '0'];
      uf.unite(domino[0] - '0', domino[1] - '0');
    }
    int c = 0;
    rep (i, 7) if (cnt[i] % 2) ++c;
    if (c > 2) {
      cout << "No" << endl;
      continue;
    }
    c = 0;
    rep (i, 7) if (!cnt[i]) ++c;
    if (uf.size() == c + 1) {
      cout << "Yes" << endl;
    } else {
      cout << "No" << endl;
    }
  }
}