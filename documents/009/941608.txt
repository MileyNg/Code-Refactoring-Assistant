#include<iostream>
#include<queue>

using namespace std;

#define rep(i, n) for (int i = 0; i < int(n); ++i)

struct Edge{int to, dis, cost;};

int main() {
  while (true) {
    int n, m;
    cin >> n >> m;
    if (n == 0 && m == 0) break;
    vector<Edge> edge[n];
    rep (i, m) {
      int u, v, d, c;
      cin >> u >> v >> d >> c;
      --u, --v;
      edge[u].push_back((Edge){v, d, c});
      edge[v].push_back((Edge){u, d, c});
    }
    priority_queue<pair<int ,int>, vector<pair<int, int> >, greater<pair<int, int> > > que;
    que.push(make_pair(0, 0));
    int dis[n];
    rep (i, n) dis[i] = 1e9;
    while (!que.empty()) {
      pair<int, int> now = que.top();
      que.pop();
      if (dis[now.second] < now.first) continue;
      dis[now.second] = now.first;
      rep (i, edge[now.second].size()) que.push(make_pair(now.first + edge[now.second][i].dis, edge[now.second][i].to));
    }
    int res = 0;
    rep (i, n) if (i > 0) {
      int r = 1e9;
      rep (j, edge[i].size()) if (dis[i] == dis[edge[i][j].to] + edge[i][j].dis) r = min(r, edge[i][j].cost);
      res += r;
    }
    cout << res << endl;
  }
}