#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;

vector<vector<int> > mul_mat(const vector<vector<int> > &a, const vector<vector<int> > &b, int m)
{
	int n = a.size();
	vector<vector<int> > ret;

	ret.resize(n);
	for(int i = 0; i < n; ++i)
		ret[i].resize(n);

	for(int i = 0; i < n; ++i) {
		for(int j = 0; j < n; ++j) {
			ret[i][j] = 0;
			for(int k = 0; k < n; ++k)
				ret[i][j] = (ret[i][j] + a[i][k] * b[k][j]) % m;
		}
	}

	return ret;
}

vector<vector<int> > pow_mat(const vector<vector<int> > &mat, int k, int m)
{
	int n = mat.size();
	vector<vector<int> > ret, x = mat;

	ret.resize(n);
	for(int i = 0; i < n; ++i)
		ret[i].resize(n, 0);

	for(int i = 0; i < n; ++i)
		ret[i][i] = 1;

	for(int bit = 0; bit < 31; ++bit, x = mul_mat(x, x, m)) {

		if((k & (1 << bit)) == 0)
			continue;
		ret = mul_mat(ret, x, m);
	}

	return ret;
}

int main()
{
	while(true) {

		int n, m, a, b, c, t;
		vector<int> s;

		scanf("%d%d%d%d%d%d", &n, &m, &a, &b, &c, &t);

		if(n == 0)
			break;

		s.resize(n);
		for(int i = 0; i < n; ++i)
			scanf("%d", &s[i]);

		vector<vector<int> > mat;

		mat.resize(n);
		for(int i = 0; i < n; ++i)
			mat[i].resize(n);

		for(int i = 0; i < n; ++i) {
			if(i - 1 >= 0) mat[i][i - 1] = a;
			if(i + 1 < n) mat[i][i + 1] = c;
			mat[i][i] = b;
		}

		vector<vector<int> > x = pow_mat(mat, t, m);
		vector<int> ans(n);

		for(int i = 0; i < n; ++i) {
			ans[i] = 0;
			for(int j = 0; j < n; ++j)
				ans[i] = (ans[i] + x[i][j] * s[j]) % m;
		}

		for(int i = 0; i < n; ++i)
			printf("%d%c", ans[i], i < n - 1 ? ' ' : '\n');
	}

	return 0;
}