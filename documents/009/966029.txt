from collections import defaultdict


def dfs(v):
    global ret
    if ret:
        return
    if v == 2:
        if len(used) == cnt:
            ret = True
        return
    for idx, u in enumerate(edges[v]):
        tmp = tuple(sorted((u, v)) + [idx])
        if tmp in used:
            continue
        used.add(tmp)
        dfs(u)
        used.discard(tmp)

while 1:
    edges = defaultdict(list)
    cnt = 0
    try:
        a, b = map(int, raw_input().split())
        edges[a].append(b)
        edges[b].append(a)
        cnt += 1
    except EOFError:
        break
    while 1:
        a, b = map(int, raw_input().split())
        if a == b == 0:
            break
        edges[a].append(b)
        edges[b].append(a)
        cnt += 1
    stack = []
    ret = False
    used = set()
    dfs(1)
    if ret:
        print "OK"
    else:
        print "NG"