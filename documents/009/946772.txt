#include <iostream>
#include <vector>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <algorithm>	// require sort next_permutation count __gcd reverse etc.
#include <cstdlib>	// require abs exit atof atoi 
#include <cstdio>		// require scanf printf
#include <functional>
#include <numeric>	// require accumulate
#include <cmath>		// require fabs
#include <climits>
#include <limits>
#include <cfloat>
#include <iomanip>	// require setw
#include <sstream>	// require stringstream 
#include <cstring>	// require memset
#include <cctype>		// require tolower, toupper
#include <fstream>	// require freopen
#include <ctime>		// require srand
#define rep(i,n) for(int i=0;i<(n);i++)
#define ALL(A) A.begin(), A.end()

using namespace std;

typedef long long ll;
typedef pair<int, int> P;
const int MAX_N = 102;
vector<int> info[MAX_N];

int main()
{
	ios_base::sync_with_stdio(0);
	int N;
	while (cin >> N, N ){
		rep (i, N ) info[i].clear();
		rep (i, N ){
			int M; cin >> M;
			rep (j, M ){
				int p; cin >> p;
				p--;
				info[i].push_back (p );
			} // end rep
			sort (ALL (info[i] ) );
		} // end rep
		int K; cin >> K;
		vector<int> leak; leak.clear();
		rep (i, K ){
			int l; cin >> l;
			l--;
			leak.push_back (l );
		} // end rep
		sort (ALL (leak ) );
		int cnt = 0;
		int res = -1;
		rep (i, N ){
			int cur = 0;
			rep (j, leak.size() ){
				rep (k, info[i].size() ){
					if (info[i][k] == leak[j] ){
						cur++;
					} // end if
				} // end rep
			} // end rep
			if (cur == leak.size() ){
				res = i+1; cnt++;
			} // end if
		}// end rep
		if (cnt == 1 ){
			cout << res << endl;
		}else{
			cout << -1 << endl;
		} // end if
	} // end while
		
	return 0;
}