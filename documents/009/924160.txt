








#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <string>
#include <cmath>
#include <vector>
using namespace std;

#define LL long long
#define eps 1e-8
#define mod 1000000007

struct node{
    int a ,d ,b ;
}a[30];
int u[30] ;
void init(){
    int n = 30 ;
    for( int i = 0 ;i < n ;i ++ ){
        if( i & 1 ) u[i] = 1 ;
        else u[i] = -1 ;
    }
}
long long gcd( long long a ,long long b ){
    return b == 0 ? a : gcd( b ,a % b ) ;
}
long long lcm( long long a ,long long b ){
    return a * b / gcd( a ,b ) ;
}
void exgcd( int a ,int b ,long long &x ,long long &y ,int c ){
    if( !b ){
        y = 0 ,x = c / a ;
        return ;
    }
    exgcd( b ,a%b ,y ,x ,c ) ;
    y -= a/b * x ;
}
bool uni( node a ,node b ,node &ret ){
    if( b.d == 0 && a.d == 0 ){
        ret = a ;
        ret.b = min( a.b ,b.b ) ;
        if( b.a != a.a ) return 0 ;
        return 1 ;
    }
    if( b.d == 0 ){
        if( ( b.a % a.d + a.d ) % a.d != ( a.a % a.d + a.d ) % a.d ) //
            return 0 ;
        ret.d = b.d ;
        ret.b = min( a.b ,b.b ) ;
        ret.a = b.a ;
        return 1 ;
    }
    if( a.d == 0 ){
        if( ( a.a % b.d + b.d ) % b.d != ( b.a % b.d + b.d ) % b.d ) //
            return 0 ;
        ret.d = a.d ;
        ret.b = min( a.b ,b.b ) ;
        ret.a = a.a ;
        return 1 ;
    }
    ret.b = min( a.b ,b.b ) ;
    long long x1 ,y1 ,x2 ,y2 ;
    long long d = a.d / gcd( a.d ,b.d ) ;
    exgcd( d ,b.d ,x1 ,y1 ,b.a ) ;
    exgcd( b.d ,d ,x2 ,y2 ,a.a%d ) ;
    long long L = lcm( a.d ,b.d ) ;
    if( L > 2147483647LL ) return 0 ;
    long long u = ( x1 * d + x2 * b.d ) % L ;
    if( u < 0 ) u += L ;
    if( ( u % d + d ) % d != ( a.a % d + a.d ) % d || ( u % b.d + b.d ) % b.d != ( b.a % b.d + b.d ) % b.d ) return 0 ; //
    int k = ( max( a.a ,b.a ) - u ) / L ;
    u += k * L ;
    ret.a = u ,ret.d = L ;
    return 1 ;
}
int cal( node tmp ){ 
    if( tmp.d == 0 ){
        if( tmp.b >= tmp.a ) return 1 ;
        return 0 ;
    }
    if( tmp.b < tmp.a ) return 0 ;
    return ( tmp.b - tmp.a ) / tmp.d + 1 ;
}
void solve( int n ){
    int ans = 0 ;
    for( int i = 1 ;i < (1<<n) ;i ++ ){
        node tmp ;bool flag = 1 ;
        int cnt = 0 ;
        int j ;
        int tans = 0 ;
        for( j = 0 ;j < n ;j ++ )
            if( (1<<j) & i ){
                cnt = 1 ;
                tmp = a[j] ;
          //      tans += cal( a[j] ) ;
                break ;
            }
        for( j = j + 1;j < n ;j ++ ) if( (1<<j) & i ){
            cnt ++ ;
            if( !uni( tmp ,a[j] ,tmp ) ){ flag = 0 ;break ;}
         //   tans += cal( tmp ) ;
        }
        tans = cal( tmp ) ;
        if( flag ) ans += tans * u[cnt] ;
    }
    cout << ans << endl ;
}
int main(){
    int n ;
    init() ;
    while( scanf( "%d" ,&n ) && n ){
        for( int i = 0 ;i < n ;i ++ ){
            scanf( "%d %d %d" ,&a[i].a ,&a[i].b ,&a[i].d ) ;
        }
        solve( n ) ;
    }
}