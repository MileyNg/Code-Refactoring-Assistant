#include <bits/stdc++.h>

#define rep(i,n) for(int i=0;i<(int)(n);i++)
#define each(it,n) for(__typeof((n).begin()) it=(n).begin();it!=(n).end();++it)

using namespace std;

//////////////////////////////////////////////////

class UnionFind
{
public:
    vector<int> data;
    UnionFind(int size) : data(size, -1) {};

    bool unionSet(int x, int y) {
        x = root(x); y = root(y);
        if (x != y) {
            if (data[y] < data[x]) swap(x, y);
            data[x] += data[y]; data[y] = x;
        }
        return x != y;
    }

    bool find(int x, int y) {
        return root(x) == root(y);
    }

    int root(int x) {
        return data[x] < 0 ? x : data[x] = root(data[x]);
    }

    int size(int x) {
        return -data[root(x)];
    }
};

//////////////////////////////////////////////////
int main() {
    int n, q;
    cin >> n >> q;
    UnionFind uf(n);
    rep(i, q) {
        int c, x, y;
        cin >> c >> x >> y;
        if (c == 0) {
            uf.unionSet(x, y);
        } else {
            cout << uf.find(x, y) << endl;
        }
    }
    return 0;
}