#include<cstdio>
#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<map>
#include<set>
#include<queue>

using namespace std;


#define reps(i,f,n) for(int i=f;i<int(n);i++)
#define rep(i,n) reps(i,0,n)

#ifdef __BORLANDC__
	typedef __int64 ll;
#else
	typedef long long ll;
#endif

const ll L1 = 1;
const int N = 40;
int M = 20;

int n;
ll edge[N];
int power[N];

void printbit(ll state){
	rep(i,n)printf("%d",((L1<<i)&state)>0);puts("");
}

void printedge(){
	printf("edge\n");
	rep(i,n)printbit(edge[i]);
}

bool init(){
	cin>>n;
	if(n==0)return false;
	
	rep(i,N)edge[i]=power[i]=0;
	
	map<string,int> mp;
	vector<string> estr[N];
	rep(i,n){
		string a;
		int b,c;
		cin>>a>>b>>c;
		mp[a]=i;
		power[i]=b;
		rep(j,c){
			string d;
			cin>>d;
			estr[i].push_back(d);
		}
	}
	rep(i,n){
		rep(j,estr[i].size()){
			edge[i] |= (L1<<mp[estr[i][j]]);
		}
	}
	return true;
}

bool hasbit(ll state, int bit){return state&(L1<<bit);}

int T = (1<<M);
const int TM = (1<<20);
int half[TM];

int left_search(){
	rep(i,T)half[i]=0;
	
	int maxi = 0;
	for(int i=1;i<T;i+=2){
		bool ok = true;
		int sum = 0;
		rep(j,M){
			if(hasbit(i,j)){
				 if(edge[j]&i)ok=false;
				 sum += power[j];
			}
		}
		
		if(ok)half[i]=sum;
		maxi = max(maxi,half[i]);
	}
	return maxi;
}

int memo[TM];
int left_memo(int state){
	if(memo[state]!=-1)return memo[state];
	
	int ret = half[state];
	rep(i,M){
		if(state&(1<<i)){
			ret = max(ret, left_memo(state ^ (1<<i)));
		}
	}
	return memo[state]=ret;
}

int right_search(){
	int ans = 0;
	for(ll i=0; i<(L1<<n); i+=T){
		bool ok = true;
		int sum = 0;
		ll mask = 0;
		reps(j,M,n){
			if(hasbit(i,j)){
				if(edge[j]&i)ok=false;
				sum+=power[j];
				mask |= edge[j];
			}
		}
		
		if(ok){
			mask &= (T-1);
			mask ^= (T-1);
			//printf("i=%d sum=%d memo[bit]=%d ",i,sum,memo[mask]);
			//printbit(mask);
			ans = max(ans, left_memo(mask)+sum);
		}
	}
	return ans;
}
void left_dp(){
	rep(i,T)memo[i]=-1;
	
	//left_memo(T-1);
}

void printdp(){
	rep(i,T){
		printf("%3d ",memo[i]);printbit(i);
	}
}
void printsearch(){
	rep(i,T){
		printf("%3d ",half[i]);printbit(i);
	}
}
int solve(){
	M = (n+1)/2;
	T = (1<<M);
	
	int a = left_search();
	left_dp();
	
	/*
	puts("s");
	printsearch();
	puts("d");
	printdp();
	*/
	return max(a,right_search());
}

int main(){
	while(init()){
		printf("%d\n",solve());
	}
}

/*
6
INTERCAL 10 3 Chef Piet COW
Chef 7 3 INTERCAL Piet COW
Piet 6 2 INTERCAL Chef
COW 7 2 INTERCAL Chef
J 6 1 A
A 12 1 J
0

6
INTERCAL 20 1 J
Chef 50 3 J A Piet
Piet 30 2 A Chef
COW 15 1 J
J 40 3 COW INTERCAL Chef
A 25 2 Chef Piet
0

*/