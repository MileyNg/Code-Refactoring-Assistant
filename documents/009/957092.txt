#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstring>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <complex>
using namespace std;
typedef long long int ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
#define REP(i,x) for(int i=0;i<(int)(x);i++)
#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)
#define RREP(i,x) for(int i=(x)-1;i>=0;i--)
#define RFOR(i,c) for(auto i=(c).rbegin();i!=(c).rend();++i)
#define ALL(container) container.begin(), container.end()
#define SZ(container) ((int)container.size())

const int INF = 1<<28;
const double EPS = 1e-8;
const int MOD = 1000000007;
#define X real()
#define Y imag()

typedef complex<int> P;
 // 線分・半直線・直線
struct L { P pos, dir; };
inline int signum(int x) { return (!x ? 0 : x > 0 ? 1 : -1); }
inline int outp(const P& a, const P& b) {
	return (conj(a)*b).imag();
}
inline double norm(P p){
	return p.X*p.X+p.Y*p.Y;
}
inline int ccw(const P& p, const P& r, const P& s) {
    P a(r-p), b(s-p);
    int sgn = signum(outp(a, b));
    if (sgn != 0)
        return sgn;
    if (a.real()*b.real() < -EPS || a.imag()*b.imag() < -EPS)
        return -1;
    if (norm(a) < norm(b) - EPS)
        return 1;
    return 0;
}

int n;
main(){
	while(cin >> n, n){
		vector<int> tar, rtar;
		REP(i, n+1){
			vector<int> l;
			int m;
			P p1, p2;
			cin >> m >> p1.X >> p1.Y >> p2.X >> p2.Y;
			l.push_back(abs(p2-p1));
			REP(j, m-2){
				P p;
				cin >> p.X >> p.Y;
				l.push_back(ccw(p1, p2, p));
				p1 = p2;p2 = p;
				l.push_back(abs(p2-p1));
			}
			if(i == 0){
				tar = l;
				reverse(l.begin(), l.end());
				for(int i=1;i<l.size();i+=2) l[i] = -l[i];
				rtar = l;
			}else{
				if(l == tar || l == rtar) cout << i << endl;
			}
		}
		cout << "+++++" << endl;
	}
	return 0;
}