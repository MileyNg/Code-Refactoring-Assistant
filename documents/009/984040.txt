#include <cstdio>
#include <cstring>
#include <cmath>
#include <iostream>
#include <sstream>
#include <algorithm>
#include <numeric>
#include <functional>
#include <vector>
#include <queue>
#include <string>
#include <complex>
#include <stack>
#include <set>

#define REP(i,n) for (int i = 0; i < (n); i++)
#define FOR(i,s,n) for (int i = (s); i < (n); i++)
#define ALLOF(c) c.begin(), c.end()
#define RANGEOF(c,i,n) c.begin() + (i), c.begin() + (i) + (n)
#define EPS 1e-9
#define INF 1000000000
using namespace std;

typedef complex<int> POINT;
template <class T>
class vevector : public vector<vector<T>>
{
public:
	using vector<vector<T>>::operator []; 
	T& operator [](const POINT &index) { return (*this)[index.real()][index.imag()]; }
};

template <class T> T read() { T t; cin >> t; return t; }
template <> POINT read<POINT>() { int x, y; cin >> x >> y; return POINT(x, y); }
template <class T> vector<T> read(int n) { vector<T> v; REP(i,n) { v.push_back(read<T>()); } return v; }
template <class T> vevector<T> read(int n, int m) { vevector<T> v; REP(i,n) v.push_back(read<T>(m)); return v; }
template <class T> void write(const T &t) { cout << t << endl; }
template <class T> void write(const T &t, const T &t2) { cout << t << ' ' << t2 << endl; }

template <class T> void write(const vector<T> &v)
{
	ostringstream ss; 
	for (auto x : v) ss << x << ' ';
	auto s = ss.str();
	cout << s.substr(0, s.length() - 1) << endl;
}

struct _Reader { template <class T> _Reader operator ,(T &rhs) { cin >> rhs; return *this; } };
#define READ(t,...) t __VA_ARGS__; _Reader(), __VA_ARGS__

void solve();
int main() { solve(); return 0; }

vector<unsigned char> isPrime;
vector<int> primes;
void initPrimes(int n)
{
	isPrime = vector<unsigned char>(n + 1, true);
	isPrime[0] = isPrime[1] = false;
	FOR(i, 2, n)
	{
		if (!isPrime[i]) continue;
		primes.push_back(i);
		for (int j = i * 2; j <= n; j += i)
			isPrime[j] = false;
	}
}
/// template end ///

static int mcxi(const string &s)
{
	int ret = 0;
	int m = 1;
	for(auto c : s)
	{
		switch (c)
		{
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			m = c - '0';
			break;
		case 'm': ret += m * 1000; m = 1; break;
		case 'c': ret += m * 100; m = 1; break;
		case 'x': ret += m * 10; m = 1; break;
		case 'i': ret += m * 1; m = 1; break;
		}
	}
	return ret;
}


static string mcxi(int n)
{
	string ret;
	if (n >= 1000) { if (n / 1000 > 1) { ret.push_back(n / 1000 + '0'); } ret.push_back('m'); n %= 1000; }
	if (n >= 100) { if (n / 100 > 1) { ret.push_back(n / 100 + '0'); } ret.push_back('c'); n %= 100; }
	if (n >= 10) { if (n / 10 > 1) { ret.push_back(n / 10 + '0'); } ret.push_back('x'); n %= 10; }
	if (n >= 1) { if (n / 1 > 1) { ret.push_back(n / 1 + '0'); } ret.push_back('i'); n %= 1; }
	return ret;
}


void solve()
{
	READ(int, datasets);
	REP(dataset, datasets)
	{
		READ(string, a, b);
		write(mcxi(mcxi(a)+mcxi(b)));
	}
}