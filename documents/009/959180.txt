#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
#include <set>
#include <map>
#include <cstring>
#include <string>
#include <cstdlib>
#include <cstdio>
#include <cmath>
#include <ctime>
using namespace std;
typedef long long int ll;
typedef pair<int, int> pii;
typedef vector<int> vi;
#define REP(i,x) for(int i=0;i<(int)(x);i++)
#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)
#define RREP(i,x) for(int i=(x)-1;i>=0;i--)
#define RFOR(i,c) for(auto i=(c).rbegin();i!=(c).rend();++i)
#define ALL(container) container.begin(), container.end()
#define SZ(container) ((int)container.size())
 
const int INF = 1<<28;
const double EPS = 1e-8;
const int MOD = 1000000007;
 
string s;
vector<pii> stdb;
vector< set<int> > sts;
vector<double> sim;
 
double Jaccard(set<int> &a, set<int> &b){
	int t = 0;
	FOR(it, a) if(b.count(*it)) t++;
	return (double)t / (a.size() + b.size() - t);
}
 
int dfs(int &p){
//  printf("dfs(%d, %d)\n", p, l);
	if(s[p] == 'x'){
		p++;
		return 0;
	}
	pii t;
	if(s[p++] != '('){
		cout << "not (" << endl;
	}
	t.first = dfs(p);
	if(s[p++] != ' '){
		cout << "not space" << endl;
	}
	t.second = dfs(p);
	if(s[p++] != ')'){
		cout << "not )" << endl;
	}
	if(t.first > t.second) swap(t.first, t.second);
	auto ret = find(stdb.begin(), stdb.end(), t);
	if(ret == stdb.end()){
		int p = stdb.size();
		stdb.push_back(t);
		sts.push_back(sts[t.first]);
		sts.back().insert(sts[t.second].begin(), sts[t.second].end());
		sts.back().insert(p);
		sim.push_back(1 - Jaccard(sts[t.first], sts[t.second]));
		return p;
	}else return ret - stdb.begin();
}

int comp(int r1, int r2){
	if(r1 == r2) return 0;
	if(abs(sim[r1] - sim[r2]) > 1e-10) return sim[r1] > sim[r2] ? 1 : -1;
	if(!r1 || !r2) return 0;
	pii c1 = stdb[r1];
	pii c2 = stdb[r2];
	if(sim[c1.first] < sim[c1.second]) swap(c1.first, c1.second);
	if(sim[c2.first] < sim[c2.second]) swap(c2.first, c2.second);
	int ret = comp(c1.first, c2.first);
	if(ret) return ret;
	return comp(c1.second, c2.second);
}

void printTree(int st, int l){
	if(!st) printf("x");
	else{
		pii t = stdb[st];
		if(l ^ (comp(t.first, t.second) == -1)) swap(t.first, t.second);
		printf("(");
		printTree(t.first, 0);
		printf(" ");
		printTree(t.second, 1);
		printf(")");
	}
}
main(){
	while(getline(cin, s), s[0] !='0'){
		stdb.clear();
		stdb.push_back(pii(-1, -1));
		sts.clear();
		sts.push_back(set<int>());
		sts.back().insert(0);
		sim.clear();
		sim.push_back(1.0);

		int p = 0;
		printTree(dfs(p), 0);
		puts("");
	}
	return 0;
}