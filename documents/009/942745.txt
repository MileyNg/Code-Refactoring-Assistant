#include<bits/stdc++.h>
using namespace std;
int dp[4][50][50][1 << 12];
int H, W, K;
char mas[50][50];
int dy[] = { 0, 1, 0, -1}, dx[] = { 1, 0, -1, 0};
int mask;

int getdir(int bit, int i){
  return (bit >> (i * 2)) & 3;
}

int rec(int x, int y, int mul, int bit){
  if(y == H - 1 && x == W - 1 && mul == 0) return 0;
  if(~dp[mul][y][x][bit]) return dp[mul][y][x][bit];

  int ret = 0, value = 0, mx = x, my = y;
  bool hoge = false;
  if(mas[y][x] != '.'){
    for(int i = 0; i < 2 * K; i++){
      my -= dy[getdir( bit, i)];
      mx -= dx[getdir( bit, i)];
      if(mx == x && my == y){
        hoge = true;
        break;
      }
    }
    if(!hoge) value = mas[y][x] - '0';
  }

  for(int i = 0; i < 4; i++){
    if(mul == 0 && i > 1) break;
    int ny = y + dy[i], nx = x + dx[i];
    if(ny < 0 || ny >= H || nx < 0 || nx >= W || mas[ny][nx] == '#') continue;
    ret = max( ret, rec( nx, ny, mul - (i > 1), ((bit << 2)|i) & mask) + value);
  }
  return dp[mul][y][x][bit] = ret;
}

int main()
{
  cin >> H >> W >> K;
  mask = (1 << (K * 2 * 2)) - 1;
  for(int i = 0; i < H; i++){
    for(int j = 0; j < W; j++){
      cin >> mas[i][j];
    }
  }
  fill_n( ***dp, 4 * 50 * 50 * (1 << 12), -1);
  cout << rec( 0, 0, K, 0) << endl;
  return 0;
}