#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;
#define rep(i,n) for (int i=0; i < (n); i++)
typedef pair<int, int> PII;
typedef vector<int> VI;
typedef vector<VI> VVI;

const int MAX_N = 16;
const int INF = 100000000;

VVI g;
VVI dp;
int n;

int tsp(int visited, int v) {
  int& res = dp[visited][v];
  if (res != -1) return res;

  if (visited == (1 << n) - 1) return 0;

  res = INF;

  rep(u, n) {
    if (visited & (1 << u)) continue;
    res = min(res,
      tsp(visited | (1 << u), u) + g[v][u]);
  }
  return res;
}

const int dx[] = {0, 1, 0, -1};
const int dy[] = {1, 0, -1, 0};

int solve(int w, int h) {
  vector<string> field(h);

  rep(i, h) cin >> field[i];

  vector<PII> pts;
  PII start;
  rep(i, h) rep(j, w) {
    char c = field[i][j];
    if (c == 'o') start = PII(j, i);
    if (c == '*') pts.push_back(PII(j, i));
  }
  pts.insert(pts.begin(), start);
  n = pts.size();

  g  = VVI(n, VI(n, INF));
  dp = VVI(1 << n, VI(n, -1));

  rep(pi, n) {
    PII startPt = pts[pi];
    queue<PII> que;
    VVI visited(h, VI(w));
    que.push(startPt);

    for(int d = 0; !que.empty(); d++) {
      int sz = que.size();
      rep(qi, sz) {
        PII pt = que.front();
        que.pop();
        int x = pt.first;
        int y = pt.second;
        visited[y][x] = true;

        rep(pj, n) {
          if (pt == pts[pj]) {
            g[pi][pj] = g[pj][pi] = d;
            break;
          }
        }

        rep(di, 4) {
          int nx = x + dx[di];
          int ny = y + dy[di];
          if (nx < 0 || w <= nx || ny < 0 || h <= ny) continue;
          if (visited[ny][nx]) continue;
          if (field[ny][nx] == 'x') continue;
          visited[ny][nx] = true;
          que.push(PII(nx, ny));
        }
      }
    }
  }

  int ans = tsp(1, 0);
  if (ans == INF) ans = -1;
  return ans;
}

int main() {
  int w, h;
  while(cin >> w >> h, w || h) cout << solve(w, h) << endl;

  return 0;
}