#include <iostream>
#include <string>

using namespace std;

class Node{
    public:
        Node():nc(0),id(-1){}
        int nc;
        Node* l;
        Node* r;
        Node* p;
        int id;
};

Node* root;

Node* dfs(Node* node,int id){
     // cout<<"dfs id:"<<node->id<<" nc:"<<node->nc<<endl;
     if(node->id==-1)
        return node;
     
     //cout<<"node-id:"<<node->id<<" id"<<id<<endl;
     if(node->id>id){
       if(node->l==nullptr){
            node->l = new Node();
            node->l->p = node;
     //      cout<<"node-p:"<<node->id<<endl;
            node->nc++;
            return node->l;
        }else{
            return dfs(node->l, id);
        }
      }else{
        if(node->r==nullptr){
           node->r = new Node();
           node->r->p = node;
           node->nc++;
           return node->r;
        }
        return dfs(node->r, id);
      }
}

void insert(int id){
//     cout<<"ins"<<endl;
     Node* leaf = dfs(root,id);
     //cout<<"leaf"<<leaf->id<<" p:"<<leaf->p->id<<endl;
     leaf->id = id;               
     leaf->p->nc++;
}

void pro(Node* n){
    if(n->id!=-1){
        cout<<" "<<n->id;
        if(n->l!=nullptr)
            if(n->l->id!=-1)
                pro(n->l);
        if(n->r!=nullptr){
            if(n->r->id!=-1)
            pro(n->r);
        }
    }
}

void ino(Node* n){
    if(n->id!=-1){
        //cout<<"id:"<<n->id<<endl;
        if(n->l!=nullptr){
            if(n->l->id!=-1)
                ino(n->l);
        }
        cout<<" "<<n->id;
        if(n->r!=nullptr){
            if(n->r->id!=-1)
                ino(n->r);
        }
    }
}

void print(){
    //cout<<"ino"<<endl;
    ino(root);
    cout<<endl;
    //cout<<"pro"<<endl;
    pro(root);
    cout<<endl;
}

int main(){
    int n, id;
    string cmd;
    bool flag=true;
    root = new Node();
    cin>>n;
    for(int i=0;i<n;i++){
        cin>>cmd;
        if(cmd=="insert"){
            cin>>id;
            if(flag){
                root->id=id;
                root->p = new Node();
                flag=false;
            }
            insert(id);
        }else{
            print();
        }
    }
    delete root;
    return 0;
}