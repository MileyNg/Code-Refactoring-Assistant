#include <iostream>
#include <vector>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <algorithm>	// require sort next_permutation count __gcd reverse etc.
#include <cstdlib>	// require abs exit atof atoi 
#include <cstdio>		// require scanf printf
#include <functional>
#include <numeric>	// require accumulate
#include <cmath>		// require fabs
#include <climits>
#include <limits>
#include <cfloat>
#include <iomanip>	// require setw
#include <sstream>	// require stringstream 
#include <cstring>	// require memset
#include <cctype>		// require tolower, toupper
#include <fstream>	// require freopen
#include <ctime>		// require srand
#define rep(i,n) for(int i=0;i<(n);i++)
#define ALL(A) A.begin(), A.end()
#define UNSOLVED -1
#define CORRECT   0
#define WRONG	    1

using namespace std;

typedef long long ll;
typedef pair<int, int> P;

struct TEAM{
	int tid;	// チームのID
	int ac;	// 正解数
	int sum_pa;	// トータルのペナルティー
	int st[12];	// 問題の状態	UNSOLVED CORRECT WRONG
	int wa[12];	// 各問題の誤答数
	int pa[12];	// 各問題のペナルティー

	bool operator<( const TEAM & right ) const {
		return (ac != right.ac ? ac > right.ac : ( sum_pa != right.sum_pa ? sum_pa < right.sum_pa : tid < right.tid ) );
	} 
};

	
int main()
{
	ios_base::sync_with_stdio(0);
	int T, P, R;	// T: 参加チーム数 P: 問題数 R: レコード数
	while (cin >> T >> P >> R, T ){
		TEAM t[T];
		rep (i, T ){
			t[i].tid = i+1, t[i].ac = 0, t[i].sum_pa = 0;
			rep (j, P ) t[i].st[j] = UNSOLVED, t[i].wa[j] = 0, t[i].pa[j] = 0;
		} // end rep
		rep (i, R ){
			int tid, pid, tm; string mes;
			cin >> tid >> pid >> tm >> mes;
			tid--; pid--;
			if (mes == "WRONG" ){
				t[tid].wa[pid]++;
				t[tid].st[pid] = WRONG;
			}else{	// mes == "CORRECT"
				t[tid].st[pid] = CORRECT;
				t[tid].pa[pid] = t[tid].wa[pid]*1200 + tm;
			} // end if
		} // end rep
		rep (i, T ){
			rep (j, P ){
				if (t[i].st[j] == CORRECT ){
					t[i].ac++;
					t[i].sum_pa += t[i].pa[j];
				} // end if
			} // end rep
		} // end rep
		sort (t, t+T );
		rep (i, T ){
			cout << t[i].tid << ' ' << t[i].ac << ' ' << t[i].sum_pa << endl;
		} // end rep
	} // end while
	
	return 0;
}