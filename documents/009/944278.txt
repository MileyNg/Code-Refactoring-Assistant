#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

#define rep(i, n) for (int i = 0; i < int(n); ++i)

class UnionFind {
private:
  int n;
  vector<int> a;
public:
  UnionFind(int n) : n(n), a(n, -1) {}
  int find(int x) {return a[x] < 0 ? x : (a[x] = find(a[x]));}
  bool equal(int x, int y) {return find(x) == find(y);}
  void unite(int x, int y) {
    x = find(x), y = find(y);
    if (x == y) return;
    if (a[x] > a[y]) swap(x, y);
    a[x] += a[y];
    a[y] = x;
    n--;
  }
  int size() {return n;}
  int size(int x) {return -a[find(x)];}
};

struct Edge {
  int a, b, w;
  bool operator<(const Edge &e) const {return w < e.w;}
};

int main() {
  while (true) {
    int n, m;
    cin >> n >> m;
    if (n == 0 && m == 0) break;
    vector<Edge> edge(m);
    rep (i, m) cin >> edge[i].a >> edge[i].b >> edge[i].w;
    rep (i, m) --edge[i].a;
    rep (i, m) --edge[i].b;
    sort(edge.begin(), edge.end());
    int res = 1e9;
    rep (i, m) {
      UnionFind uf(n);
      for (int j = i; j < m; ++j) if (!uf.equal(edge[j].a, edge[j].b)) {
	  uf.unite(edge[j].a, edge[j].b);
	  if (uf.size() == 1) {
	    res = min(res, edge[j].w - edge[i].w);
	    break;
	  }
      }
    }
    if (res == 1e9) cout << -1 << endl;
    else cout << res << endl;
  }
}