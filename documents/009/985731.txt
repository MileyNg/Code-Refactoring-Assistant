#include <stdio.h>
#include <stdlib.h>


typedef struct {
    int *buffer, **bp, *bidx, depth, blen, *pattern;
} perm_gen_state;

int generate_permutations(int a[], int len, perm_gen_state *s, int pat[]) {
    int *b, i, j;
    if (s->buffer == NULL) {
        s->buffer = (int*)malloc((len*(len+1)/2) * sizeof(int));
        s->bp = (int**)malloc(len * sizeof(int*));
        s->bidx = (int*)malloc(len * sizeof(int));
        s->pattern = (int*)malloc(len * sizeof(int));
        s->blen = len;
        s->depth = 0;
        s->bp[s->depth] = s->buffer;
        s->bidx[s->depth] = 0;
        for (i = 0; i < len; i++) s->bp[0][i] = a[i];
    }
    
    while (s->depth >= 0) {
        // printf(": %d, %d ", depth, blen);
        if (s->bidx[s->depth] < s->blen) {
            b = s->bp[s->depth];
            s->pattern[s->depth] = b[s->bidx[s->depth]];
            if (s->blen == 1) {
                for (i = 0; i < len; i++) pat[i] = s->pattern[i];
                s->bidx[s->depth]++;
                return 1;
            }
            else {
                s->bp[s->depth + 1] = b + s->blen;
                s->bidx[s->depth + 1] = 0;
                for (i = 0, j = 0; i < s->blen; i++) {
                    if (i != s->bidx[s->depth]) s->bp[s->depth+1][j++] = b[i];
                }
                s->bidx[s->depth]++;
                s->depth++;
                s->blen--;
            }
        }
        else {
            s->depth--;
            s->blen++;
        }
    }

    free(s->buffer);
    free(s->bp);
    free(s->bidx);
    free(s->pattern);
    return 0;
}


int cmp_int_dsc(const void *a, const void *b) {
    if (*(int *)a > *(int *)b) {
        return -1;
    }
    else if (*(int *)a == *(int *)b) {
        return 0;
    }
    return 1;
}

int main(void) {
    int N, a[40000], b[40000], aperm[40000], i, k, win, win_min;
    
    while (scanf("%d\n", &N) == 1 && N) {
        for (i = 0; i < N; i++) {
            scanf("%d", &a[i]);
        }
        for (i = 0; i < N; i++) {
            scanf("%d", &b[i]);
        }
        qsort(a, N, sizeof(int), cmp_int_dsc);
        qsort(b, N, sizeof(int), cmp_int_dsc);

        for (k = 1; k < N; k++) {
            perm_gen_state gstate;
            gstate.buffer = NULL;
            win_min = 40000;
            while (generate_permutations(a, k, &gstate, aperm)) {
                for (i = 0, win = 0; i < k; i++) {
                    if (aperm[i] > b[i]) win++;
                }
                if (win < win_min) win_min = win;
            }
            if (win_min > k / 2) break;
        }

        if (k == N) {
            printf("NA\n");
        }
        else {
            printf("%d\n", k);
        }
    }

    return 0;
}