#include<algorithm>
#include<iostream>
#include<cstring>
#include<vector>
#include<cstdio>
#include<cmath>
#include<queue>
#include<stack>
#include<map>
#include<set>
#define LL long long
#define CLR(a, b) memset(a, b, sizeof(a))

using namespace std;
const int INF = 0x3f3f3f3f;
const int maxn = 30;
char ch[maxn][maxn];
int cnt[maxn][maxn], len[maxn];
int dp[1 << 14][15][15];
bool vis[maxn];

bool ok(int a, int b, int k)
{
    for(int i = 0; i < k; i ++)
    {
        if(ch[a][len[a] - k + i] != ch[b][i]) return false;
    }
    return true;
}

void init(int n)
{
    CLR(cnt, 0);CLR(vis, false);
    for(int i = 0; i < n; i ++)
    {
        for(int j = 0; j < n; j ++)
        {
            if(i != j)for(int k = min(len[i], len[j]); k; k --)
            {
                if(ok(i, j, k))
                {
                    cnt[i][j] = k;
                    break;
                }
            }
//            printf("%d %d %d\n", i, j, cnt[i][j]);
        }
    }
    for(int i = 0; i < n; i ++)
    {
        for(int j = 0; j < n; j ++) if(i != j)
        {
            if(strstr(ch[i], ch[j]))
            {
                vis[j] = true;
            }
        }
    }
    for(int i = 0; i < n; i ++)
    {
        dp[1 << i][i][i] = len[i];
    }
}

int main()
{
    int n;
    while(scanf("%d", &n), n)
    {
        for(int i = 0; i < n; i ++)
            scanf("%s", ch[i]), len[i] = strlen(ch[i]);//, printf("%d  %d\n", i, len[i]);
        CLR(dp, INF);init(n);
        for(int i = 0; i < (1 << n); i ++)
        {
            for(int s = 0; s < n; s ++) if(1 & (i >> s))
            {
                if(vis[s]) continue;
                for(int k = 0; k < n; k ++) if(1 & (i >> k))
                {
//                    printf("%d %d %d %d\n", i, k, s, dp[i][k][s]);
                    if(vis[k]) continue;
                    for(int j = 0; j < n; j ++) if(!((1 << j) & i))
                    {
                        if(vis[j]) continue;
                        dp[i|(1<<j)][j][s] = min(dp[i|(1<<j)][j][s], dp[i][k][s] + len[j] - cnt[j][k]);
                        dp[i|(1<<j)][k][j] = min(dp[i|(1<<j)][k][j], dp[i][k][s] + len[j] - cnt[s][j]);
//                        if(i == 3 && k == 0 && s == 1 && j == 2)
//                        {
//                            printf("%d %d %d\n", dp[3][0][1], cnt[1][2], len[2]);
//                            printf("%d  %d  ~~%d\n", dp[i][k][s] + len[j] - cnt[s][j], dp[i|(1<<j)][k][j], i|(1<<j));
//                        }
                    }
                }
            }
        }
        int ans = INF;
//        cout << (1 << n) - 1 << endl;
        int nn = (1 << n) - 1;
        for(int i = 0; i < n; i ++) if(vis[i]) nn ^= (1 << i);
        for(int i = 0; i < n; i ++)
            for(int j = 0; j < n; j ++)
                ans = min(dp[nn][i][j], ans);//, printf("%d %d !!! %d\n", i, j, dp[(1 << n) - 1][i][j]);
        printf("%d\n", ans);
    }
}