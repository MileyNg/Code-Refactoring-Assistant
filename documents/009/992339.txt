#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <sstream>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <numeric>
#include <cctype>
#include <tuple>
#include <array>

// BEGIN CUT HERE
#ifdef _MSC_VER
#include <agents.h>
#endif
// END CUT HERE 

#define FOR(i, a, b) for(int i = (a); i < (int)(b); ++i)
#define rep(i, n) FOR(i, 0, n)
#define ALL(v) begin(v), end(v)
#define REV(v) rbegin(v), rend(v)
#define MEMSET(v, s) memset(v, s, sizeof(v))
#define MP make_pair
#define MT make_tuple
#define X first
#define Y second

using namespace std;

typedef pair<int, int> P;

int main(){
	int n;
	cin >> n;
	vector<int> p(n);
	rep(i, n) cin >> p[i];

	vector<int> dist(n, 1e7);
	dist[0] = 0;

	priority_queue<P, vector<P>, greater<P>> q;
	q.push(MP(0, 0));

	while (!q.empty()){
		int d, pos;
		tie(d, pos) = q.top();
		q.pop();

		if (dist[pos] < d) continue;
		if (pos == n-1) break;

		if (p[pos] == 0){
			FOR(i, 1, 7){
				int npos = min(pos + i, n - 1);
				if (dist[npos] <= d + 1) continue;
				dist[npos] = d + 1;
				q.push(MP(d + 1, npos));
			}
		}
		else{
			if (dist[pos + p[pos]] <= d) continue;
			dist[pos + p[pos]] = d;
			q.push(MP(d, pos + p[pos]));
		}
	}

	cout << dist[n - 1] << endl;


	return 0;
}