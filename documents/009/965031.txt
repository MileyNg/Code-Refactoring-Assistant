#include <cassert>
#include <iostream>
#include <vector>
#include <queue>
using namespace std;
const int dx[4] = {0,1,-1,0};
const int dy[4] = {-1,0,0,1};
int ac = 0;
int ans = 0;
void print(vector<vector<int> > field){
  cout << "-------------------------" <<endl;
  for(int i = 0;i < field.size();i++){
    for(int j = 0;j < field[0].size();j++){
      cout << field[i][j] ;
    }
    cout << endl;
  }
  cout << "-----------------------------------------------" << endl;
}
void  change(int c,int nc,int x,int y,vector<vector<int> > &field){
  field[y][x] = nc;
  int nx,ny;
  for(int i = 0;i < 4;i++){
    nx = x+dx[i];
    ny = y+dy[i];
    if(nx >= 0 && nx < field[0].size() && ny >= 0 && ny < field.size()){
      if(c == field[ny][nx]){
	change(c,nc,nx,ny,field);
      }
    }
  }

}
void bs(vector<vector<int> > field,int c){
  assert(c == ac);
  queue<pair<int,int> > que;
  que.push(pair<int,int>(0,0));
  field[0][0] = -1;
  int cnt = 1;
  while(!que.empty()){
    pair<int,int> tmp = que.front();que.pop();
    int x = tmp.first;
    int y = tmp.second;
    for(int i = 0;i < 4;i++){
      int nx = x+dx[i];
      int ny = y+dy[i];
      if(nx >= 0 && nx < field[0].size() && ny >= 0 && ny < field.size()){
	if(c == field[ny][nx]){
	  cnt++;
	  field[ny][nx] = -1;
	  que.push(pair<int,int>(nx,ny));
	}
      }  
    }
  }
  ans = max(ans,cnt);
}
void cal(int c,vector<vector<int> > field,int cnt){
  assert(c == field[0][0]);
  if(cnt == 4){
    if(c != ac){
      vector<vector<int> > tmp(field);
      change(c,ac,0,0,tmp);
      assert(tmp[0][0] == ac);
      bs(tmp,ac);
    }
    return ;
  }
  cnt++;
  for(int i = 0;i < 6;i++){
    if(i == c)continue;
    vector<vector<int> > tmp(field);
    change(c,i,0,0,tmp);
    assert(tmp[0][0] == i);
    cal(tmp[0][0],tmp,cnt);
  }
}

int main(){
  int h,w;
  while(cin >> h >> w >> ac && (h||w||ac)){
    ans = 0;
    ac--;
    vector<vector< int> > field(h,vector<int>(w,0));
    for(int i = 0;i < h;i++){
      for(int j = 0;j < w;j++){
	cin >> field[i][j];
	field[i][j]--;
      }
    }
    cal(field[0][0],field,0);
    
    cout << ans << endl;
  }
  return 0;
}