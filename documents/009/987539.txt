#include<stdio.h>
#include<string.h>
#include<iostream>
#include<queue>
#include<string>
#define lld long long
using namespace std;
int n, i, j, k, v;
int a[2000], dp[3][310000], b[2000];
int ok(int x)
{
    for(int i = 1; i <= (1<<20); i <<= 1)
        if (x == i) return 1;
    return 0;
}
int sum[2000];
int work[2000];
int main()
{
    while(~scanf("%d", &n))
    {
        if (!n) break;
        for(i = 0; i < n; i++)
            scanf("%d", &a[i]);
        memset(work,0,sizeof(work));
        int ans = 1;
        for(i = 1; i <= 500 ;i++)
        {
            if (work[i]) continue;
            int cnt = 0;
            for(j = 0; j < n; j++)
                if (a[j] % i == 0 && ok(a[j] / i))
                    b[++cnt] = a[j] / i;
            while(cnt)
            {
                sum[0] = 0;
                for(j = 1; j <= cnt; j++)
                    sum[j] = sum[j - 1] + b[j];

                for(j = 0; j <= 1100; j++)
                    dp[0][j] = dp[1][j] = -200000;
                dp[0][0] = 0;
                for(j = 1; j <= cnt; j++)
                {
                    for(k = 0; k <= sum[j]; k++)
                    {
                        dp[j%2][k] = -200000;
                        if (k > sum[j-1]) dp[!(j%2)][k] = -200000;
                    }
                    for(v = 0; v <= sum[j]; v++)
                    {
                        dp[j % 2][v]  =  dp[!(j % 2)][v] ;
                        if (b[j] && v >=b[j] && (v % b[j]==0))
                            dp[j % 2][v] = max(dp[j % 2][v], dp[!(j % 2)][v - b[j]] + 1);
                    }
                }
                for(j = 1; j <= sum[cnt]; j++)
                    if (ok(j))
                        ans = max(ans, dp[cnt%2][j]);
                for (j=1; j<=cnt; j++) b[j]/=2;
                int k=0;
                for (j=1; j<=cnt; j++)
                    if (b[j]) ++k;
                if (!k) break;
            }
            for(j = 0; j < n; j++)
                if (a[j] == i) work[i] = 1;
        }
        cout<<ans<<endl;
    }
    return 0;
}