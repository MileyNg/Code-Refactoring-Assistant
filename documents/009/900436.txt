#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <map>
#include <stack>
#include <queue>
#include <algorithm>
#include <set>

#define FOR(i,a,b) for(int i=(a);i<(b);i++)
#define REP(i,j) FOR(i,0,j)
#define mp std::make_pair

typedef long long ll;
typedef unsigned long long ull;
typedef std::pair<int,int> P;
typedef std::pair<int,P> State;

const int INF = 1001001001;

// S N E W(南北東西)
const int dx[8] = {0, 0, 1, -1, 1, 1, -1, -1}, dy[8] = {1, -1, 0, 0, 1, -1, 1, -1};

std::vector<int> X[10], Y[10];
int W, H;
int hx[24], hy[24];
int cx, cy, hn;

bool canMove(int u, int v, int state){
    if(hx[u] != hx[v] && hy[u] != hy[v]){return false;}
    if(hx[u] == hx[v]){
        if(hy[u] > hy[v]){std::swap(u, v);}
        for(auto i : Y[hx[u]]){
            if(state >> i & 1 && hy[u] < hy[i] && hy[i] < hy[v]){return false;}
        }
    }else{
        if(hx[u] > hx[v]){std::swap(u, v);}
        for(auto i : X[hy[u]]){
            if(state >> i & 1 && hx[u] < hx[i] && hx[i] < hx[v]){return false;}
        }
    }
    return true;
}

int bitCount(int n){
    n = (n & 0x55555555) + (n >> 1 & 0x55555555);
    n = (n & 0x33333333) + (n >> 2 & 0x33333333);
    n = (n & 0x0f0f0f0f) + (n >> 4 & 0x0f0f0f0f);
    n = (n & 0x00ff00ff) + (n >> 8 & 0x00ff00ff);
    return n = (n & 0x0000ffff) + (n >> 16 & 0x0000ffff);
}

int main(){
    while(std::cin >> W >> H, W){
        hn = 0;
        REP(i, 10){
            X[i].clear(); Y[i].clear();
        }
        REP(i, H){
            REP(j, W){
                int n;
                std::cin >> n;

                if(n == 1){
                    hx[hn] = j; hy[hn] = i;
                    // printf("(%d, %d)\n", j, i);
                    X[i].push_back(hn);
                    Y[j].push_back(hn);
                    hn++;
                }else if(n == 2){
                    // printf("church: (%d, %d)\n", j, i);
                    cx = j; cy = i;
                }
            }
        }
        hx[hn] = cx; hy[hn] = cy;

        int res = 0;
        std::queue<State> q;
        q.push(mp(0, mp(hn, 0)));

        while(!q.empty()){
            State s = q.front(); q.pop();
            P p = s.second;
            int n = s.first, v = p.first, state = p.second;

            if(n == hn){res += canMove(hn, p.first, p.second); continue;}

            for(auto u : X[hy[v]]){
                if(state >> u & 1){continue;}
                if(!canMove(u, v, state)){continue;}
                q.push(mp(n+1, mp(u, state | (1 << u))));
            }

            for(auto u : Y[hx[v]]){
                // printf("y: %d, %d, %d, (%d, %d), (%d, %d)\n", u, v, canMove(u, v), hx[u], hy[u], hx[v], hy[v]);
                if(state >> u & 1){continue;}
                if(!canMove(u, v, state)){continue;}
                q.push(mp(n+1, mp(u, state | (1 << u))));
            } 
        }

        std::cout << res << std::endl;
    }
}