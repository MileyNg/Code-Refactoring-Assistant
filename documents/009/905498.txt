#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <vector>
using namespace std;

enum FACE { TOP, BOTTOM, FRONT, BACK, LEFT, RIGHT };
class dice {
private:
	int num[6];

	void roll(FACE a, FACE b, FACE c, FACE d) {
		swap(num[a], num[b]);
		swap(num[b], num[c]);
		swap(num[c], num[d]);
	}

public:
	dice() {
		num[TOP] = 1;
		num[BOTTOM] = 6;
		num[FRONT] = 2;
		num[BACK] = 5;
		num[RIGHT] = 3;
		num[LEFT] = 4;
	}

	void set(int top, int front) {
        if(num[RIGHT] == top || num[LEFT] == top) west();
        while(num[TOP] != top) north();
        while(num[FRONT] != front) ccw();
	}

	const int &operator[](FACE f) const { return num[f]; }

	void north() { roll(TOP, BACK, BOTTOM, FRONT); }
	void east()  { roll(TOP, LEFT, BOTTOM, RIGHT); }
	void west()  { roll(TOP, RIGHT, BOTTOM, LEFT); }
	void south() { roll(TOP, FRONT, BOTTOM, BACK); }
	void ccw()   { roll(BACK, RIGHT, FRONT, LEFT); }
	void cw()    { roll(BACK, LEFT, FRONT, RIGHT); }
};


int right_face[7][7];
void init() {
	dice d;
	for(int t = 1; t <= 6; ++t) {
		for(int f = 1; f <= 6; ++f) {
			if(t == f || t + f == 7) continue;
			d.set(t, f);
			right_face[t][f] = d[RIGHT];
		}
	}
}

int top[3][3][3];
int front[3][3][3];

vector<int> ans;

void dfs(int x, int y, int z) {
	if(z == 3) {
		int sum = 0;
		for(int z = 0; z < 3; ++z) {
			for(int y = 0; y < 3; ++y) {
				sum += right_face[top[z][y][2]][front[z][y][2]];
			}
		}
		ans.emplace_back(sum);
	}
	else if(y == 3) {
		dfs(0, 0, z + 1);
	}
	else if(x == 3) {
		dfs(0, y + 1, z);
	}
	else {
		const int p_top = top[z][y][x];
		const int p_front = front[z][y][x];
		for(int t = 1; t <= 6; ++t) {
			if(top[z][y][x] && top[z][y][x] != t) continue;
			if(z && top[z - 1][y][x] != t) continue;

			for(int f = 1; f <= 6; ++f) {
				if(t == f || t + f == 7) continue;
				if(front[z][y][x] && front[z][y][x] != f) continue;
				if(y && front[z][y - 1][x] != f) continue;
				if(x && right_face[top[z][y][x - 1]][front[z][y][x - 1]] != right_face[t][f]) continue;

				top[z][y][x] = t;
				front[z][y][x] = f;
				dfs(x + 1, y, z);
				top[z][y][x] = p_top;
				front[z][y][x] = p_front;
			}
		}
	}
}

void solve() {
	ans.clear();
	memset(top, 0, sizeof(top));
	memset(front, 0, sizeof(front));

	for(int y = 2; y >= 0; --y) {
		for(int x = 0; x < 3; ++x) {
			cin >> top[0][y][x];
		}
	}

	for(int z = 0; z < 3; ++z) {
		for(int x = 0; x < 3; ++x) {
			cin >> front[z][0][x];
		}
	}

	dfs(0, 0, 0);
	if(ans.size()) {
		sort(ans.begin(), ans.end());
		ans.erase(unique(ans.begin(), ans.end()), ans.end());
		for(unsigned i = 0; i < ans.size(); ++i) {
			cout << ans[i] << (i + 1 == ans.size() ? "\n" : " ");
		}
	}
	else {
		cout << "0\n";
	}
}

int main() {
	cin.tie(nullptr);
	ios::sync_with_stdio(false);

	init();

	int n;
	cin >> n;

	while(n--) solve();

	return EXIT_SUCCESS;
}