#include <iostream>
#include <stack>
#include <map>
#include <algorithm>
#include <sstream>
#include <queue>
#include <string>
#include <cstring>
#include <cmath>
using namespace std;
#define F first
#define S second
const int INF=100000000;

struct Node{
	vector<int> to,from;
};

bool e[5000][5000];

int main(){
	int n,m;
	cin >> n >> m;
	memset(e,0,sizeof(e));
	//vector<vector<int> > e(n,vector<int>(n));
	vector<Node> node(n);
	for(int i=0; i<m; ++i){
		int a,b;
		cin >> a >> b;
		e[--a][--b]=1;
		node[a].to.push_back(b);
		node[b].from.push_back(a);
	}
	queue<int> S;
	vector<int> L;
	for(int i=0; i<n; ++i){
		//cout << node[i].from.size() << endl;
		if(node[i].from.size()==0) S.push(i);
	}
	/*
	for(int i=0; i<S.size(); ++i){
		cout << S[i] << endl;
	}
	*/
	bool other=false;
	while(!S.empty()){
		if(S.size()>1) other=true;
		L.push_back(S.front());
		int ls=S.front();
		S.pop();
		for(int i=0; i<node[ls].to.size(); ++i){
			int nn=node[ls].to[i];
			e[ls][nn]=0;
			bool flag=true; 
			for(int j=0; j<node[nn].from.size(); ++j){
				if(e[node[nn].from[j]][nn]==1){
					flag=false;
					break;
				}
			}
			if(flag) S.push(nn);
			//if(node[node[ls].to[i]].from.size()==0) S.push_back(node[ls].to[i]);
		}
	}
	for(int i=0; i<L.size(); ++i){
		cout << L[i]+1 << endl;
	}
	if(other) cout << 1 << endl;
	else cout << 0 << endl;
	return 0;
}