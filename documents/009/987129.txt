#include <algorithm>
#include <iostream>
#include <cstdio>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
using namespace std;

#define FORIT(i, c) for (typeof((c).begin()) i = (c).begin(); i != (c).end(); i++)
#define ISEQ(c) (c).begin(), (c).end()
typedef long long ll;

vector<char> cs;
map<char, int> memo;
set<char> top;

int n, m, res = 0;
bool used[10];

vector<string> s;

void calc(int k) {
  if (k == m) {
    int sum = 0;
    for (int i = 0; i < n-1; i++) {
      int num = 0;
      for (int j = 0; j < s[i].size(); j++)
	num = 10*num + memo[s[i][j]];
      sum += num;
    }
    int num = 0;
    for (int j = 0; j < s[n-1].size(); j++)
      num = 10*num + memo[s[n-1][j]];
    if (sum == num) {
      res++;
    }
  } else {
    if (!used[0] and top.find(cs[k]) == top.end()) {
      used[0] = true;
      memo[cs[k]] = 0;
      calc(k+1);
      used[0] = false;
    }
    for (int i = 1; i < 10; i++) {
      if (!used[i]) {
	used[i] = true;
	memo[cs[k]] = i;
	calc(k+1);
	used[i] = false;
      }
    }
  }
}

int main() {
  while (true) {
    cin >> n;
    if (n == 0) break;
    s = vector<string>(n);
    cs.clear();
    memo.clear();
    top.clear();
    for (int i = 0; i < n; i++) {
      cin >> s[i];
      if (s[i].size() > 1) top.insert(s[i][0]);
      for (int j = 0; j < s[i].size(); j++)
	cs.push_back(s[i][j]);
    }
    sort(ISEQ(cs));
    cs.erase(unique(ISEQ(cs)), cs.end());
    res = 0;
    m = cs.size();
    for (int i = 0; i < 10; i++)
      used[i] = false;
    calc(0);
    cout << res << endl;

  }
}