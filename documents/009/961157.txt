#include <iostream>
#include <cstdio>
#include <cstring>
#include <cstdlib>
#include <cmath>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <queue>
#include <stack>
#include <algorithm>

using namespace std;

#define rep(i,j) REP((i), 0, (j))
#define REP(i,j,k) for(int i=(j);(i)<(k);++i)
#define between(a,x,b) ((a)<=(x)&&(x)<=(b))
#define Y first
#define X second
#define INF 1 << 30

int t, n;
int dy[] = {1, 1, 0, -1, -1, 0}, dx[] = {0, 1, 1, 0, -1, -1};

int main(){
  while(scanf("%d%d", &t, &n) && t+n){
    int board[300][300] = {};
    rep(i, 300) rep(j, 300) board[i][j] = INF;
    int x, y;
    rep(i, n){
      scanf("%d%d", &x, &y); 
      board[y+100][x+100] = -1;
    }

    scanf("%d%d", &x, &y); 
    board[y+100][x+100] = 0;
    //    printf("%d %d\n", y+100, x+100);
    queue<pair<int,int> >q;
    q.push(make_pair(y+100, x+100));
    for(int k = 1; k <= t; k++){
      //      printf("%d\n", k);
      int qsize = (int)q.size();
      rep(i, qsize){
	pair<int, int>p = q.front(); q.pop();
	//	printf("%d %d\n", p.Y, p.X);
	rep(j, 6){
	  int nx = p.X + dx[j], ny = p.Y + dy[j];
	  //	  printf("%d %d\n", ny, nx);
	  if(board[ny][nx] <= k) continue;
	  board[ny][nx] = k;
	  q.push(make_pair(ny, nx));
	}
      }

      /*      REP(i, 90, 110){
	REP(j, 90, 110) printf(board[i][j] != INF?"%2d":" N", board[i][j]);
	puts("");
	} */
    }
    int res = 0;
    rep(i, 300) rep(j, 300) if(board[i][j] >= 0 && board[i][j] < INF) res++;



    printf("%d\n", res);
  }
  return 0;
}