#include<iostream>
#include<vector>
#include<algorithm>

#define MAX_V 510
#define INF (1<<29)

using namespace std;

struct edge{int to,cap,rev;};

vector<edge>G[MAX_V];

void add_edge(int from,int to,int cap){
  G[from].push_back((edge){to,cap,G[to].size()});
  G[to].push_back((edge){from,0,G[from].size()-1});
} 

bool used[MAX_V];

int dfs(int v,int t,int f){
  if(v==t)return f;
  used[v]=true;
  for(int i=0;i<G[v].size();i++){
    edge &e=G[v][i];
    if(e.cap>0 && !used[e.to]){
      int d=dfs(e.to,t,min(e.cap,f));
      if(d>0){
	e.cap-=d;
	G[e.to][e.rev].cap+=d;
	return d;
      }
    }
  }
  return 0;
}


int max_flow(int s,int t){
  int flow=0;
  while(true){
    fill(used,used+MAX_V,false);
    int f=dfs(s,t,INF);
    if(f==0)return flow;
    flow+=f;
  }
}

int flow_back(int s,int t){
  int flow=0;
  fill(used,used+MAX_V,false);
  int f=dfs(s,t,1);
  if(f==0)return flow;
  flow+=f;
}

int main(void){

  int N,E,Q;
  cin >> N >> E >> Q;
  N--;
  vector<int>F(E),T(E),M(Q),A(Q),B(Q);

  for(int i=0;i<E;i++){
    cin >> F[i] >> T[i];
    F[i]--,T[i]--;
    add_edge(F[i],T[i],1);
    add_edge(T[i],F[i],1);
  }

  for(int i=0;i<Q;i++){
    cin >> M[i] >> A[i] >> B[i];
    A[i]--,B[i]--;
    bool fg=false;
    for(int j=0;j<G[A[i]].size();j++)fg|=G[A[i]][j].to==B[i];
    if(!fg)add_edge(A[i],B[i],0);
    fg=false;
    for(int j=0;j<G[B[i]].size();j++)fg|=G[B[i]][j].to==A[i];
    if(!fg)add_edge(B[i],A[i],0);
  }
  
  int res=max_flow(0,N);
  
  for(int i=0;i<Q;i++){
    if(M[i]==1){
      for(int j=0;j<G[A[i]].size();j++){
	edge &e=G[A[i]][j];
	if(e.to==B[i]){
	  e.cap=1;
	  G[e.to][e.rev].cap=0;
	}
      }

      for(int j=0;j<G[B[i]].size();j++){
	edge &e=G[B[i]][j];
	if(e.to==A[i]){
	  e.cap=1;
	  G[e.to][e.rev].cap=0;
	}
      }

      res=max_flow(0,N);
      cout << res/2 << endl;
    }
    else {
      int C=0;
     for(int j=0;j<G[A[i]].size();j++){
	edge &e=G[A[i]][j];
	if(e.to==B[i]){
	  C=max(C,e.cap);
	  e.cap=0;
	  G[e.to][e.rev].cap=0;
	}
      }

     for(int j=0;j<G[B[i]].size();j++){
	edge &e=G[B[i]][j];
	if(e.to==A[i]){
	  C=max(C,e.cap);
	  e.cap=0;
	  G[e.to][e.rev].cap=0;
	}
      }

      if(C>0)cout << res << endl;
      else if(C==0){
	flow_back(N,B[i]);
	flow_back(A[i],0);
	res--;
	cout << res << endl;
      }
    }
  }
  
  return 0;
}