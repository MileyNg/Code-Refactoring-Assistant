#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <functional>
#include <numeric>
#include <cmath>
#include <cstring>
#include <queue>
#include <stack>
#include <set>

using namespace std;

#define ALL(co) co.begin(), co.end()

typedef long long LL;
typedef pair<int, int> P;
typedef pair<P, P> PP;
typedef vector<int> Array;
typedef vector<int> LArray;

const int INF = 1 << 29;
const LL LINF = 1LL << 60;

int itiv;
inline int getInt() { return (cin >> itiv, itiv); }
void readAll(Array& vec, int n) { for (int i = 0; i < n; i++) cin >> vec[i]; }
inline bool between(int first, int last, int n) { return first <= n && n <= last; }
inline bool inRange(int begin, int end, int n) { return begin <= n && n < end; }
inline bool inRange(int size, int n) { return 0 <= n && n < size; }

int m, n;
int dx[] = { -1, 0, 1, 0 }, dy[] = { 0, -1, 0, 1 };
int dr[] = { 0, -1, 0, 1 }, dc[] = { -1, 0, 1, 0 };

set<int> ans;
Array cards;

void dfs(int idx, int pre, int rem)
{
	if(rem == 0)
	{
		ans.insert(pre);
		return;
	}
	if(idx == n) return;
	dfs(idx + 1, pre, rem);
	if(cards[idx] >= 10)
		dfs(idx + 1, pre * 100 + cards[idx], rem - 1);
	else dfs(idx + 1, pre * 10 + cards[idx], rem - 1);
}

int main(void)
{
	while(cin >> n && n)
	{
		ans.clear();
		int k = getInt();
		cards.resize(n);
		readAll(cards, n);
		dfs(0, 0, k);
		cout << ans.size() << endl;
	}
	return 0;
}