#include <bits/stdc++.h>

#define rep_(v, f, l) for (int v = (f), v##_ = (l); v < v##_; ++v)
#define rep(v, n) rep_(v, 0, n)
#define lep(v, n) rep_(v, 1, n + 1)
#define rrep_(v, f, l) for (int v = (l), v##_ = (f); v >= v##_; --v)
#define rrep(v, n) rrep_(v, 0, n - 1)
#define rlep(v, n) rrep_(v, 1, n)
#define show_a(a, size) rep(a##_it, size) std::cout << a[a##_it] << " \n"[a##_it == a##_it_ - 1];
#define show_v(v) show_a(v, v.size())
#define eachv(v, i) rep(i, v.size())
#define reachv(v, i) rrep(i, v.size())
#define debug(x) std::cerr << #x << " = " << x << "\n";

using namespace std;

typedef long long int lint;

static inline int in(){ int x; scanf("%d", &x); return x; }
static inline lint inl(){ lint x; scanf("%lld", &x); return x; }

int main()
{
    int n = in();
    vector<int> score(n + 1, 0);
    rep(i, n * (n - 1) / 2){
        int a, b;
        int a_p, b_p;
        a = in();
        b = in();
        a_p = in();
        b_p = in();
        if (a_p == b_p){
            score[a] += 1;
            score[b] += 1;
        }
        else if (a_p > b_p){
            score[a] += 3;
        }
        else {
            score[b] += 3;
        }
    }
    lep(i, n){
        int rank = 1;
        lep(j, n){
            if (score[i] < score[j]) rank++;
        }
        printf("%d\n", rank);
    }

    return (0);
}