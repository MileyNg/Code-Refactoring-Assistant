#include <iostream>
#include <iomanip>
#include <cassert>
#include <algorithm>
#include <functional>
#include <vector>
#include <string>
#include <cstring>
#include <stack>
#include <queue>
#include <map>
#include <bitset>
#include <sstream>
#include <istream>
#include <cmath>
#include <cstdio>

using namespace std;

#define vci vector<int>
#define vcs vector<string>
#define pb push_back
#define sz size()
#define mapii map<int, int>
#define mapci map<char, int>
#define mapsi map<string, int>
#define all(x) x.begin(), x.end()
#define minit(a, i) memset(a, i, sizeof(a));

#define for_(i, a, b) for (int i=(int)a; i<(int)b; i++)
#define for_d(i, a, b) for (int i=(int)a-1; i>=b; i--)
#define for_r(i, a, b, c) for (int i=(int)a; i<(int)b; i += c)
#define for_dr(i, a, b, c) for (int i=(int)a-1; i>=b; i -= c)
#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)

typedef long long ll;

const int iINF = 2147483647;
const ll lINF = 9223372036854775807;

template <class T> inline void dbg(T t) { cout << t << endl; }



#define MAX 10

int main() {
	vci dist(MAX);
	int vi, vj; char c;
	
	while (cin >> dist[0]) {
		for_(i, 1, MAX) {
			int d;
			cin>>c>>d;
			dist[i] = dist[i-1] + d;
		}
		cin >>c>> vi>>c >> vj;
		
		double lb = 0.0, rb = (double)dist[MAX-1]/(double)max(vi,vj);
		while (rb-lb>1e-9) {
			double mb = (lb+rb)/2.;			
			double pi = (double)vi*mb, pj = (double)dist[MAX-1] - (double)vj*mb;
			
			if (pi==pj) { lb = mb; break; }
			if (pi < pj) lb = mb;
			else rb = mb;
		}
		
		double p = vi*lb;
		for_(i, 0, MAX) if ((double)dist[i]>=p) {
			cout << i+1 << endl; break;
		}
	}	
	
	return 0;
}