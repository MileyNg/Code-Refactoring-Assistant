#include <iostream>
#include <queue>
#include <algorithm>

#define rep(i,n) for(int (i)=0;(i)<(n);(i)++)
using namespace std;


bool table[55][55];

struct state{
	int tx;
	int ty;
	int kx;
	int ky;
	int t;
};

int x,y;
int tx,ty;
int kx,ky;

bool check(int cx,int dx,int cy,int dy){
	if(0<=cx+dx&&cx+dx<x&&0<=cy+dy&&cy+dy<y&&(!table[cx+dx][cy+dy]))
		return true;
	else
		return false;
}

bool visited[55][55][55][55];


int dx[4]={1,0,-1,0};
int dy[4]={0,-1,0,1};


int bfs(void){
	rep(i,55)rep(j,55)rep(k,55)rep(l,55) visited[i][j][k][l]=false;
	state init;
	init.tx=tx;init.ty=ty;
	init.kx=kx;init.ky=ky;
	init.t=0;
	queue<state> q;

	q.push(init);
	visited[init.tx][init.ty][init.kx][init.ky]=true;

	while(!q.empty()){
	//	cout << "check" << endl;
		state cur=q.front();q.pop();
		if(cur.tx==cur.kx&&cur.ty==cur.ky)
			return cur.t;

		if(cur.t>=100)
			continue;
	//	cout << "check" << endl;
		rep(i,4){
			state next=cur;
			if(check(cur.tx,dx[i],cur.ty,dy[i])){
				next.tx+=dx[i];
				next.ty+=dy[i];
			}
			if(check(cur.kx,dx[(i+2)%4],cur.ky,dy[(i+2)%4])){
				next.kx+=dx[(i+2)%4];
				next.ky+=dy[(i+2)%4];
			}
			next.t++;
			if(!visited[next.tx][next.ty][next.kx][next.ky]){
				visited[next.tx][next.ty][next.kx][next.ky]=true;
				q.push(next);
			}
		//	cout << next.tx << " " << next.ty << endl; 
		//	cout << "check" << endl;
		}
	}
	return -1;
}

int main(void){
	
	while(cin >> x >> y,x|y){
		
		cin >> tx >> ty;
		cin >> kx >> ky;
		tx--;ty--;kx--;ky--;
		rep(i,y)rep(j,x) cin >> table[j][i];
		int res=bfs();
		if(res==-1)
			cout << "NA" << endl;
		else
			cout << res << endl;
	}
	return 0;
}