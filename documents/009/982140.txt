#include<iostream>
#include<vector>
#define REP(i,n) for(int i=0;i<(int)(n);i++)
using namespace std;

#define MAX_V 40
struct node{
  int id,parent,left,right,sibling;
  node():id(0),parent(-1),left(-1),right(-1),sibling(-1){}
};
node nodes[MAX_V]{};

void set_node(int id, int left,int right){
  nodes[id].id=id;
  nodes[id].left=left;
  nodes[id].right=right;
  if(left>=0){
    nodes[left].parent=id;
    nodes[left].sibling=right;
  }
  if(right>=0){
    nodes[right].parent=id;
    nodes[right].sibling=left;
  }
}

int main(){
  cin.tie(0);
  ios::sync_with_stdio(false);

  vector<int> pre;
  vector<int> in;
  vector<int> post;
  int n; cin>>n;
  REP(i,n) {
    int tmp; cin>>tmp;
    pre.push_back(tmp);
  }
  REP(i,n) {
    int tmp; cin>>tmp;
    in.push_back(tmp);
  }
  int looked=-1;
  while(true){
    bool b=false;
    for(int i=0;i<n-2;i++){
      for(int j=0;j<n-2;j++){
	if(pre[i]==in[j+1]&&pre[i+1]==in[j]&&pre[i+2]==in[j+2]){
	  if(pre[i+1]>0) post.push_back(pre[i+1]);
	  if(pre[i+2]>0) post.push_back(pre[i+2]);
	  if(pre[i]>0) post.push_back(pre[i]);
	  auto iter=pre.begin();
	  REP(k,i) iter++;
	  pre.erase(iter);
	  pre.erase(iter);
	  (*iter)=looked;
	  iter=in.begin();
	  REP(k,j) iter++;
	  in.erase(iter);
	  in.erase(iter);
	  (*iter)=looked;
	  looked--;
	  b=true; break;
	}
      }
      if(b) break;
    }
    if(pre.size()==1) break;
  }
  for(int a:post){
    if(a==*(--post.end())) cout<<a<<endl;
    else cout<<a<<" ";
  }
}