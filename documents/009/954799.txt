#include <iostream>
#include <iomanip>
#include <sstream>
#include <vector>
#include <array>
#include <list>
#include <stack>
#include <queue>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <string>
#include <algorithm>
#include <numeric>
#include <utility>
#include <cstdlib>
#include <ctime>
#include <cstdint>
#include <cmath>

#define FOR(i,k,n)  for(int i = (k);i < (n);++i)
#define REP(i,n)    FOR(i,0,n)
#define EACH(i,x)   for(auto & i : x)
#define ALL(x)      begin(x),end(x)

using namespace std;

typedef vector<int> vecint;

int root(int i,vecint& p){
  if(p[i] != i+1)
    p[i] = root(p[i]-1,p);
  return p[i];
}
void join(int i,int j,vecint& p){
  p[root(i,p)-1] = root(j,p);
}

int main()
{
  while(true){
    int w,h;cin>>w>>h;
    if(!(w||h))break;
    vector<vecint> m(h+2,vecint(w+2));
    REP(i,h)REP(j,w)cin>>m[i+1][j+1];
    int n=(w+2)*(h+2);
    vecint p(n);
    REP(i,n)p[i]=i+1;
    REP(i,h)REP(j,w){
      int di[8] = {1,1,1,0,-1,-1,-1,0};
      int dj[8] = {1,0,-1,-1,-1,0,1,1};
      REP(k,8){
        int ni=i+di[k];
        int nj=j+dj[k];
        if (m[i+1][j+1] && m[ni+1][nj+1]){
          int ijn = (i+1)*(w+2)+(j+1);
          int nijn = (ni+1)*(w+2)+(nj+1);
          join(ijn,nijn,p);
        }
      }
    }
    set<int> s;
    REP(i,h)REP(j,w){
      if(m[i+1][j+1]){
        int ijn = (i+1)*(w+2)+(j+1);
        s.insert(root(ijn,p));
      }
    }
    cout<<s.size()<<endl;
  }
  return 0;
}