#include <string>
#include <vector>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <map>
#include <list>
#include <set>
#include <numeric>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <climits>
#include <cfloat>
#include <ctime>
#include <complex>
#include <cassert>
#include <tuple>
using namespace std;
typedef long long LL;
typedef pair<int,int> P;

int main() {
	while(1)
	{
	double dp[50*100][50]={0};
	int E[100]={0},A[100]={0};
	int X,Y,Z;
	cin >> X >> Y >> Z;
	//cout << X << ", " << Y << ", " << Z << endl;
	if(X==0&&Y==0&&Z==0){
		break;
	}
	vector<int> V;
	for(int i=0;i<X;i++){
		int v;
		cin >> v;
		V.push_back(v);
	}
	for(int i=0;i<Z;i++){
		int n;
		cin >> n;
		cin >> E[n] >> A[n];
	}

	for(int i=Y-1;i>=0;i--){
		//cout << i << endl;
		for (int j=0;j<=i*100;j++)
		{
			double s=0;
			for(auto v:V){
				if (i+v>=Y){
					s+=j;
					continue;
				}
				switch(E[i+v]){
					case 0:
						s+=dp[j][i+v];
						break;
					case 1:
						if(i+v+A[i+v]>=Y){
							s+=j;
						}
						else
						{
							s+=dp[j][i+v+A[i+v]];
						}
						break;
					case 2:
						s+=dp[j+A[i+v]][i+v];
						break;
					case 3:
						s+=dp[max(j-A[i+v],0)][i+v];
						break;
				}
			}
			dp[j][i]=s/V.size();
			//cout << dp[j][i] << ", ";
		}
		//cout << endl;
	}
	/*
	for(int i=0;i<Y;i++){
		cout << i << ": " << dp[i] << ", ";
	}*/
	cout << (int)(dp[0][0]+1e-9) << endl;
	}
}