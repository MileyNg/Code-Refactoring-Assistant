#include<iostream>
#include<string>
#include<map>
#include<vector>
#include<queue>
using namespace std;

#define N 107
#define INF 10000007

typedef pair<int, int> P;

int main() {
	int n;
	string s;
	int cost[N];
	string go[N];
	map<string, int> label;
	vector<string> lstr;
	cin >> n;
	for(int i=0; i<n; ++i) {
		cin >> s;
		if(s=="goto") {
			cin >> s;
			go[i] = s.substr(0, s.length()-1);
		}else {
			label[s.substr(0, s.length()-1)] = i;
		}
	}
	priority_queue<P, vector<P>, greater<P> > q;
	for(int i=0; i<n+1; ++i) cost[i] = INF;
	q.push(P(0, 0));
	cost[0] = 0;
	while(!q.empty()) {
		int li = q.top().second, c = q.top().first; q.pop();
		if(cost[li] < c) continue;
		if(!go[li].empty()) {
			int jmp = label[go[li]];
			if(cost[li] < cost[jmp]) {
				cost[jmp] = cost[li];
				q.push(P(cost[jmp], jmp));
			}
			if(cost[li] + 1 < cost[li+1]) {
				cost[li+1] = cost[li] + 1;
				if(li!=n) q.push(P(cost[li+1], li+1));
			}
		}else {
			if(cost[li] < cost[li+1]) {
				cost[li+1] = cost[li];
				if(li!=n) q.push(P(cost[li+1], li+1));
			}
		}
	}
	cout << cost[n] << endl;
	return 0;
}