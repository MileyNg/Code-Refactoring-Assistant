#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <tuple>
#include <map>

using namespace std;

int main(){
	int n;
	while (cin >> n, n){
		vector<tuple<string, char, string, int>> v(n);
		vector<int> used(n);

		map<string, pair<int, int>> comm_minmax;
		map<string, pair<int, int>> comm_sumcnt;
		map<string, pair<int, int>> dealer;

		for (int i = 0; i < n; ++i){
			string a, b, c;
			int x;
			cin >> a >> b >> c >> x;
			v[i] = make_tuple(a, b[0], c, x);
			dealer[a];
			int idx = -1, opt = x;
			bool buy = b[0] == 'B';
			for (int j = 0; j < i; ++j){
				if (used[j]) continue;
				if (a != get<0>(v[j]) && b[0] != get<1>(v[j]) && c == get<2>(v[j])){
					int y = get<3>(v[j]);
					if (buy && y <= opt){
						opt = y - 1, idx = j;
					}
					if (!buy && y >= opt){
						opt = y + 1, idx = j;
					}
				}
			}
			if (idx < 0) continue;
			used[i] = used[idx] = 1;
			string buyer = a, seller = get<0>(v[idx]);
			if (!buy) swap(buyer, seller);

			if (buyer == seller) continue;
			auto &c1 = comm_minmax[c], &c2 = comm_sumcnt[c], &db = dealer[buyer], &ds = dealer[seller];
			int val = (x + get<3>(v[idx])) / 2;
			c1.first = c1.first ? min(c1.first, val) : val, c1.second = c1.second ? max(c1.second, val) : val;
			c2.first += val, ++c2.second;
			db.first += val, ds.second += val;
		}

		for (auto &c : comm_minmax){
			int mean = comm_sumcnt[c.first].first / comm_sumcnt[c.first].second;
			cout << c.first << ' ' << c.second.first << ' ' << mean << ' ' << c.second.second << '\n';
		}
		cout << "--\n";
		for (auto &d : dealer){
			cout << d.first << ' ' << d.second.first << ' ' << d.second.second << '\n';
		}
		cout << "----------\n";
	}

	return 0;
}