#include <cstdio>
#include <algorithm>
#include <iostream>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <string>
#include <string.h>
#include <vector>
#include <queue>
using namespace std;

const int INF = 100000000;

struct edge {
	int to, cost;
};

typedef pair<int, int> P;

vector<edge> G[101];
int d[101];

void dijkstra(int s, int n) {
	priority_queue<P, vector<P>, greater<P> > que;
	fill(d, d+n+1, INF);
	d[s] = 0;
	que.push(P(0, s));

	while (!que.empty()) {
		P p = que.top(); que.pop();
		int v = p.second;
		if (d[v] < p.first) continue;
		for (int i = 0; i < G[v].size(); i++) {
			edge e = G[v][i];
			if (d[e.to] > d[v] + e.cost) {
				d[e.to] = d[v] + e.cost;
				que.push(P(d[e.to], e.to));
			}
		}
	}
}

int main() {
	int n;
	cin >> n;
	vector<pair<string, bool> > vec;
	for (int i = 0; i < n; i++) {
		string s;
		cin >> s;
		if (s != "goto") {
			vec.push_back(make_pair(s.substr(0, s.size()-1), false));
		} else {
			string t;
			cin >> t;
			vec.push_back(make_pair(t.substr(0, t.size()-1), true));

		}
	}

	vector<int> jump(n);
	for (int i = 0; i < n; i++) {
		if (vec[i].second) {
			for (int j = 0; j < n; j++) {
				if (vec[i].first == vec[j].first and i != j) {
					jump[i] = j;
					break;
				}
			}
		}
	}

	for (int i = 0; i < n; i++) {
		if (vec[i].second) {
			G[i].push_back((edge){jump[i], 0});
		} else {
			G[i].push_back((edge){i+1, 0});
			int index = i+1;
			while (index < n and vec[index].second) {
				G[i].push_back((edge){index+1, index-i});
				index++;
			}
		}
	}
	dijkstra(0, n);
	cout << d[n] << endl;
}