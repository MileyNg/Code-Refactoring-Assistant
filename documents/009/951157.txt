////   template  ///////////////////////////////////////////////////////
#include <stdlib.h>
#include <sys/time.h>
#include <stdio.h>
#include <sys/resource.h>
#include <iostream>
#include<utility>
#include<vector>
using namespace std;

class timer{
	enum KIND{ REAL, CPU }; // real_time or cpu_time
	double t0; // start
	double t1; // end
	KIND kind_of_time; // default is real_time
	double get_realtime(){struct timeval tv; gettimeofday(&tv, NULL);
		return tv.tv_sec + (double)tv.tv_usec*1e-6;}
	double get_cputime(){struct rusage RU; getrusage(RUSAGE_SELF, &RU); 
		return RU.ru_utime.tv_sec + (double)RU.ru_utime.tv_usec*1e-6;}
public:
	timer(){kind_of_time = REAL;}
	void set(KIND k){kind_of_time = k;}
	void start(){t0 = get_realtime();}
	void stop(){t1 = get_realtime();}
	void print(){printf("TotalTime : %.3fsec\n", t1-t0);}
};
////////////////////////////////////////////////////////////////////////

int lcm(int x, int y);
int gcd(int a, int b);

int main()
{
	int n;
	cin >> n;
	vector<int> v;
	for(int i=0; i<n; i++){
		int input;
		cin >> input;
		v.push_back(input);
	}

	int x, y;
	vector<int>::iterator i;
	x = v.at(0);
	for(i=v.begin()+1; i!=v.end(); i++){
		y = *i;
		x = lcm(x, y);
	}
	cout << x << endl;
	
    return 0;
}

int gcd(int a, int b)
{
	int r;
	while(1){
		r = a%b;
		if( !r ){ return b; }
		else{ a = b; b = r; }
	} 
}


int lcm(int x, int y) 
{
	if(x<y)swap(x, y);
	
	if(!(x%y)) return x;
	
	return x*y/gcd(x, y);
}