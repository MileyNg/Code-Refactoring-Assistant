#include<algorithm>
#include<iostream>
#include<stack>

using namespace std;

struct Node{
 Node *right;
 Node *left;
 Node *parent;
 int key;
public:
 Node(Node *r,Node *l,Node *p,int k) : right(r), left(l), parent(p), key(k){};
};

class Tree{
 Node *root;
 enum ORDER {PREORDER = 0, INORDER, POSTORDER};
public:
 Tree(){root = 0;}


 void insert(int v){
  Node *z = new Node(0,0,0,v);
  Node *y = 0;
  Node *x = root;
  while(x != 0){
   y = x;
   if(z->key < x->key){
    x = x->left;
   }else{
    x = x->right;
   }
  }
  z->parent = y;
  if( y == 0){
   root = z;
  }else if(z->key < y->key){
   y->left = z;
  }else{
   y->right = z;
  }
 } 

 void outputMain(Tree tree){
  outputOrder(tree, INORDER);
  outputOrder(tree, PREORDER);
 }

 void outputOrder(Tree tree, enum ORDER order = PREORDER){

  if(tree.root == 0) return ;

  Node* cur = tree.root;
  Node* prev = cur->parent;
  while(cur != 0){
   if(cur->parent == prev){

    if(order == PREORDER) cout << " " << cur->key;

    if(cur->left != 0){
     prev = cur;
     cur = cur->left;
     continue;
    }else{
     prev = cur->left;
    }
   }

   if(prev == cur->left){
    
    if(order == INORDER) cout << " " << cur->key;

    if(cur->right != 0){
     prev = cur;
     cur = cur->right;
     continue;
    }else{
     prev = cur->right;
    }
   }

   if(prev == cur->right){
    
    if(order == POSTORDER) cout << " " << cur->key;

    prev = cur;
    cur = cur->parent;
   }
  }
 cout << endl;
 }
};

int main(){
 std::ios::sync_with_stdio(false);
 std::cin.tie(0); 

 Tree tree;

 int n = 0;
 cin >> n;

 for(int i=0; i < n; i++){
  string str = "";
  int num = -1;
  cin >> str;
  if(str == "insert"){
   cin >> num;
   tree.insert(num); 
  }else if(str == "print"){
   tree.outputMain(tree); 
  }
 }

 
 return 0;
}