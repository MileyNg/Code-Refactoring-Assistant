#include <iostream>
#include <vector>
#include <string>
#include <queue>

using namespace std;

int H, W, N;

int Sx, Sy;
int st[10], ed[10];

vector<string> map, smap;

int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, -1, 0, 1};

struct State {
	int x, y, d;
	State (int _x, int _y, int _d) : x(_x), y(_y), d(_d) {}
};

int bfs(int sx, int sy, int ex, int ey) {
	queue<State> q;
	q.push(State(sx, sy, 0));
	smap[sy][sx] = '-';
	
	while (!q.empty()) {
		State s = q.front(); q.pop();
		
		if (s.x == ex && s.y == ey) return s.d;
		
		for (int d=0; d<4; d++) {
			int nx = s.x + dx[d], ny = s.y + dy[d];
			
			if (!(0<=nx && nx<W && 0<=ny && ny<H)) continue;
			if (smap[ny][nx]=='-' || smap[ny][nx]=='X') continue;
			
			smap[ny][nx] = '-';
			q.push(State(nx, ny, s.d+1));
		}
	}
	
	return -1;
}

void solve() {
	int ans = 0;
	smap = map;
	ans += bfs(Sx, Sy, st[1], ed[1]);
	
	for (int i=2; i<=N; i++) {
		smap = map;
		ans += bfs(st[i-1], ed[i-1], st[i], ed[i]);
	}
	
	cout << ans << endl;
}

int main() {
	cin >> H >> W >> N;
	for (int i=0; i<H; i++) {
		string s; cin >> s;
		map.push_back(s);
		for (int j=0; j<W; j++) {
			if (s[j]=='S') { Sx = j; Sy = i; }
			if ('1' <= s[j] && s[j] && '9') { st[s[j]-'0'] = j; ed[s[j]-'0'] = i; }
		}
	}
	
	solve();
	
	return 0;
}