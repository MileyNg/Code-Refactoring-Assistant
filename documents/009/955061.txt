#include <bits/stdc++.h>

#define rep_(v, f, l) for (int v = (f), v##_ = (l); v < v##_; ++v)
#define rep(v, n) rep_(v, 0, n)
#define lep(v, n) rep_(v, 1, n + 1)
#define rrep_(v, f, l) for (int v = (l), v##_ = (f); v >= v##_; --v)
#define rrep(v, n) rrep_(v, 0, n - 1)
#define rlep(v, n) rrep_(v, 1, n)
#define show_a(a, size) rep(a##_it, size) std::cout << a[a##_it] << " \n"[a##_it == a##_it_ - 1];
#define show_v(v) show_a(v, v.size())
#define eachv(v, i) rep(i, v.size())
#define reachv(v, i) rrep(i, v.size())
#define debug(x) std::cerr << #x << " = " << x << "\n";

using namespace std;

typedef long long int lint;

static inline int in(){ int x; scanf("%d", &x); return x; }
static inline lint inl(){ lint x; scanf("%lld", &x); return x; }

int main()
{
    int n, m;
    n = in();
    m = in();
    vector<int> deck;
    rep(i, 2 * n) deck.push_back(i);
    rep(i, m){
        int k = in();
        vector<int> next_deck;
        if (k == 0){
            rep(j, n){
                next_deck.push_back(deck[j]);
                next_deck.push_back(deck[j + n]);
            }
        }
        else {
            rep(j, 2 * n - k){
                next_deck.push_back(deck[k + j]);
            }
            rep(j, k){
                next_deck.push_back(deck[j]);
            }
        }
        deck = next_deck;
    }
    eachv(deck, i){
        printf("%d\n", deck[i] + 1);
    }

    return (0);
}