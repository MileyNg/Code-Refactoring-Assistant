#include <algorithm>
#include <iostream>
#include <cstdio>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
using namespace std;

#define ISEQ(c) (c).begin(), (c).end()
typedef long long ll;

int main() {
  int n, m;
  int fm = (m+1) / 2;
  int sm = fm;
  scanf("%d%d", &n, &m);
  vector<int> s = vector<int>(n);
  vector<int> t = vector<int>(n);
  for (int i = 0; i < n ; i++) {
    scanf("%d%d", &s[i], &t[i]);
  }
  vector<ll> p = vector<ll>(m+2);
  for (int i = 1; i <= m; i++) {
    scanf("%d", &p[i]);
  }
  p[m+1] = 10000000000LL;
  sort(ISEQ(p));
  int fp[fm], sp[sm];
  fp[0] = p[1];
  sp[0] = p[2] - p[1];
  for (int i = 3; i <= m+1; i++) {
    if (i % 2 == 1) {
      fp[i/2] = fp[i/2-1] + p[i] - p[i-1];
    } else {
      sp[i/2-1] = sp[i/2-2] + p[i] - p[i-1];
    }
  }

  ll res = 0LL;
  for (int i = 0; i < n; i++) {
    int a = lower_bound(ISEQ(p), s[i]) - p.begin();
    int b = lower_bound(ISEQ(p), t[i]) - p.begin();
    if (a != b) {
      int add = 0;
      if (a % 2 == 0 and b % 2 == 0) {
	add = sp[b/2-1] - sp[a/2-1] + p[a] - s[i] - p[b] + t[i];
      } else if (a % 2 == 0 and b % 2 == 1) {
	if (b > 1) add = sp[b/2-1] - sp[a/2-1] + p[a] - s[i];
	else add = -sp[a/2-1] + p[a] - s[i];
      } else if (a % 2 == 1 and b % 2 == 0) {
	add = fp[b/2-1] - fp[a/2] + p[a] - s[i];
      } else {
	add = fp[b/2] - fp[a/2] + p[a] - s[i] -p[b] + t[i];
      }
      if (a < b)
	res += add;
      else
	res -= add;
    }  else {
      res += abs(s[i] - t[i]);
    }
  }
  printf("%d\n", res);
}