#include<iostream>
#include<vector>
#include<algorithm>
#include<utility>

using namespace std;

typedef pair<int,int> P;

bool compare_y(P a,P b){
  return a.second<b.second;
}

int sqr(int a){
  return a*a;
}

int closest_pair(P *a,int n){
  if(n<=1)return 1<<30;
  int m=n/2;
  int x=a[m].first;
  int d=min(closest_pair(a,m),closest_pair(a+m,n-m));
  inplace_merge(a,a+m,a+n,compare_y);
  vector<P> b;
  for(int i=0;i<n;i++){
    if(sqr(a[i].first-x)>=d)continue;
    for(int j=0;j<b.size();j++){
      int dx=a[i].first-b[b.size()-1-j].first;
      int dy=a[i].second-b[b.size()-1-j].second;
      if(dy*dy>=d)break;
      d=min(d,dx*dx+dy*dy);
    }
    b.push_back(a[i]);
  }
  return d;
}

int main(){
  static P A[500000];
  int n;
  cin>>n;
  for(int i=0;i<n;i++){
    cin>>A[i].first>>A[i].second;
  }
  sort(begin(A),begin(A)+n);
  cout<<closest_pair(A,n)<<endl;
}