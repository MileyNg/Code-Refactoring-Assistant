#include <stdio.h>
#include <stdlib.h>
#include <memory.h>

typedef struct _taple{
	int index;
	int value;
}taple;

typedef struct _pointer{
	int x;
	int y;
}pointer;

int taple_sort( const void* pa, const void* pb) {
	taple a = *(taple*)pa;
	taple b = *(taple*)pb;
    return a.value - b.value;
}

int int_sort( const void* pa, const void* pb) {
	int a = *(int*)pa;
	int b = *(int*)pb;
    return b - a;
}

#define MAX 1000000
pointer fifo[MAX];

int solve(taple* data, int size, int left, int right) {
	int rp = 0;
	int wp = 0;
	int max = -100000000;
	
	fifo[wp].x = left;
	fifo[wp].y = right;
	wp++;
	while(rp<wp) {
		left = fifo[rp%MAX].x;
		right = fifo[rp%MAX].y;
		rp++;

		if(data[left].index < data[right].index && left < right) {
			if(data[right].value-data[left].value > max) {
				max = data[right].value-data[left].value;
			}
		}

		if(left < right) { 
			fifo[wp%MAX].x = left+1;
			fifo[wp%MAX].y = right;
			wp++;
			fifo[wp%MAX].x = left;
			fifo[wp%MAX].y = right-1;
			wp++;
		}
	}
	
	return max;
}

int main(void) {
	int i, n, val;
	taple data[200000];
	memset((char*)data, 0x00, sizeof(data));

	scanf("%d\n", &n);
	for(i=0;i<n;i++) {
		scanf("%d\n", &val);
		data[i].index = i;
		data[i].value = val;
	}
	
	qsort((void*)data , n , sizeof(data[0]), taple_sort);

	printf("%d\n", solve(data, n, 0, n-1));

	return 0;
}