#include <iostream>
#include <stack>

typedef std::stack<int> Tray;

bool moveNtoN(Tray tr[], int src, int dst){
    if((tr[src]).empty() ||
        !(tr[dst]).empty() && (tr[src]).top() < (tr[dst]).top()){
        return false;
    }
    (tr[dst]).push((tr[src]).top());
    (tr[src]).pop();
    return true;
}

bool ifSorted(Tray tr[]){
    return ((tr[1]).empty() && ((tr[0]).empty() || (tr[2].empty())));
}

int solveCenter(Tray tr[], int m, int lastMove){
    for(int i = 1; i <= m; i++){
        if(lastMove != 1 && moveNtoN(tr, 0, 1)){
            lastMove = 0;
        }
        else if(lastMove != 0  && moveNtoN(tr, 1, 0)){
            lastMove = 1;
        }
        else if(lastMove != 3 && moveNtoN(tr, 1, 2)){
            lastMove = 2;
        }
        else if(lastMove != 2 && moveNtoN(tr, 2, 1)){
            lastMove = 3;
        }
        if(ifSorted(tr)){
            return i;
        }
    }
}

int solveLeft(Tray tr[], int m){
    if(moveNtoN(tr, 0, 1)){
        if(ifSorted(tr)){
            return 1;
        }
        int ret = solveCenter(tr, m - 1, 0) + 1;
        return ret ? ret : -1;
    }
    else if(moveNtoN(tr, 1, 0)){
        if(ifSorted(tr)){
            return 1;
        }
        int ret = solveCenter(tr, m - 1, 1) + 1;
        return ret ? ret : -1;
    }
}

int solveRight(Tray tr[], int m){
    if(moveNtoN(tr, 1, 2)){
        if(ifSorted(tr)){
            return 1;
        }
        int ret = solveCenter(tr, m - 1, 2) + 1;
        return ret ? ret : -1;
    }
    else if(moveNtoN(tr, 2, 1)){
        if(ifSorted(tr)){
            return 1;
        }
        int ret = solveCenter(tr, m - 1, 3) + 1;
        return ret ? ret : -1;
    }
}

int solve(Tray argTr[], int m){
    if(ifSorted(argTr)){
        return 0;
    }
    Tray tr[3];
    tr[0] = argTr[0];
    tr[1] = argTr[1];
    tr[2] = argTr[2];
    int ansl = solveLeft(tr, m);
    tr[0] = argTr[0];
    tr[1] = argTr[1];
    tr[2] = argTr[2];
    int ansr = solveRight(tr, m);
    if(ansl == -1 && ansr == -1){
        return -1;
    }
    else if(ansl == -1 || ansr == -1){
        return ansl > 0 ? ansl : ansr;
    }
    else{
        return ansl < ansr ? ansl : ansr;
    }
}

int main(){
    int n, m;
    while(1){
        std::cin >> n >> m;
        if(!(n || m)){
            break;
        }
        Tray trays[3];
        for(int col = 0; col < 3; col++){
            int nCups;                     // #cups on the line
            std::cin >> nCups;
            while(nCups--){
                int cup;
                std::cin >> cup;
                (trays[col]).push(cup);
            }
        }
        std::cout << solve(trays, m) << std::endl;
    }
    return 0;
}