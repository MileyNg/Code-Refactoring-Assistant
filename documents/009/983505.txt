#include <algorithm>
#include <iostream>
#include <cstdio>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
using namespace std;

#define ISEQ(c) (c).begin(), (c).end()
typedef long long ll;
typedef struct {
  int to, cost;
}edge;
typedef pair<int, int> P;

const int start = 2*30*60;
const int MAX_V = 2*30*60+1;
const int INF = 1000000000;
vector<edge> G[MAX_V];
int d[MAX_V];

int ctoi(char c) {
  if ('0' <= c and c <= '9')
    return (int)(c - '0');
  else if (c == 'T')
    return 0;
  else
    return (int)c;
}

void dijkstra(int s) {
  priority_queue<P, vector<P>, greater<P> > que;
  fill(d, d+MAX_V, INF);
  d[s] = 0;
  que.push(P(0, s));

  while (!que.empty()) {
    P p = que.top(); que.pop();
    int v = p.second;
    if (d[v] < p.first) continue;
    for (int i = 0; i < G[v].size(); i++) {
      edge e = G[v][i];
      if (d[e.to] > d[v] + e.cost) {
	d[e.to] = d[v] + e.cost;
	que.push(P(d[e.to], e.to));
      }
    }
  }
}

int main() {
  int lx[9] = {1, 2, 3, 1, 2, 1, 2, 1, 1};
  int ly[9] = {0, 0, 0, 1, 1, -1, -1, 2, -2};
  int rx[9] = {-1, -2, -3, -1, -2, -1, -2, -1, -1};
  int ry[9] = {0, 0, 0, 1, 1, -1, -1, 2, -2};
  while (true) {
    int w, h;
    scanf("%d%d", &w, &h);
    if (w == 0 and h == 0) break;

    int s[h][w];
    for (int i = 0; i < h; i++) {
      for (int j = 0; j < w; j++) {
	char c;
	cin >> c;
	s[i][j] = ctoi(c);
      }
    }
    
    for (int i = 0; i < MAX_V; i++)
      G[i].clear();

    vector<int> t;
    for (int i = 0; i < h; i++) {
      for (int j = 0; j < w; j++) {
	switch(s[i][j]) {
	case (int)('X'): break;
	case 0: 
	  t.push_back(2*(w*i+j));
	  t.push_back(2*(w*i+j)+1);
	  break;
	case (int)('S'):
	  G[start].push_back(edge{2*(w*i+j), 0});
	  G[start].push_back(edge{2*(w*i+j)+1, 0});
	default:
	  for (int k = 0; k < 9; k++) {
	    int x = j + lx[k], y = i + ly[k];
	    if (0 <= x and x < w and 0 <= y and y < h and s[y][x] != (int)('X') and s[y][x] != (int)('S')) {
	      G[2*(w*i+j)].push_back(edge{2*(w*y+x)+1, s[y][x]});
	    }
	  }

	  for (int k = 0; k < 9; k++) {
	    int x = j + rx[k], y = i + ry[k];
	    if (0 <= x and x < w and 0 <= y and y < h and s[y][x] != (int)('X') and s[y][x] != (int)('S')) {
	      G[2*(w*i+j)+1].push_back(edge{2*(w*y+x), s[y][x]});
	    }
	  }
	  break;
	}
      }
    }

    dijkstra(start);
    int res = INF;
    for (int i = 0; i < t.size(); i++) {
      res = min(res, d[t[i]]);
    }
    if (res < INF)
      printf("%d\n", res);
    else
      printf("-1\n");
  }
}