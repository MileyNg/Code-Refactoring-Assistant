#include <algorithm>
#include <iostream>
#include <cstdio>
#include <map>
#include <numeric>
#include <set>
#include <sstream>
#include <string>
#include <vector>
#include <queue>
using namespace std;

#define ISEQ(c) (c).begin(), (c).end()
typedef long long ll;
const int INF = 1000000000;

int main() {
  while (true) {
    int n ,m, l;
    scanf("%d%d%d", &n, &m, &l);
    if (n == 0) break;
    int dp[n][n][l+1];
    for (int i = 0; i < n; i++)
      for (int j = 0; j < n; j++) {
	int s = (i == j) ? 0 : INF;
	for (int k = 0; k <= l; k++)
	  dp[i][j][k] = s;
      }

    for (int i = 0; i < m; i++) {
      int a, b, d, e;
      scanf("%d%d%d%d", &a, &b, &d, &e);
      a--; b--;
      for (int j = 0; j <= l; j++) {
	if (j < d)
	  dp[a][b][j] = dp[b][a][j] = e;
	else
	  dp[a][b][j] = dp[b][a][j] = 0;
      }
    }

    for (int k = 0; k < n; k++) {
      for (int i = 0; i < n; i++) {
	for (int j = 0; j < n; j++) {
	  for (int a = 0; a <= l; a++) {
	    int mini = INF;
	    for (int b = 0; b <= a; b++) {
	      mini = min(dp[i][k][a-b] + dp[k][j][b], mini);
	      if (mini == 0) break;
	    }
	    dp[i][j][a] = min(mini, dp[i][j][a]);
	    if (mini == 0) {
	      break;
	    }
	  }
	}
      }
    }
    printf("%d\n", dp[0][n-1][l]);
  }  
}