#include <cstdio>
#include <cassert>
#include <functional>
#include <algorithm>
#include <iostream>
#include <vector>
#include <map>
#include <iterator>
#include <queue>
#include <utility>

using namespace std;

#define MW 20
#define MH 20
int W, H;
int F[MH][MW];

bool input() {
    scanf("%d %d\n", &W, &H);
    if (W == 0 && H == 0) return false;
    for (int i = 0; i < H; i++) {
        for (int j = 0; j < W; j++) {
            scanf("%d", &F[i][j]);
        }
    }
    return true;
}

#define INF (1<<28)
void dump() {
    for (int i = 0; i < H; i++) {
        for (int j = 0; j < W; j++) {
            cout << F[i][j] << " ";
        }
        cout << endl;
    }
}
int dfs(int y, int x) {
    //cout << "\"" << y << " " << x << "\"" << endl; dump(); cout << endl;
    static const int dy[] = {0, 1, 0, -1},
                     dx[] = {1, 0, -1, 0};
    int ans = INF;
    for (int i = 0; i < 4; i++) {
        int ny = y + dy[i],
            nx = x + dx[i];
        if (ny < 0 || ny >= H) continue;
        if (nx < 0 || nx >= W) continue;
        if (F[ny][nx] == 1) continue;
        ny = y, nx = x;
        while (true) {
            ny += dy[i];
            nx += dx[i];
            if (ny < 0 || ny >= H) break;
            if (nx < 0 || nx >= W) break;
            if (F[ny][nx] == 0) continue;
            if (F[ny][nx] == 1) {
                F[ny][nx] = 0;
                ans = min(ans, dfs(ny - dy[i], nx - dx[i]) + 1);
                F[ny][nx] = 1;
                break;
            }
            if (F[ny][nx] == 3) return 1;
        }
    }
    return ans;
}

void solve() {
    int y, x;
    for (int i = 0; i < H; i++) {
        for (int j = 0; j < W; j++) {
            if (F[i][j] == 2) {
                F[i][j] = 0;
                y = i;
                x = j;
                break;
            }
        }
    }
    int ans = dfs(y, x);
    printf("%d\n", ans <= 10 ? ans : -1);
}

int main() {
    while (input()) {
        solve();
    }
    return 0;
}