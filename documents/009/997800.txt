#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
typedef vector<int> vi;
#define loop(i,a,b) for(int i=(a); i<int(b); i++)
#define rep(i,b) loop(i,0,b)
#define all(c) (c).begin(), (c).end()

int const N = 100000+10000;
bool isp[N];
int ps[N / 2];
int c = 0;
void eratos(){
    rep(i, N) isp[i] = true;
    isp[0] = isp[1] = false;
    for (int i = 2; i < N; i++){
        if (!isp[i]) continue;
        ps[c++] = i;
        for (int j = i + i; j < N; j += i){
            isp[j] = false;
        }
    }
}

int solve(int n, int p){
    auto it = upper_bound(ps, ps + c, n);
    vi v(p*p, 1 << 30);
    rep(i, p)loop(j, i, p){
        v[i * p + j] = *(it + i) + *(it + j);
    }
    v.erase(lower_bound(all(v), 1 << 30), v.end());
    sort(all(v));
    return v[p - 1];
}

int main(){
    eratos();
    int n, p;
    while (cin >> n >> p && n!=-1 && p!=-1){
        cout << solve(n, p) << endl;
    }
}