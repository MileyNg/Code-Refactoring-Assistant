#include <algorithm>
#include <cstdlib>
#include <iostream>
#include <vector>
#include <sstream>
using namespace std;

#define dump(...) (cerr<<#__VA_ARGS__<<" = "<<(DUMP(),__VA_ARGS__).str()<<endl)

struct DUMP : ostringstream {
	template<class T> DUMP &operator,(const T &t) {
		if(this->tellp()) *this << ", ";
		*this << t;
		return *this;
	}
};

template<class T, class U>
ostream &operator<<(ostream &os, const pair<T, U> &p) {
	return os << '(' << p.first << ", " << p.second << ')';
}

template<class Tuple, unsigned Index>
void print_tuple(ostream &os, const Tuple &t) {}

template<class Tuple, unsigned Index, class Type, class... Types>
void print_tuple(ostream &os, const Tuple &t) {
	if(Index) os << ", ";
	os << get<Index>(t);
	print_tuple<Tuple, Index + 1, Types...>(os, t);
}

template<class... Types>
ostream &operator<<(ostream &os, const tuple<Types...> &t) {
	os << '(';
	print_tuple<tuple<Types...>, 0, Types...>(os, t);
	return os << ')';
}

template<class Iterator>
ostream &dump_range(ostream &, Iterator, const Iterator &);

template<class T>
ostream &operator<<(ostream &os, const vector<T> &c) {
	return dump_range(os, c.cbegin(), c.cend());
}

template<class Iterator>
ostream &dump_range(ostream &os, Iterator first, const Iterator &last) {
	os << '[';
	for(int i = 0; first != last; ++i, ++first) {
		if(i) os << ", ";
		os << *first;
	}
	return os << ']';
}

void put_on_floor(int current, vector<int> &above, vector<int> &bellow) {
	if(current == -1) return;
	put_on_floor(above[current], above, bellow);
	if(bellow[current] != -1) {
		above[bellow[current]] = -1;
		bellow[current] = -1;
	}
}

bool reach(int current, int target, const vector<int> &next) {
	if(current == target) return true;
	if(current == -1) return false;
	return reach(next[current], target, next);
}

int main() {
	cin.tie(nullptr);
	ios::sync_with_stdio(false);

	for(int n; cin >> n && n;) {
		vector<int> above(n, -1), bellow(n, -1);

		for(int from, to; cin >> from >> to && from;) {
			if(to == 0) {
				--from;
				if(bellow[from] != -1) put_on_floor(from, above, bellow);
			}
			else if(from != to) {
				--from; --to;
				if(reach(from, to, above)) {
					put_on_floor(from, above, bellow);
					above[to] = from;
					bellow[from] = to;
				}
				else if(reach(from, to, bellow)) {
					// ignore
				}
				else {
					put_on_floor(from, above, bellow);
					int top = to;
					while(above[top] != -1) top = above[top];
					above[top] = from;
					bellow[from] = top;
				}
			}
			else { // from == to
				// ignore
			}
		}

		vector<int> piles;
		piles.reserve(n);

		for(int i = 0; i < n; ++i) {
			if(above[i] == -1) {
				int height = 0;
				for(int current = i; current != -1; current = bellow[current]) {
					++height;
				}

				piles.emplace_back(height);
			}
		}

		sort(piles.begin(), piles.end());
		for(const auto &h : piles) {
			cout << h << endl;
		}
		cout << "end" << endl;
	}

	return EXIT_SUCCESS;
}