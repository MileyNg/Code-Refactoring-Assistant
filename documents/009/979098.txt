#include <cstdio>
#include <cmath>
#include <cstring>
#include <cstdlib>
#include <climits>
#include <ctime>
#include <queue>
#include <stack>
#include <algorithm>
#include <list>
#include <vector>
#include <set>
#include <map>
#include <iostream>
#include <deque>
#include <complex>
#include <string>
#include <iomanip>
#include <sstream>
#include <bitset>
#include <valarray>
#include <iterator>
using namespace std;
typedef long long int lli;
typedef unsigned int uint;
typedef unsigned char uchar;
typedef unsigned long long ull;
typedef pair<int, int> pii;
typedef vector<int> vi;

#define REP(i,x) for(int i=0;i<(int)(x);i++)
#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();i++)
#define RREP(i,x) for(int i=(x);i>=0;i--)
#define RFOR(i,c) for(__typeof((c).rbegin())i=(c).rbegin();i!=(c).rend();i++)
#define ALL(container) container.begin(), container.end()
#define SZ(container) ((int)container.size())

template<class T> bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
template<class T> bool chmin(T &a, const T &b) { if (a>b) { a=b; return 1; } return 0; }
template<class T> ostream& operator<<(ostream &os, const vector<T> &t) {
os<<"["; FOR(it,t) {if(it!=t.begin()) os<<","; os<<*it;} os<<"]"; return os;
}
template<class T> ostream& operator<<(ostream &os, const set<T> &t) {
os<<"{"; FOR(it,t) {if(it!=t.begin()) os<<","; os<<*it;} os<<"}"; return os;
}
template<class S, class T> ostream& operator<<(ostream &os, const pair<S,T> &t) { return os<<"("<<t.first<<","<<t.second<<")";}

const int INF = 1<<28;
const double EPS = 1e-8;
const int MOD = 1000000007;


int n, m;

struct UnionFind {
	vector<int> data;
	vector<vi> g;
	vector<int> W;
	UnionFind(int size) : data(size, -1), g(size), W(size, 0) {REP(i, n)g[i].push_back(i);}
	bool unionSet(int x, int y, int w) {
		int rx = root(x), ry = root(y);
		if (rx != ry) {
			if (data[ry] < data[rx]){
				swap(x, y);
				swap(rx, ry);
				w = -w;
			}
//			printf("%d %d %d %d\n", x, y ,rx, ry);
			int rW = W[x] - w - W[y];
			FOR(it, g[ry]) W[*it] += rW;
			g[rx].insert(g[rx].end(), ALL(g[ry]));
			g[ry].clear();
			data[rx] += data[ry]; data[ry] = rx;
		}
		return rx != ry;
	}
	bool findSet(int x, int y) {
		return root(x) == root(y);
	}
	int root(int x) {
		return data[x] < 0 ? x : data[x] = root(data[x]);
	}
	int size(int x) {
		return -data[root(x)];
	}
	int query(int x, int y){
//		printf("%d %d\n", W[x], W[y]);
		return W[x] - W[y];
	}
};

main(){
	int i,j;
	while(scanf("%d%d", &n, &m), n){
		UnionFind uf(n);
		REP(i, m){
			char c;
			int a, b, w;
			scanf(" %c %d %d", &c, &a, &b);
			a--;b--;
			if(c == '?'){
				if(uf.findSet(a, b)){
					printf("%d\n", uf.query(a, b));
				}else puts("UNKNOWN");
			}else{
				scanf("%d", &w);
				uf.unionSet(a, b, w);
			}
		}
	}
	return 0;
}