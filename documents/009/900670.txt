#include <cstdio>
#include <iostream>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <algorithm>
#include <cmath>
#include <string>
#include <vector>
#include <list>
#include <queue>
#include <stack>
#include <set>
#include <map>
#include <bitset>
#include <numeric>
#include <climits>
#include <cfloat>
#include <functional>
using namespace std;

const long long INF = LLONG_MAX / 4;

void shortestPath(vector<vector<long long> >& dist)
{
    int n = dist.size();
    for(int k=0; k<n; ++k){
        for(int i=0; i<n; ++i){
            for(int j=0; j<n; ++j){
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
            }
        }
    }
}

class Data
{
public:
    int l, r, index;
    bool operator<(const Data& d) const{
        return r < d.r;
    }
};

int main()
{
    int n, start;
    cin >> n >> start;

    ++ n;
    vector<Data> d(n);
    d[0].l = d[0].r = d[0].index = 0;
    for(int i=1; i<n; ++i){
        cin >> d[i].l >> d[i].r;
        d[i].index = i;
    }
    sort(d.begin(), d.end());

    vector<vector<long long> > dist(n, vector<long long>(n, INF));
    dist[0][start] = 0;
    for(int i=1; i<n; ++i){
        for(int j=1; j<n; ++j){
            cin >> dist[i][j];
        }
    }
    shortestPath(dist);

    vector<long long> t(n, -1);
    t[0] = 0;
    for(int i=0; i<n; ++i){
        int y = d[i].index;
        for(int j=0; j<i; ++j){
            int x = d[j].index;
            if(t[x] == -1)
                continue;

            if(d[j].r + dist[x][y] < d[i].r){
                t[y] = max(t[y], t[x] + d[i].r - max((long long)d[i].l, d[j].r + dist[x][y]));
            }
        }
    }

    long long ret = *max_element(t.begin(), t.end());
    cout << ret << endl;

    return 0;
}