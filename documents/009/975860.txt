#include <bits/stdc++.h>
using namespace std;

#define dump(n) cout<<"# "<<#n<<'='<<(n)<<endl
#define repi(i,a,b) for(int i=int(a);i<int(b);i++)
#define peri(i,a,b) for(int i=int(b);i-->int(a);)
#define rep(i,n) repi(i,0,n)
#define per(i,n) peri(i,0,n)
#define all(c) begin(c),end(c)
#define mp make_pair
#define mt make_tuple

typedef unsigned int uint;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<double> vd;
typedef vector<vd> vvd;
typedef vector<string> vs;

const int INF=1e9;
const int MOD=1e9+7;
const double EPS=1e-9;

template<typename T1,typename T2>
ostream& operator<<(ostream& os,const pair<T1,T2>& p){
	return os<<'('<<p.first<<','<<p.second<<')';
}
template<typename T>
ostream& operator<<(ostream& os,const vector<T>& a){
	os<<'[';
	rep(i,a.size()) os<<(i?" ":"")<<a[i];
	return os<<']';
}

const double PI=acos(-1);

struct Point{
	double x,y;
	Point(){}
	Point(double x,double y):x(x),y(y){}
	Point& operator+=(Point p){
		x+=p.x,y+=p.y;
		return *this;
	}
	Point& operator-=(Point p){
		x-=p.x,y-=p.y;
		return *this;
	}
	Point& operator*=(double c){
		x*=c,y*=c;
		return *this;
	}
	Point& operator/=(double c){
		x/=c,y/=c;
		return *this;
	}
};
Point operator+(Point a,Point b){
	return a+=b;
}
Point operator-(Point a,Point b){
	return a-=b;
}
Point operator*(Point a,double c){
	return a*=c;
}
Point operator*(double c,Point a){
	return a*=c;
}
Point operator/(Point a,double c){
	return a/=c;
}
bool operator==(Point a,Point b){
	return abs(a.x-b.x)<EPS && abs(a.y-b.y)<EPS;
}
bool operator!=(Point a,Point b){
	return !(a==b);
}

Point Rot(Point p,double t){
	return Point(cos(t)*p.x-sin(t)*p.y,sin(t)*p.x+cos(t)*p.y);
}

ostream& operator<<(ostream& os,const Point& p){
	return os<<'('<<p.x<<','<<p.y<<')';
}

int main()
{
	for(int n,d;cin>>n>>d && n|d;){
		vi ls(n),rs(n),ts(n);
		rep(i,n) cin>>ls[i]>>rs[i]>>ts[i];
		
		Point pos(0,0),dir(0,1);
		
		rep(i,n){
			double l=ls[i]/360.*2*PI*ts[i],r=rs[i]/360.*2*PI*ts[i];
			Point pl,pr;
			if(l==r){
				pl=Point(-d,l);
				pr=Point(d,r);
			}
			else{
				double xc=(l+r)/(l-r)*d;
				double th=r/(d-xc);
				if(xc<l){
					pl=Point(xc,0)+Rot(Point(-d-xc,0),th);
					pr=Point(xc,0)+Rot(Point(+d-xc,0),th);
				}
				if(l<xc && xc<r){
					pl=Point(xc,0)+Rot(Point(-d-xc,0),th);
					pr=Point(xc,0)+Rot(Point(+d-xc,0),th);
				}
				if(r<xc){
					pl=Point(xc,0)+Rot(Point(-d-xc,0),th);
					pr=Point(xc,0)+Rot(Point(+d-xc,0),th);
				}
			}
			Point pc=(pl+pr)/2;
			pos+=Rot(pc,atan2(-dir.x,dir.y));
			dir=Rot(dir,atan2((pr-pc).y,(pr-pc).x));
			//printf("pos=(%.3f,%.3f) dir=(%.3f,%.3f)\n",pos.x,pos.y,dir.x,dir.y);
		}
		printf("%.5f\n",pos.x);
		printf("%.5f\n",pos.y);
	}
}