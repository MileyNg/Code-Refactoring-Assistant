#include <iostream>
#include <vector>
#include <queue>
#include <map>
using namespace std;
typedef vector<int> vi;
typedef pair<int, int> P;
#define MAX (1000)
#define MAX_WH (61)
#define mp make_pair

int dx[] = {0,1,0,-1}, dy[] = {1,0,-1,0};

// dfs では解けない?

int main(){
	int w, h;
	while( cin >> w >> h, w || h ){
		// input
		int H = 2*h+1, W = 2*w+1;
		vector<vi> maze(MAX_WH, vi(MAX_WH));
		for( int i = 0; i < H; i++ ){
			for( int j = 0; j < W; j++ ){
				if( i == 0 || i == H-1 || j == 0 || j == W-1 ){
					maze[i][j] = -1;
					continue;
				}
				if( (i%2 == 1 && j%2 == 0) || (i%2 == 0 && j%2 == 1) ){
					int wall;
					cin >> wall;
					maze[i][j] = -wall;
				}else if( i%2 == 0 && j%2 == 0 ){
					maze[i][j] = -1;
				}else{
					maze[i][j] = 0;
				}
			}
		}

		int gl_w = W-2, gl_h = H-2;
		maze[1][1] = 1;
		queue<P> que;
		que.push(mp(1,1));
		while( !que.empty() ){
			int x = que.front().first, y = que.front().second;
			que.pop();
			for( int i = 0; i < 4; i++ ){
				int nx = x + dx[i], ny = y + dy[i];
				if( nx <= 0 || W-1 <= nx || ny <= 0 || H-1 <= ny ) continue;
				if( maze[ny][nx] == 0 ){
					maze[ny][nx] = maze[y][x]+1;
					que.push(mp(nx,ny));
				}
			}
		}

		// output
		int ans = maze[gl_h][gl_w];
		if( ans == 0 ) cout << 0 << endl;
		else cout << (ans+1)/2 << endl;
	}
}