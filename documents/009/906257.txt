#include <iostream>
#include <iomanip>
#include <cassert>
#include <algorithm>
#include <functional>
#include <vector>
#include <string>
#include <cstring>
#include <stack>
#include <queue>
#include <map>
#include <bitset>
#include <sstream>
#include <istream>
#include <cmath>
#include <cstdio>

using namespace std;

#define vci vector<int>
#define vcs vector<string>
#define pb push_back
#define sz size()
#define mapii map<int, int>
#define mapci map<char, int>
#define mapsi map<string, int>
#define all(x) x.begin(), x.end()
#define minit(a, i) memset(a, i, sizeof(a));

#define for_(i, a, b) for (int i=(int)a; i<(int)b; i++)
#define for_d(i, a, b) for (int i=(int)a-1; i>=b; i--)
#define for_r(i, a, b, c) for (int i=(int)a; i<(int)b; i += c)
#define for_dr(i, a, b, c) for (int i=(int)a-1; i>=b; i -= c)
#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)

typedef long long ll;

const int iINF = 2147483647;
const ll lINF = 9223372036854775807;

template <class T> inline void dbg(T t) { cout << t << endl; }



#define index_of(a, x) distance(a.begin(), lower_bound(a.begin(), a.end(), x));
vector<int> longestSubstr(const vector<int>& a) {
	int n = (int)a.size();
	vector<int> A(n, iINF);
	vector<int> id(n);
	
	for (int i=0; i<n; i++) {
		id[i] = index_of(A, a[i]);
		A[ id[i] ] = a[i];
	}
	
	int m = *max_element(id.begin(), id.end());
	vector<int> b(m+1);
	for (int i=n-1; i>=0; i--) if (id[i] == m) b[m--] = a[i];
	return b;
}

#define MAX 10

int main() {
	int n; cin >> n;
	
	for_(i, 0, n) {
		vci a(MAX);
		for_(j, 0, MAX) cin >> a[j];
		vci b = longestSubstr(a);
		vci rest;
		
		for_(j, 0, MAX) if (!binary_search(all(b), a[j])) rest.pb(a[j]);
		
		bool ok = true;
		for_(j, 1, (int)rest.sz) if (rest[j-1]>rest[j]) ok = false;
		
		if (ok) cout << "YES" << endl;
		else cout << "NO" << endl;
	}
	
	return 0;
}