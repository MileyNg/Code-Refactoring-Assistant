////   template  ///////////////////////////////////////////////////////
#include <stdlib.h>
#include <sys/time.h>
#include <stdio.h>
#include <sys/resource.h>
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

class timer{
	enum KIND{ REAL, CPU }; // real_time or cpu_time
	double t0; // start
	double t1; // end
	KIND kind_of_time; // default is real_time
	double get_realtime(){struct timeval tv; gettimeofday(&tv, NULL);
		return tv.tv_sec + (double)tv.tv_usec*1e-6;}
	double get_cputime(){struct rusage RU; getrusage(RUSAGE_SELF, &RU); 
		return RU.ru_utime.tv_sec + (double)RU.ru_utime.tv_usec*1e-6;}
public:
	timer(){kind_of_time = REAL;}
	void set(KIND k){kind_of_time = k;}
	void start(){t0 = get_realtime();}
	void stop(){t1 = get_realtime();}
	void print(){printf("TotalTime : %.3fsec\n", t1-t0);}
};
////////////////////////////////////////////////////////////////////////

struct LINE{
	int h;
	int p;
	int q;
};

bool comp(struct LINE l1, struct LINE l2){ return l1.h > l2.h; }

int main()
{
	int n, m, a; // 縦線数、横線数、調べる線
	cin >> n >> m >> a;
	vector<int> lots;
	for(int i=0; i<=n; i++) lots.push_back(i);

	vector<struct LINE> lines;
	for(int i=0; i<m; i++){
		struct LINE l;
		cin >> l.h >> l.p >> l.q;
		lines.push_back(l);
	}
	
	sort(lines.begin(), lines.end(), comp);
	
	for(int i=0; i<m; i++)
		swap(lots.at(lines.at(i).p), lots.at(lines.at(i).q));
	
	for(int i=1; i<=n; i++)
		if(lots.at(i)==a){ cout << i << endl; break; }


    return 0;
}