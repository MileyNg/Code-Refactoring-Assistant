#include <iostream>
#include <cmath>
#include <vector>
#include <algorithm>
#include <cstring>
 
using namespace std;
 
#define MAX 20
#define EPS 1e-9

struct Point{
  double x, y;
  Point(double x = 0,double y = 0) : x(x), y(y) {}
 
  Point operator + (const Point &p)const{
    return Point(x + p.x , y + p.y);
  }
 
  Point operator - (const Point &p)const{
    return Point(x - p.x , y - p.y);
  }
 
  Point operator * (const double &k)const{
    return Point(x * k , y * k);
  }
 
  Point operator / (const double &k)const{
    return Point(x / k , y / k);
  }

  bool operator < (const Point &p)const{
    return x != p.x ? x < p.x : y < p.y;
  }

  double norm(){
    return x*x + y*y;
  }
  double dot(const Point &p)const{
    return x*p.x + y*p.y;
  }
  double Abs(){
    return sqrt(norm());
  }
}; 

typedef Point Vector;
 
struct Segment{
  Vector s, t;
 
  Segment(){}
  Segment(Vector s, Vector t) : s(s), t(t) {}
 
  Point Projection(Point &p){
    Vector base = t - s;
    double t = (p-s).dot(base) / base.norm();
    return s + base*t;
  }
  Point Reflection(Point &p){
    return p + (Projection(p) - p) * 2.0;
  }

  bool intersectSP(Point &p){
    return (((s-p).Abs() + (t-p).Abs() - (t-s).Abs()) < EPS);
  }

  double distanceSP(Point &p){
    Point r = Projection(p);
    if(intersectSP(r)) return (r-p).Abs();
    return min((s-p).Abs(), (t-p).Abs());
  }
};

int N;
Point h, d, crystal[MAX];
 
double dist(Point a, Point b){
  return sqrt(pow(a.x-b.x,2) + pow(a.y-b.y,2));
}

bool used[MAX];
bool rec(int now, double total_dist, int depth){
  if(total_dist >= dist(d, crystal[now])){
    return false;
  }
  if(depth == N){
    return true;
  }
  for(int i = 0 ; i < N ; i++){
    if(!used[i]){
      Segment s = Segment(crystal[now], crystal[i]);
      if(s.distanceSP(d) < total_dist) return false;
      used[i] = true;
      if(rec(i, total_dist + dist(crystal[now],crystal[i]), depth+1)){
        return true;
      }
      used[i] = false;
    }
  }
  return false;
}

bool solve(){
  sort(crystal, crystal+N);
  for(int i = 0 ; i < N ; i++){
    memset(used, false, sizeof(used));
    if(rec(i, dist(h, crystal[i]), 0)){
      return true;
    }
  }

  return false;
}
 
int main(){
  while(cin >> N >> h.x >> h.y >> d.x >> d.y, (N + h.x + h.y + d.x + d.y)){
    for(int i = 0 ; i < N ; i++){
      cin >> crystal[i].x >> crystal[i].y;
    }
    cout << (solve() ? "YES" : "NO") << endl;
  }
  
  return 0;
}