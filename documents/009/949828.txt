#include<bits/stdc++.h>

#define REP(i,s,n) for(int i=s;i<n;i++)
#define rep(i,n) REP(i,0,n)
#define EPS (1e-7)
#define equals(a,b) (fabs((a)-(b)) < EPS)

using namespace std;

const int IINF = INT_MAX;

// Library - template - begin

class Point{
public:
  double x,y;
  Point(double x = -IINF,double y = -IINF): x(x),y(y){}
  Point operator + (Point p){return Point(x+p.x,y+p.y);}
  Point operator - (Point p){return Point(x-p.x,y-p.y);}
  Point operator * (double a){return Point(a*x,a*y);}
  Point operator / (double a){return Point(x/a,y/a);}
  bool operator < (const Point& p) const{ return !equals(x,p.x)?x<p.x:y<p.y; }
};

struct Segment{
  Point p1,p2;
  Segment(Point p1 = Point(),Point p2 = Point()):p1(p1),p2(p2){}
};

typedef Point Vector;
typedef Segment Line;

double cross(Point a,Point b){ return a.x*b.y - a.y*b.x; }
double norm(Point a){ return a.x*a.x+a.y*a.y; }
double abs(Point a){ return sqrt(norm(a)); }

// Library - template - end

// Library - intersect - begin
Point crosspoint(Line l, Line m) {
  double A = cross(l.p2 - l.p1, m.p2 - m.p1);
  double B = cross(l.p2 - l.p1, l.p2 - m.p1);
  if (abs(A) < EPS && abs(B) < EPS) return m.p1; // same line
  if (abs(A) < EPS) assert(false); // !!!PRECONDITION NOT SATISFIED!!!
  return m.p1 +   (m.p2 - m.p1) * (B / A);
}
// Library - intersect - end

int V;
double vw,vc;
Point ps[1010];
bool here[1010]; // here is the point
double mincost[1010];

inline bool LT(double a,double b) { return !equals(a,b) && a < b; }

int main(){

  while( cin >> V, V ){
    cin >> vw >> vc;
    rep(i,V) cin >> ps[i].x >> ps[i].y;

    rep(i,V) mincost[i] = IINF;
    mincost[0] = 0;
    REP(i,1,V) mincost[i] = mincost[i-1] + abs(ps[i]-ps[i-1]) / vw;

    rep(i,V-2){
      if( !( LT(ps[i].y,ps[i+1].y) ) ) continue;
      double lower = ps[i+1].y;
      REP(k,i+2,V){
        if( !( ps[k-1].y > ps[k].y ) ) {
          lower = min(lower,ps[k].y);
          continue;
        }
        if( ps[k].y < lower ){
          double Y = max(ps[i].y,ps[k].y);
          Line line = Line(Point(-10100,Y),Point(10100,Y));
          Point sp = ps[i], gp = ps[k];
          Point np = crosspoint(line,Line(ps[i  ],ps[i+1]));
          Point mp = crosspoint(line,Line(ps[k-1],ps[k]));
          double dist1 = abs(np-sp);
          double dist3 = abs(np-mp);
          double dist4 = abs(gp-mp);
          double time1 = dist1 / vw + dist3 / vc + dist4 / vw;
          if( LT(mincost[i]+time1,mincost[k]) ){
            mincost[k] = mincost[i]+time1;
            REP(j,k,V) mincost[j] = min(mincost[j],mincost[j-1] + abs(ps[j]-ps[j-1])/vw);
          }
        }
        lower = min(lower,ps[k].y);
        if( lower < ps[i].y ) break; //これ忘れてた
      }
    }
    printf("%.8f\n",mincost[V-1]);
  }
  return 0;
}