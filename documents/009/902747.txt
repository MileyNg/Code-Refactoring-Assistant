#include <algorithm>
#include <cstdlib>
#include <iostream>
#include <numeric>
#include <vector>
using namespace std;

constexpr int MAX_N = 6, MAX_M = 10;

int n, x, m;
int l[MAX_M], r[MAX_M], s[MAX_M];
vector<int> lion;
vector<int> ans;
int mx = -1;

void dfs(int idx) {
	if(idx == n) {
		const int sum = accumulate(lion.begin(), lion.end(), 0);
		if(sum < mx) return;

		for(int i = 0; i < m; ++i) {
			if(accumulate(lion.begin() + l[i], lion.begin() + r[i], 0) != s[i]) {
				return;
			}
		}

		ans = vector<int>(lion);
		mx = sum;

		return;
	}

	for(int i = x; i >= 0; --i) {
		lion.push_back(i);
		dfs(idx + 1);
		lion.pop_back();
	}
}

int main() {
	cin.tie(nullptr);
	ios::sync_with_stdio(false);

	cin >> n >> x >> m;

	for(int i = 0; i < m; ++i) {
		cin >> l[i] >> r[i] >> s[i];
		--l[i];
	}

	dfs(0);
	if(mx >= 0) {
		for(int i = 0; i < n; ++i) {
			cout << ans[i] << (i == n - 1 ? "\n" : " ");
		}
	}
	else {
		cout << -1 << endl;
	}

	return EXIT_SUCCESS;
}