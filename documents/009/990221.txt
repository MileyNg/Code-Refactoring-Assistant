#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <algorithm>
#include <deque>
#include <vector>
#include <numeric>
#include <iterator>
#include <array>
#include <utility>

using namespace std;
typedef long long ll;


#define FF first
#define SS second
#define ALL(c) begin((c)), end((c))
#define REP(i,n) for(ll i=0;i<(ll)n;++i)
inline int getInt() { int s; scanf("%d", &s); return s; }
/*
#define SIZE 500000
vector<ll> table(SIZE);



void sieve_of_eratosthenes() {
	iota(ALL(table), 0);
	for (int i = 2; i < SIZE; ++i)
		table[i] = i;
	for (int i = 2; i*i < SIZE; ++i)
	if (table[i])
	for (int j = i*i; j < SIZE; j += i)
		table[j] = 0;
}*/

typedef array<array<int, 10>, 10> Table;

int dx[] = {0, 1, 0, -1};
int dy[] = {1, 0, -1, 0};

void dd(Table &state, int from, int to) {
	if (from==to) return;
	vector<pair<int,int>> stack;
	stack.emplace_back(1,1);
	while (!stack.empty()) {
		auto p = stack.back();
		stack.pop_back();
		int x = p.FF;
		int y = p.SS;

		REP(i, 4) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (state[ny][nx] == from) {
				stack.emplace_back(nx,ny);
				state[ny][nx] = to;
			}
		}
	}
}


int g_c;

int cc(Table & state) {
	vector<pair<int, int>> stack;
	stack.emplace_back(1, 1);
	int cnt = 0;
	while (!stack.empty()) {
		auto p = stack.back();
		stack.pop_back();
		int x = p.FF;
		int y = p.SS;

		REP(i, 4) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			if (state[ny][nx] == g_c) {
				stack.emplace_back(nx, ny);
				cnt++;
				state[ny][nx] = -1;
			}
		}
	}
	return cnt;
}

int walk(int depth, Table state) {
	if (depth == 5) {
		Table ntable = state;
		ntable[1][1] = g_c;
		dd(ntable, state[1][1], g_c);
		return cc(ntable);
	}
	int cnt = 1;
	REP(i, 6) {
		Table ntable = state;
		ntable[1][1] = i;
		dd(ntable, state[1][1], i); //色変
		cnt = max(walk(depth+1, ntable),cnt);
	}
	return cnt;
}


int main() {

	while (true) {
		ll h,w;
		cin >> h >> w >> g_c;
		if (h == 0) break;
		g_c--;
		Table table;
		REP(y, 10) REP(x, 10) table[y][x] = -1;
		REP(y, h) REP(x, w) {
			cin >> table[y + 1][x + 1];
			table[y + 1][x + 1]--;
		}

		cout << walk(1, table) << endl;
	}
}