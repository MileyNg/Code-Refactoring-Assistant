#include <iostream>
#include <queue>
#include <stack>
#include <vector>
#include <stdio.h>
#include <algorithm>
#include <string>
#include <cstring>
#include <cmath>
#include <complex>
#include <map>
#include <climits>
using namespace std;

#define reep(i,a,b) for(int i=(a);i<(b);++i)
#define rep(i,n) reep((i),0,(n))
#define ALL(v) (v).begin(),(v).end()
#define PB push_back
#define EPS 1e-8
#define F first
#define S second

static const double PI=6*asin(0.5);
typedef long long ll;
typedef complex<double> CP;
typedef pair<int,int> pii;
typedef pair<ll,ll> pll;
typedef vector<int> vint;
static const int INF=1<<24;
int a[500][500]={0};
pii b[250];
int v[4][2]={-1,0,0,1,1,0,0,-1};

int main(){
	int n;
	/*
	rep(i,4){
		cout<<v[i][0]<<" "<<v[i][1]<<endl;
	}
	cout<<endl;
	*/
	while(cin>>n,n){
		rep(i,500) rep(j,500) a[i][j]=0;
		pii t=make_pair(0,0);
		rep(i,250) b[i]=t;
		a[250][250]=1;
		b[0]=make_pair(250,250);
		rep(i,n-1){
			int d,c;
			cin>>c>>d;
			a[b[c].F+v[d][0]][b[c].S+v[d][1]]=1;
			b[i+1]=make_pair(b[c].F+v[d][0],b[c].S+v[d][1]);
			//cout<<b[c].F+v[d][0]<<" "<<b[c].S+v[d][1]<<endl;
		}
		/*
		rep(i,50){
			rep(j,50){
				cout<<a[i+225][j+225]<<" ";
			}
			cout<<endl;
		}
		*/
		//cout<<endl;
		
		rep(i,500){
			bool f=true;
			rep(j,500){
				if(a[i][j]==1){
					f=false;
					break;
				}
			}
			if(f) a[i][0]=-1;
		}
		rep(i,500){
			bool f=true;
			rep(j,500){
				if(a[j][i]==1){
					f=false;
					break;
				}
			}
			if(f) a[0][i]=-1;
		}
		int h=0,w=0;
		rep(i,500){
			if(a[i][0]!=-1){
				reep(j,i,500){
					if(a[j][0]!=-1) h++;
					else break;
				}
				break;
			}
		}
		rep(i,500){
			if(a[0][i]!=-1){
				reep(j,i,500){
					if(a[0][j]!=-1) w++;
					else break;
				}
				break;
			}
		}
		cout<<h<<" "<<w<<endl;
	}
	return 0;
}