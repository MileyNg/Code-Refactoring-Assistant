#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <sstream>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <numeric>
#include <cctype>
#include <tuple>
#include <iterator>
#include <bitset>
#include <random>
#include <assert.h>
#include <unordered_map>
#include <array>
#include <ctime>

#ifdef _MSC_VER
#include <agents.h>
#endif

#define FOR(i, a, b) for(int i = (a); i < (int)(b); ++i)
#define rep(i, n) FOR(i, 0, n)
#define ALL(v) v.begin(), v.end()
#define REV(v) v.rbegin(), v.rend()
#define MEMSET(v, s) memset(v, s, sizeof(v))
#define X first
#define Y second
#define MP make_pair
#define MT make_tuple

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> P;
typedef unsigned int uint;

int main(){
	int n, m;
	cin >> n >> m;
	vector<int> s(n), t(n), p(m);
	rep(i, n) cin >> s[i] >> t[i];
	rep(i, m) cin >> p[i];

	vector<int> x;
	x.insert(x.end(), ALL(p));

	sort(ALL(x));

	vector<int> first(n), last(n);

	map<int, int> be, en;
	rep(i, n){
		if (s[i] < t[i]){
			int cnt = lower_bound(ALL(x), t[i]) - lower_bound(ALL(x), s[i]);
			first[i] = 1;
			last[i] = !(cnt & 1);
		}
		else{
			swap(s[i], t[i]);
			int cnt = lower_bound(ALL(x), t[i]) - lower_bound(ALL(x), s[i]);
			first[i] = !(cnt & 1);
			last[i] = 1;
		}

		be[s[i]] = i;
		en[t[i]] = i;

	}
	x.insert(x.end(), ALL(s));
	x.insert(x.end(), ALL(t));
	sort(ALL(x));

	ll ans = 0, sum = 0, valid = 0, prv = 0;
	for (auto pos : x){
		ans += valid*(pos - prv);
		if (be.count(pos)){
			++sum;
			valid += first[be[pos]];
		}
		else if (en.count(pos)){
			--sum;
			valid -= last[en[pos]];
		}
		else{
			valid = sum - valid;
		}
		prv = pos;
	}
	cout << ans << endl;

	return 0;
}