#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <map>
#include <stack>
#include <queue>
#include <algorithm>
#include <set>

#define FOR(i,a,b) for(int i=(a);i<(b);i++)
#define REP(i,j) FOR(i,0,j)
#define mp std::make_pair

typedef long long ll;
typedef unsigned long long ull;
typedef std::pair<int,int> P;
typedef std::pair<int,P> State;

const int INF = 1001001001;

// S N E W(南北東西)
const int dx[8] = {0, 0, 1, -1, 1, 1, -1, -1}, dy[8] = {1, -1, 0, 0, 1, -1, 1, -1};

int W, H;
int d[400][400];
std::vector<P> ps[10];
int N;
int G[8], D[8], S[8], E[8];
int dp[1<<10][20][20][101];

int canGoNext(int state, int x, int y, int t){
    REP(i, 8){
        if(state >> G[i] & 1){continue;}
        for(P &p : ps[G[i]]){
            int nt = t + d[x+y*W][p.first+p.second*W];
            if(S[i] <= nt && nt < E[i]){
                return true;
            }
        }
    }
    return false;
}

int rec(int state, int x, int y, int t){
    // printf("%d, %d, %d\n", x, y, t);
    if(dp[state][x][y][t] != -1){return dp[state][x][y][t];}
    if(!canGoNext(state, x, y, t)){return 0;}

    int res = 0;
    REP(i, 8){
        if(state >> G[i] & 1){continue;}
        for(P &p : ps[G[i]]){
            int nt = t + d[x+y*W][p.first+p.second*W];
            // printf("%d, (%d, %d)\n", nt, p.first, p.second);
            if(S[i] <= nt && nt < E[i]){
                res = std::max(res, D[i] + rec(state | 1 << G[i], p.first, p.second, nt));
            }
        }
    }

    return dp[state][x][y][t] = std::max(res, rec(state, x, y, t+1));
}

int main(){
    while(std::cin >> W >> H, W){
        REP(i, 10){
            ps[i].clear();
        }

        REP(i, 1<<10){
            REP(j, 20){
                REP(k, 20){
                    REP(l, 101){
                        dp[i][j][k][l] = -1;
                    }
                }
            }
        }

        char map[20][20];
        int sx, sy;
        REP(i, H){
            REP(j, W){
                std::cin >> map[i][j];
                if(map[i][j] == 'P'){
                    map[i][j] = '.';
                    sx = j; sy = i;
                }
            }
        }

        REP(i, 400){
            REP(j, 400){
                if(i == j){d[i][j] = 0;}
                else{d[i][j] = INF;}
            }
        }

        REP(y, H){
            REP(x, W){
                REP(k, 4){
                    int nx = x + dx[k], ny = y + dy[k];
                    if(0 <= nx && nx < W && 0 <= ny && ny < H && map[ny][nx] == '.'){
                        if(map[y][x] != '.'){
                            ps[map[y][x]-'0'].push_back(mp(nx, ny));
                        }else if(map[y][x] == '.'){
                            d[x+y*W][nx+ny*W] = 1;
                            d[nx+ny*W][x+y*W] = 1;
                        }
                    }
                }
            }
        }

        REP(k, W*H){
            REP(i, W*H){
                REP(j, W*H){
                    d[i][j] = std::min(d[i][j], d[i][k] + d[k][j]);
                }
            }
        }

        std::cin >> N;

        REP(i, N){
            std::cin >> G[i] >> D[i] >> S[i] >> E[i];
        }

        std::cout << rec(0, sx, sy, 0) << std::endl;
    }
}