#include <iostream>
#include <iomanip>
#include <cassert>
#include <algorithm>
#include <functional>
#include <vector>
#include <string>
#include <cstring>
#include <stack>
#include <queue>
#include <map>
#include <bitset>
#include <sstream>
#include <istream>
#include <cmath>
#include <cstdio>

using namespace std;

#define vci vector<int>
#define vcs vector<string>
#define pb push_back
#define sz size()
#define mapii map<int, int>
#define mapci map<char, int>
#define mapsi map<string, int>
#define all(x) x.begin(), x.end()
#define minit(a, i) memset(a, i, sizeof(a));

#define for_(i, a, b) for (int i=(int)a; i<(int)b; i++)
#define for_d(i, a, b) for (int i=(int)a-1; i>=b; i--)
#define for_r(i, a, b, c) for (int i=(int)a; i<(int)b; i += c)
#define for_dr(i, a, b, c) for (int i=(int)a-1; i>=b; i -= c)
#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)

typedef long long ll;
typedef double D;

const int iINF = 2147483647;
const ll lINF = 9223372036854775807;

template <class T> inline void dbg(T t) { cout << t << endl; }


bool reach(vcs& bar, int S, int G) {
	int n = (int)bar[0].sz + 1;
	vci perm(n);
	for_(i, 0, n) perm[i] = i + 1;
	
	int d = (int)bar.sz;
	for_(i, 0, d) {
		for_(j, 0, n - 1) {
			if (bar[i][j]=='1') swap(perm[j], perm[j+1]);
		}
	}
	
	return perm[G-1]==S;
}


int main() {
	int n, m, G, d;
	
	while (1) {
		cin >> n; if (n==0) break;
		cin >> m >> G >> d;
		
		vcs bar(d);
		for_(i, 0, d) cin >> bar[i];
		
		if (reach(bar, m, G)) cout << 0 << endl;
		else {
			bool flag = false;
			for_(i, 0, d) {
				for_(j, 0, n - 1) {
					if (bar[i][j]!='0') continue;
					if (j>0 && bar[i][j-1]=='1') continue;
					if (j<n-1 && bar[i][j+1]=='1') continue;
					
					bar[i][j] = '1';
					
					if (reach(bar, m, G)) {
						cout << i+1 << " " << j+1 << endl;
						flag = true;
						break;
					}
					
					bar[i][j] = '0';
				}
				if (flag) break;
			}
			if (!flag) cout << 1 << endl;
		}
	}
	
	
	return 0;
}