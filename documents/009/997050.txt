#include <iostream>
#include <vector>
#include <map>
#include <algorithm>

using namespace std;

#define rep(i, n) for(int i=0 ;i<(n); ++i)
#define mp(a, b) make_pair(a, b)
const int dx[] = {1, 0, 0, -1}, dy[] = {0, 1, -1, 0};

class dice{ //top, face, right, left, back, bottom
    vector<int> side;
public:
    dice():side({1, 2, 3, 4, 5, 6}){}
    dice(int t, int f){
        dice d;
        for(int i=0; i<6; (i&1? d.yroll(): d.xroll()), ++i){
            for(int j=0; j<4; d.zroll(), ++j){
                if(d[0] == t && d[1] == f){
                    *this = d;
                    return;
                }
            }
        }
    }
    int operator[](size_t pos)const{
        return side[pos];
    }
    void xroll(int k = 1){
        for(k%=4; k--; )roll(0, 4, 5, 1);
    }
    void yroll(int k = 1){
        for(k%=4; k--; )roll(0, 3, 5, 2);
    }
    void zroll(int k = 1){
        for(k%=4; k--; )roll(1, 3, 4, 2);
    }
private:
    void roll(int a, int b, int c, int d){
        swap(side[a], side[b]);
        swap(side[b], side[c]);
        swap(side[c], side[d]);
    }
};

map<pair<int, int>, pair<int, int> > plane;

void fall(dice d){
    int x = 0, y = 0;
    for(;;){
        int dir = -1;
        rep(k, 4){
            if(d[k+1] < 4 || plane[mp(x, y)].first <= plane[mp(x+dx[k], y+dy[k])].first)continue;
            if(dir < 0 || d[dir+1] < d[k+1])dir = k;
        }
        if(dir < 0){
            plane[mp(x, y)] = mp(plane[mp(x, y)].first + 1, d[0]);
            break;
        }
        if(dir == 0)d.xroll(1);
        if(dir == 1)d.yroll(1);
        if(dir == 2)d.yroll(3);
        if(dir == 3)d.xroll(3);
        x += dx[dir]; y += dy[dir];
    }
}

int main(){
    int n;
    while(cin >> n, n){
        plane.clear();
        while(n--){
            int t, f;
            cin >> t >> f;
            fall(dice(t, f));
        }
        vector<int> cnt(6);
        for(auto v: plane)if(v.second.first)cnt[v.second.second - 1]++;
        rep(i, 6)cout << cnt[i] << (i != 5? ' ': '\n');
    }
    return 0;
}