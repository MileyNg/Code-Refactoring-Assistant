#include <stdio.h>
#define N 100000

int A[N];
char C[N];

int Partition(int p,int r){
    int x,i,j;
    int tmp,tmpc;
    
    x=A[r];
    i = p-1;
    
    for(j=p;j<r;j++){
        if (A[j] <= x){
            i=i+1;
            tmp=A[j];
            tmpc=C[j];
            A[j]=A[i];
            C[j]=C[i];
            A[i]=tmp;
            C[j]=tmpc;
        }
    }
    
    tmp=A[i+1];
    tmpc=C[i+1];
    A[i+1]=A[r];
    C[i+1]=C[r];
    A[r]=tmp;
    C[r]=tmpc;
    
    
    return i+1;
}

void Quicksort(p,r){
    int q;
    if(p<r){
        q=Partition(p,r);
        Quicksort(p,q-1);
        Quicksort(q+1,r);
    }
}



int main(int argc, char *argv[]){
    
    char C1[N];
    int n,i,x,j,k=0;
    char null;
    int tmp;
    char tmpc;
    
    scanf("%d%c",&n,&null);
    if(1>n || n>100000)return 0;
    
    for(i=0;i<n;i++){
        scanf("%c%d%c",&C[i],&A[i],&null);
        C1[i]=C[i];
    }
    
    
    Quicksort(0,n-1);
    
    
    
    
    
    for(i=0;i<n;i++){
        for(j=1;j<n;j++){
            
            if(A[j]<A[j-1]){
                tmp=A[j];
                tmpc=C1[j];
                A[j]=A[j-1];
                C1[j]=C1[j-1];
                A[j-1]=tmp;
                C1[j-1]=tmpc;
            }
        }
    }
    
    
    for(i=0;i<n;i++){
        if(C1[i]!=C[i]){
        k=1;
    }
    }
    
    
    
    
    if(k==1)printf("Not stable\n");
    else printf("Stable\n");
    
    
    for(i=0;i<n-1;i++){
        printf("%c%d\n",C[i],A[i]);
    }

    printf("%c%d\n",C[n-1],A[n-1]);
    
    
    
    
    return 0;
}