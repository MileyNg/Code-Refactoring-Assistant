#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>
using namespace std;
const int INF = (int)1e9;
#define DEBUG(x) cerr << #x << " = " << x << endl
struct Edge {
  int to, cap, cost, rev;
  Edge(int to_, int cap_, int cost_, int rev_) : to(to_), cap(cap_), cost(cost_), rev(rev_) { }
};
struct MinCostFlow {
  int V;
  vector<vector<Edge>> G;
  vector<int> dist;
  vector<int> prevv, preve;
  MinCostFlow(int v) : V(v), G(v), dist(v), prevv(v), preve(v) { }
  void add_edge(int from, int to, int cap, int cost) {
    G[from].emplace_back(to, cap, cost, G[to].size());
    G[to].emplace_back(from, 0, -cost, G[from].size()-1);
  }
  int min_cost_flow(int s, int t, int f) {
    int res = 0;
    while(f > 0) {
      fill(dist.begin(), dist.end(), INF);
      dist[s] = 0;
      bool update = true;
      while(update) {
        update = false;
        for(int v = 0; v < V; ++v) {
          if(dist[v] == INF) continue;
          for(int i = 0; i < (int)G[v].size(); ++i) {
            const Edge &e = G[v][i];
            if(e.cap > 0 && dist[e.to] > dist[v] + e.cost) {
              dist[e.to] = dist[v] + e.cost;
              prevv[e.to] = v;
              preve[e.to] = i;
              update = true;
            }
          }
        }
      }
      if(dist[t] == INF) return -1;
      int d = f;
      for(int v = t; v != s; v = prevv[v]) {
        d = min(d, G[prevv[v]][preve[v]].cap);
      }
      f -= d;
      res += d * dist[t];
      for(int v = t; v != s; v = prevv[v]) {
        Edge &e = G[prevv[v]][preve[v]];
        e.cap -= d;
        G[v][e.rev].cap += d;
      }
    }
    return res;
  }
};

int main() {
  int N; cin >> N;
  int a[N];
  for(int i = 0; i < N; ++i) {
    cin >> a[i];
  }
  MinCostFlow flow(2*N+2);
  for(int i = 0; i < N; ++i) {
    flow.add_edge(2*N, i, 1, 0);
    flow.add_edge(N+i, 2*N+1, 1, 0);
  }
  for(int i = 0; i < N; ++i) {
    for(int j = 0; j < N; ++j) {
      if(a[i] != j+1) {
        flow.add_edge(i, N + j, 1, abs(i - j)*a[i]);
      }
    }
  }
  cout << flow.min_cost_flow(2*N, 2*N+1, N) << endl;
}