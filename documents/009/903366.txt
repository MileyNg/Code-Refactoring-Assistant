#include<iostream>
#include<string>
#include<map>
using namespace std;
bool vars[11];
pair<string, string> equation(string str){
  int i=0;
  for(i=0;i<(int)str.length();i++){
    if(str[i]=='=')break;
  }
  return make_pair(str.substr(0, i),str.substr(i+1));
}
bool formula(string str){
  //cout<<str<<endl;
  bool ret;
  if(str == "T"){
    ret= true;
  }else if(str == "F"){
    ret= false;
  }else if('a'<= str[0] && str[0] <= 'k'){
    ret= vars[str[0]-'a'];
  }else if(str[0] == '-'){
    ret= !formula(str.substr(1));
  }else if(str[0]=='('){
    int tcur=1;
    int opc=-1;
    int op=-1;
    int depth=0;
    while(tcur<(int)str.length()){
      if(str[tcur]=='('){
        depth++;
      } else if(str[tcur]==')'){
        depth--;
      }else if(depth==0){
        if(str[tcur]=='+'){
          op=1;opc=tcur;
          break;
        }else if(str[tcur]=='*'){
          op=2;opc=tcur;
          break;
        }else if(str[tcur]=='-'
                 &&tcur+1<(int)str.length()
                 &&str[tcur+1]=='>'){
          tcur++;
          op=3;opc=tcur;
          break;
        }
        
      }
        tcur++;
    }
    switch(op){
    case -1:
      return formula(str.substr(1,str.length()-2));
    case 1:
      return formula(str.substr(1,opc-1))
        ||formula(str.substr(opc+1, str.length()-1 - (opc+1)));
    case 2:
      return formula(str.substr(1,opc-1))
        &&formula(str.substr(opc+1, str.length()-1 - (opc+1)));
    case 3:
      return !(formula(str.substr(1,opc-2))
               &&!formula(str.substr(opc+1, str.length()-1 - (opc+1))));
    default:
      cout<<"ERROR!"<<endl;
      return false;
    }
  }else {
    cout<<"ERROR"<<" "<<str<<endl;
    return false;
  }
  return ret;
}
bool dfs(int depth, string a, string b){
  if(depth==11){
    if(formula(a)==formula(b))return true;
    return false;
  }else{
    vars[depth]=true;
    if(!dfs(depth+1, a, b))return false;
    vars[depth]=false;
    if(!dfs(depth+1, a, b))return false;
    return true;
  }
}
int main(){
  string str;
  pair<string, string> eq;
  while(cin>>str&&str!="#"){
    eq=equation(str);
    if(dfs(0, eq.first, eq.second)){
      cout<<"YES"<<endl;
    }else {
      cout<<"NO"<<endl;
    }
  }
  return 0;
}