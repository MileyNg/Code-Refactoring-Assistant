#include <iostream>
#include <string>
#define REP(i,n) for(int i=0;i<(int)(n);i++)
#define MAX_V 10000
using namespace std;
struct node{
  int id,parent,left,right,sibling;
  node():id(0),parent(-1),left(-1),right(-1),sibling(-1){}
};
node nodes[MAX_V]{};

int depth(node n){
  if(n.parent==-1) {return 0;}
  return depth(nodes[n.parent])+1;
}
int degree(node n){
  int d=0;
  if(n.left>=0) d++;
  if(n.right>=0) d++;
  return d;
}
int height(node n){
  int l=0,r=0;
  if(n.left>=0)
    l=height(nodes[n.left])+1;
  if(n.right>=0)
    r=height(nodes[n.right])+1;
  return l>r?l:r;
}

string kind(node n){
  if(n.parent==-1){return "root";}
  if(n.left==-1&&n.right==-1){return "leaf";}
  return "internal node";
}

int main(){
  int n; cin>>n;
  REP(i,n){
    int id,left,right;
    cin>>id>>left>>right;
    nodes[id].id=id;
    nodes[id].left=left;
    nodes[id].right=right;
    if(left>=0){
      nodes[left].parent=id;
      nodes[left].sibling=right;
    }
    if(right>=0){
      nodes[right].parent=id;
      nodes[right].sibling=left;
    }
  }
  REP(i,n){
    cout<<"node "<<nodes[i].id
	<<": parent = "<<nodes[i].parent
	<<", sibling = "<<nodes[i].sibling
	<<", degree = "<<degree(nodes[i])
	<<", depth = "<<depth(nodes[i])
	<<", height = "<<height(nodes[i])
	<<", "<<kind(nodes[i])<<"\n";
  }
}