#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <sstream>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <numeric>
#include <cctype>
#include <tuple>
#include <iterator>
#include <bitset>
#include <random>
#include <assert.h>
#include <unordered_map>
#include <array>
#include <ctime>

#ifdef _MSC_VER
#include <agents.h>
#endif

#define FOR(i, a, b) for(int i = (a); i < (int)(b); ++i)
#define rep(i, n) FOR(i, 0, n)
#define ALL(v) v.begin(), v.end()
#define REV(v) v.rbegin(), v.rend()
#define MEMSET(v, s) memset(v, s, sizeof(v))
#define X first
#define Y second
#define MP make_pair
#define umap unordered_map

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> P;
typedef unsigned int uint;

struct UnionFind{
	vector<int> par, dist, diff;
	UnionFind(int n){
		par = dist = diff = vector<int>(n);
		for (int i = 0; i < n; ++i) par[i] = i, dist[i] = diff[i] = 0;
	}
	int find(int x){
		if (x == par[x]) return x;
		int r = find(par[x]);
		dist[x] += dist[par[x]];
		return par[x] = r;
	}
	int calc(int x){
		int r = find(x);
		return dist[x] + diff[x] - diff[r];
	}

	void unite(int x, int y, int val){
		int px = find(x), py = find(y);
		dist[py] = val - dist[y] - diff[y] + dist[x] + diff[x];
		par[py] = px;
		diff[x] += val;
		diff[y] += val;
	}
	pair<bool, int> comp(int x, int y){
		if (find(x) != find(y)) return make_pair(false, 0);
		return make_pair(true, calc(y) - calc(x));
	}
};

int main(){
	ios::sync_with_stdio(false);

	int n, q;
	cin >> n >> q;
	UnionFind uf(n+1);
	while (q--){
		string s;
		cin >> s;
		if (s[0] == 'I'){
			int a, b, c;
			cin >> a >> b >> c;
			uf.unite(a, b, c);
		}
		else{
			int a, b, c;
			bool ret;
			cin >> a >> b;
			tie(ret, c) = uf.comp(a, b);
			if (ret) cout << c << '\n';
			else cout << "WARNING" << '\n';
		}
	}

	return 0;
}