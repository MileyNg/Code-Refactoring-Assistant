#include <cstdio>
#include <map>
#include <algorithm>
#include <functional>
#include <vector>
using namespace std;

typedef unsigned long long ull;

const int thr = 2;

map<ull,int> memo;

vector<ull> tbl;

void maketbl(ull s, int t, int u){
	if(t == 0){
		tbl.push_back(s);
	}
	for(u = min(t, u); u >= 1; --u){
		maketbl(s + (1ull << ((u - 1) * 8)), t - u, u);
	}
}

int dfs2(ull, int, int);

int dfs1(ull s){
	if(s < 10){ return 0; }
	if(memo.count(s)){
		return memo[s];
	}
	int k;
	for(k = 8; !(s >> ((k - 1) * 8)); --k);

	int res = 0;
	if(k <= thr){
		ull r = s;
		for(size_t i = 0; i < tbl.size(); ){
			ull p = r;
			bool ok = true;
			for(int j = thr; j >= 1; --j){
				if((p >> ((j - 1) * 8) & 0xff) >= (tbl[i] >> ((j - 1) * 8) & 0xff)){
					p -= tbl[i] & (0xffull << ((j - 1) * 8));
				}
				else{
					ok = false;
				}
			}
			if(ok){
				r = p;
				++res;
			}
			else{
				++i;
			}
		}
	}
	else{
		int a = dfs2(s - (1ull << ((k - 1) * 8)), 10 - k, k);
		int b = dfs1(s & ((1ull << ((k - 1) * 8)) - 1));
		res = max(a, b);
	}
	
	memo[s] = res;
	return res;
}

int dfs2(ull s, int t, int u){
	if(s >> ((t - 1) * 8) & 0xff){
		return dfs1(s - (1ull << ((t - 1) * 8))) + 1;
	}
	if(t == 1){
		return 0;
	}
	if(t == 2){
		if((s & 0xff) >= 2){
			return dfs1(s - 2) + 1;
		}
		return 0;
	}
	if(t == 3){
		if(s & 0xff && s & 0xff00){
			return dfs1(s - 0x101) + 1;
		}
		if((s & 0xff) >= 3){
			return dfs1(s - 3) + 1;
		}
		return 0;
	}
	
	int res = 0;
	for(u = min(t, u); u >= 1; --u){
		if(s >> ((u - 1) * 8) & 0xff){
			int a = dfs2(s - (1ull << ((u - 1) * 8)), t - u, u);
			res = max(res, a);
		}
	}
	return res;
}

int main(){
	maketbl(0, 10, thr);
	sort(tbl.begin(), tbl.end(), greater<ull>());

	int n, x;
	while(scanf("%d", &n), n){
		int cnt[10] = {};
		for(int i = 0; i < n; ++i){
			scanf("%d", &x);
			++cnt[x];
		}
		
		int ans = 0;
		for(int i = 1; i <= 4; ++i){
			x = min(cnt[i], cnt[10 - i]);
			ans += x;
			cnt[i] -= x;
			cnt[10 - i] -= x;
		}
		
		ans += cnt[5] / 2;
		cnt[5] &= 1;
		
		ull s = 0;
		for(int i = 1; i <= 8; ++i){
			s |= (ull)cnt[i] << ((i - 1) * 8);
		}
		
		memo.clear();
		ans += dfs1(s);
		printf("%d\n", ans);
	}
}