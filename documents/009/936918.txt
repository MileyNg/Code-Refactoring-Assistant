#include<bits/stdc++.h>

#define REP(i,s,n) for(int i=s;i<n;i++)
#define rep(i,n) REP(i,0,n)

using namespace std;

typedef pair<string,int> si;
typedef pair<int,int> ii;

struct Edge{
  int to,cap,cost,rev;
  Edge(int to=0,int cap=0,int cost=0,int rev=0):to(to),cap(cap),cost(cost),rev(rev){}
};

const int MAX_V = 1100, IINF = INT_MAX;
int V;
vector<Edge> G[MAX_V];
int h[MAX_V],dist[MAX_V],prevv[MAX_V],preve[MAX_V];

inline void add_edge(int from,int to,int cap,int cost){
  G[from].push_back(Edge(to,cap,cost,G[to].size()));
  G[to].push_back(Edge(from,0,-cost,G[from].size()-1));
}

int min_cost_flow(int s,int t,int f){
  int res = 0;
  fill(h,h+V,0);
  while(f>0){
    priority_queue<ii,vector<ii>,greater<ii> > Q;
    fill(dist,dist+V,IINF);
    dist[s] = 0;
    Q.push(ii(0,s));
    while(!Q.empty()){
      ii p = Q.top(); Q.pop();
      int v = p.second;
      if( dist[v] < p.first ) continue;
      for(int i=0;i<G[v].size();i++){
        Edge &e = G[v][i];
        if( e.cap > 0 && dist[e.to] > dist[v] + e.cost + h[v] - h[e.to] ) { 
          dist[e.to] = dist[v] + e.cost + h[v] - h[e.to];
          prevv[e.to] = v;
          preve[e.to] = i;
          Q.push(ii(dist[e.to],e.to));
        }
      }
    }
    if( dist[t] == IINF ) return -1;
    rep(v,V) h[v] += dist[v];
    int d = f;
    for(int v=t;v!=s;v=prevv[v]) d = min(d,G[prevv[v]][preve[v]].cap);
    f -= d;
    res += d * h[t];
    for(int v=t;v!=s;v=prevv[v]){
      Edge &e = G[prevv[v]][preve[v]];
      e.cap -= d;
      G[v][e.rev].cap += d;
    }
  }
  return res;
}


int LevenshteinDistance(string a,string b){
  int alen = a.size(), blen = b.size();
  int dp[alen+1][blen+1];
  rep(i,alen+1) dp[i][0] = i;
  rep(i,blen+1) dp[0][i] = i;

  rep(i,alen) rep(j,blen){
    int cost = ( a[i] != b[j] );
    dp[i+1][j+1] = min(dp[i][j+1]+1,
                       min(dp[i+1][j]+1,dp[i][j]+cost));
  }

  return dp[alen][blen];
}

int main(){

  int N,M;
  cin >> N >> M;
  cin.ignore();
  vector<si> text_buf;
  vector<string> word_buf(M);
  map<string,int> counter;
  rep(i,N){
    string tmp;
    getline(cin,tmp);
    stringstream ss(tmp);
    while(!(ss>>tmp).fail()) counter[tmp]++;
  }

  for( pair<string,int> i : counter ) text_buf.push_back(i);
  rep(i,M) cin >> word_buf[i];

  V = (int)word_buf.size() + (int)text_buf.size();
  int source = V, sink = source + 1;
  V += 2;
  rep(i,V) G[i].clear();

  rep(i,text_buf.size())add_edge(source,i,1,0);
  int DIFF = text_buf.size();
  rep(i,word_buf.size())add_edge(DIFF+i,sink,1,0);
  rep(i,text_buf.size()){
    int f = i;
    rep(j,word_buf.size()){
      int t = j + DIFF;
      int cost = LevenshteinDistance(word_buf[j],text_buf[i].first) * text_buf[i].second;
      add_edge(f,t,1,cost);
    }
  }

  cout << min_cost_flow(source,sink,(int)text_buf.size()) << endl;

  return 0;
}