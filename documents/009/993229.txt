#include <iostream>
#include <cstdio>
#include <iomanip>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <stack>
#include <utility>
#include <numeric>
#include <algorithm>
#include <functional>
#include <cctype>
#include <complex>
#include <string>
#include <sstream>
#include <fstream>
#include <cassert>
using namespace std;

//common
typedef int  i32;
typedef long long i64,ll;
typedef vector<int> vi; typedef pair<int,int> pii; typedef vector<pair<int,int> > vpii;
typedef long long ll; typedef vector<long long> vl; typedef pair<long long,long long> pll; typedef vector<pair<long long,long long> > vpll;
typedef vector<string> vs; typedef long double ld;

#define BR "\n"
#define ALL(c) (c).begin(),(c).end()
#define REP(i,n) for(int i=0;i<(int)(n);++i)
#define EACH(it,o) for(auto it = (o).begin(); it != (o).end(); ++it)
#define IN(l,v,r) ((l)<=(v) && (v)<(r))

//config
//#undef NDEBUG
//#define INF 1<<30
//#define EPS 1e-8
//const ll MOD =100000007;

//debug
#ifdef NDEBUG
#define DUMP(x)
#define DUMPLN(x)
#define DEBUG(x)
#define DEBUGLN(x)
#define LINE()
#define LINELN()
#define CHECK(exp,act)
#define STOP(e)
#else
#define DUMP(x)  cerr << #x << " = " << (x)
#define DUMPLN(x)  DUMP(x) <<endl
#define DEBUG(x) DUMP(x) << LINE() << " " << __FILE__
#define DEBUGLN(x) DEBUG(x)<<endl
#define LINE()    cerr<< " (L" << __LINE__ << ")"
#define LINELN()    LINE()<<endl
#define CHECK(exp,act)  if(exp!=act){DUMPLN(exp);DEBUGLN(act);}
#define STOP(e)  CHECK(e,true);if(!(e)) exit(1);
#endif

template<class T> inline string toString(const vector<T>& x) {
	stringstream ss;
	REP(i,x.size()){
		if(i!=0)ss<<" ";
		ss<< x[i];
	}
	return ss.str();
}

template<class T> inline string toString(const vector<vector<T> >& map) {
	stringstream ss;
	REP(i,map.size()){
		if(i!=0)ss<<BR;
		ss<< toString(map[i]);
	}
	return ss.str();
}
template<class K,class V>  string toString(map<K,V>& x) {
	string res;stringstream ss;
	for(auto& p:x)ss<< p.first<<":" << p.second<<" ";
	return ss.str();
}

string BITtoString(int bit){
    stringstream ss;
    while(bit!=0){ss<<(bit%2);bit/=2;}
    string res=ss.str();reverse(ALL(res));
    return res;
}

template<typename T,typename V> inline T mod(T v,V MOD){
	return (v%MOD+MOD)%MOD;
}

namespace Ps{
	const double EPS=1e-10;
	const double INF=1e12;
	typedef complex<double> P;
#define X real()
#define Y imag()

	double cross(const P& a,const P& b){
		return imag(conj(a)*b);
	}
}
using namespace Ps;
namespace std{
	bool operator < (const P& a,const P& b){
		return a.X !=b.X?a.X<b.X:a.Y<b.Y;
	}

	bool operator == (const P& a,const P& b){
		return hypot(a.X-b.X,a.Y-b.Y)<EPS;
	}
}


namespace Ls{
	using namespace Ps;
	struct L: public vector<P>{
		L(const P& a,const P &b){
			push_back(a);push_back(b);
		}
	};

	P crosspoint(const L&l,const L&m){
		double A=cross(l[1]-l[0],m[1]-m[0]);
		double B=cross(l[1]-l[0],l[1]-m[0]);
		if(abs(A)<EPS && abs(B)<EPS)return m[0];
		if(abs(A)<EPS) throw exception();
		return m[0]+B/A*(m[1]-m[0]);
	}
}
using namespace Ls;
class Main{
public:

	void run(){
		while(true){
			int n;cin >> n;if(n==0)break;

			vector<L> ls;
			REP(i,n){
				double x1,y1,x2,y2;cin >> x1 >> y1 >> x2 >> y2;
				ls.push_back(L(P(x1,y1),P(x2,y2)));
			}

			int res=1;
			REP(i,n){
				vector<P> cps;
				REP(j,n)if(j<i){
					try{
						P cp=crosspoint(ls[i],ls[j]);
						if(-100.0+EPS<cp.X && cp.X <100.0-EPS
							&&-100.0+EPS<cp.Y && cp.Y <100.0-EPS){
							cps.push_back(cp);
						}
					}catch(exception e){
					}
				}
				sort(ALL(cps));
				cps.erase(unique(ALL(cps)),cps.end());
				res+=cps.size()+1;
			}
			cout << res << endl;
		}
	}
};

 int main(){
ios::sync_with_stdio(false);
 	Main().run();
 	return 0;
 }