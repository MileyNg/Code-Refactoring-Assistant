#include <iostream>
#include <algorithm>
#include <string>
#include <sstream>
#include <cmath>
using namespace std;

#define DBG(x) cerr << #x << " = " << x << endl

template <class T, class U> 
T lexical_cast(const U& from) {
  stringstream ss;
  ss << from;
  T to;
  ss >> to;
  return to;
}

int main() {
  while(true) {
    string s; cin >> s;
    if(s[0] == '-') break;
    string ax, bx;
    for(int i = 0; i < (int)s.size(); ++i) {
      if(s[i] == '.') {
        ax = s.substr(0, i);
        bx= "0." + s.substr(i + 1);
      }
    }
    if(ax == "") {
      ax = s;
      bx = "0.0";
    }

    int a = lexical_cast<int>(ax);
    double b = lexical_cast<double>(bx);
    string as, bs;
    while(a > 0 && as.size() <= 8) {
      as.push_back('0' + a % 2);
      a /= 2;
    }
    reverse(as.begin(), as.end());
    while(abs(b) > 1e-8 && bs.size() <= 4) {
      bs.push_back('0' + (int)(b * 2));
      b *= 2;
      if(b >= 1.0) b -= 1.0;
    }
    if(as.size() <= 8 && bs.size() <= 4) {
      for(int i = 0; i < 8 - (int)as.size(); ++i) cout << "0";
      cout << as << "." << bs;
      for(int i = 0; i < 4 - (int)bs.size(); ++i) cout << "0";
      cout << endl;
    }
    else {
      cout << "NA" << endl;
    }
  }
}