#include <iostream>
#include <vector>
#include <string>
#include <stack>
#include <queue>
#include <deque>
#include <set>
#include <map>
#include <algorithm>	// require sort next_permutation count __gcd reverse etc.
#include <cstdlib>	// require abs exit atof atoi 
#include <cstdio>		// require scanf printf
#include <functional>
#include <numeric>	// require accumulate
#include <cmath>		// require fabs
#include <climits>
#include <limits>
#include <cfloat>
#include <iomanip>	// require setw
#include <sstream>	// require stringstream 
#include <cstring>	// require memset
#include <cctype>		// require tolower, toupper
#include <fstream>	// require freopen
#include <ctime>		// require srand
#define rep(i,n) for(int i=0;i<(n);i++)
#define ALL(A) A.begin(), A.end()
/*
	http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=DPL_1_B&lang=jp

	0-1ナップサック問題。

	超有名なDP問題。
	個数制限なしのナップサック問題。

	参考：蟻本 p59 
*/

using namespace std;

typedef long long ll;
typedef pair<int, int> P;

const int MAX_N = 100;
const int MAX_W = 10000;
const int INF = 10001;
int N, W;

int v[MAX_N+1], w[MAX_N+1];
int dp[MAX_N+1][MAX_W+1];

int solve (void ){
	rep (i, MAX_N+1 ) rep (j, MAX_W+1 ) dp[i][j] = -INF;

	dp[0][0] = 0;
	rep (i, N ){
		for (int j = 0; j <= W; j++ ){
			dp[i+1][j] = max (dp[i+1][j], dp[i][j] );
			if (j - w[i] >= 0 ){
				dp[i+1][j] = max (dp[i+1][j], dp[i+1][j-w[i]] + v[i] );
			} // end if
		} // end for
	} // end for

	int res = 0;
	rep (j, W + 1 ) res = max (res, dp[N][j] );

	return res;
}

int main()
{
	memset (v, 0, sizeof (v ) );
	memset (w, 0, sizeof (w ) );

	ios_base::sync_with_stdio(0);
	cin >> N >> W;
	rep (i, N ) cin >> v[i] >> w[i];

	int res = solve ();
	cout << res << endl;
		
	return 0;
}