#include <iostream>
#include <iomanip>
#include <cassert>
#include <algorithm>
#include <functional>
#include <vector>
#include <string>
#include <cstring>
#include <stack>
#include <queue>
#include <map>
#include <bitset>
#include <sstream>
#include <istream>
#include <cmath>
#include <cstdio>
#include <complex>

using namespace std;

#define vci vector<int>
#define vcs vector<string>
#define pb push_back
#define sz size()
#define mapii map<int, int>
#define mapci map<char, int>
#define mapsi map<string, int>
#define all(x) x.begin(), x.end()
#define minit(a, i) memset(a, i, sizeof(a));

#define for_(i, a, b) for (int i=(int)a; i<(int)b; i++)
#define for_d(i, a, b) for (int i=(int)a-1; i>=b; i--)
#define for_r(i, a, b, c) for (int i=(int)a; i<(int)b; i += c)
#define for_dr(i, a, b, c) for (int i=(int)a-1; i>=b; i -= c)
#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)

template <class T> int __builtin_popcount(T n) { return n ? 1 + __builtin_popcount(n & (n - 1)) : 0; }

typedef long long ll;
typedef double D;

const int iINF = 2147483647;
const ll lINF = 9223372036854775807;

template <class T> inline void dbg(T t) { cout << t << endl; }

ll sti(string s) {
	ll len = s.length();
	if (len < 1) return 0;
	return (s[len - 1] - '0') + 10 * (sti(s.substr(0, len - 1)));
}

/***
split by t
***/
vcs splitAll(string s, string t) {
	vcs r;
	for (int p = 0; (p = s.find(t)) != s.npos;) {
		r.pb(s.substr(0, p));
		s = s.substr(p + t.size());
	}
	r.pb(s);
	return r;
}


int vals[100][100];
int N;

int dp[100][100];

int solve() {
	minit(dp, -1);
	
	dp[0][50] = vals[0][50];
	for_(i, 0, N) {
		for_(j, 0, 100) {
			if (dp[i][j]<0) continue;
			dp[i+1][j-1] = max(dp[i+1][j-1], dp[i][j] + vals[i+1][j-1]);
			dp[i+1][j+1] = max(dp[i+1][j+1], dp[i][j] + vals[i+1][j+1]);
		}
	}
	
	return dp[N-1][50];
}

int main() {
	minit(vals, -1);
	
	string in; int prev_len = 0;
	int i = 0, j = 50;
	while (1) {
		getline(cin, in);
		if (in=="") break;
		
		vcs input = splitAll(in, ",");
		
		int len = (int)input.sz;
		j = 51 - len;
		
		for_(k, 0, len) {
			vals[i][j] = sti(input[k]);
			j += 2;
		}
		
		i++;
	}
	
	N = i;
	
	cout << solve() << endl;
	
	return 0;
}