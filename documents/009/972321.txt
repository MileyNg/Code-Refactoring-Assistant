#include<stdio.h>
#include<algorithm>
#include<math.h>
#include<vector>
using namespace std;
const double EPS = 1e-10;
const double INF = 1e+10;
const double PI = acos(-1);
int sig(double r) { return (r < -EPS) ? -1 : (r > +EPS) ? +1 : 0; }
struct Pt {
double x, y;
Pt() {}
Pt(double x, double y) : x(x), y(y) {}
Pt operator+(const Pt &a) const { return Pt(x + a.x, y + a.y); }
Pt operator-(const Pt &a) const { return Pt(x - a.x, y - a.y); }
Pt operator*(const Pt &a) const { return Pt(x * a.x - y * a.y, x * a.y + y * a.x); }
Pt operator-() const { return Pt(-x, -y); }
Pt operator*(const double &k) const { return Pt(x * k, y * k); }
Pt operator/(const double &k) const { return Pt(x / k, y / k); }
double abs() const { return sqrt(x * x + y * y); }
double abs2() const { return x * x + y * y; }
double arg() const { return atan2(y, x); }
double dot(const Pt &a) const { return x * a.x + y * a.y; }
double det(const Pt &a) const { return x * a.y - y * a.x; }
};
double tri(const Pt &a, const Pt &b, const Pt &c) { return (b - a).det(c - a); }
int iSP(Pt a, Pt b, Pt c) {
int s = sig((b - a).det(c - a));
if (s) return s;
if (sig((b - a).dot(c - a)) < 0) return -2; // c-a-b
if (sig((a - b).dot(c - b)) < 0) return +2; // a-b-c
return 0;
}
int iLL(Pt a, Pt b, Pt c, Pt d) {
if (sig((b - a).det(d - c))) return 1; // intersect
if (sig((b - a).det(c - a))) return 0; // parallel
return -1; // correspond
}
bool iLS(Pt a, Pt b, Pt c, Pt d) {
return (sig(tri(a, b, c)) * sig(tri(a, b, d)) <= 0);
}
bool iSS(Pt a, Pt b, Pt c, Pt d) {
return (iSP(a, b, c) * iSP(a, b, d) <= 0 && iSP(c, d, a) * iSP(c, d, b) <= 0);
}
bool iSSstrict(Pt a, Pt b, Pt c, Pt d) {
return (sig(tri(a, b, c)) * sig(tri(a, b, d)) < 0 && sig(tri(c, d, a)) * sig(tri(c, d, b)) < 0);
}
Pt pLL(Pt a, Pt b, Pt c, Pt d) {
b = b - a; d = d - c; return a + b * (c - a).det(d) / b.det(d);
}
int x[110];
int y[110];
pair<double,double> z[110];
int main(){
	int a;
	while(scanf("%d",&a),a){
		for(int i=0;i<a;i++){
			scanf("%d%d",x+i,y+i);
			x[i]+=2010;
			y[i]+=2010;
		}
		x[a]=x[0];
		y[a]=y[0];
		int ret=0;
		for(int i=0;i<=4020;i++){
			int sz=0;
			Pt U1=Pt(EPS+i,-3000);
			Pt U2=Pt(1.0-EPS+i,-3000);
			Pt A1=Pt(EPS+i,5000);
			Pt A2=Pt(1.0-EPS+i,5000);
			for(int j=0;j<a;j++){
				if(iSS(U1,A1,Pt(x[j],y[j]),Pt(x[j+1],y[j+1]))){
					z[sz++]=make_pair(pLL(U1,A1,Pt(x[j],y[j]),Pt(x[j+1],y[j+1])).y,pLL(U2,A2,Pt(x[j],y[j]),Pt(x[j+1],y[j+1])).y);
		//			printf("%d %f\n",j,z[sz-1]);
				}
			}
		//	if(sz)printf("%d %d\n",i,sz);
			std::sort(z,z+sz);
			int last=-10000;
			for(int j=0;j<sz/2;j++){
				ret+=max((int)(z[j*2+1].first+1-EPS),(int)(z[j*2+1].second+1-EPS))-max(last,min((int)(z[j*2].first+EPS),(int)(z[j*2].second+EPS)));
				last=max((int)(z[j*2+1].first+1-EPS),(int)(z[j*2+1].second+1-EPS));
		//		printf("%f %f %d\n",(z[j*2+1]-2010),(z[j*2]-2010),(int)(z[j*2+1]+1-EPS)-(int)(z[j*2]+EPS));
			}
		}
		printf("%d\n",ret);
	}
}