#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;
const int maxn =10006;

int rank[maxn];
int v[maxn];

void make_set(int x)
{
    v[x]=x;
    rank[x]=0;
}

int find_set(int x)
{
    if(v[x]!=x) v[x]=find_set(v[x]);
    return v[x];
}

void Union(int x,int y)
{
    if(rank[x]>rank[y])
        v[y]=x;
    else if(rank[x]<rank[y])
        v[x]=y;
    else if(rank[y]==rank[x])
    {
        v[x]=y;
        rank[y]++;
    }
}

struct Edge
{
    int x,y,w;
}e[maxn];

bool cmp(Edge e1,Edge e2)
{
    return e1.w<e2.w;
}
int main()
{
    int n,m;
    while(cin>>n>>m,n||m)
    {
        for(int i=0;i<m;i++)
            cin>>e[i].x>>e[i].y>>e[i].w;
        sort(e,e+m,cmp);
        for(int i=1;i<=n;i++) v[i]=i;
        int s1,s2;
        vector<int>ans;
        for(int i=0;i<m;i++)
        {
            s1=find_set(e[i].x);
            s2=find_set(e[i].y);
            if(s1!=s2)
            {
                ans.push_back(e[i].w);
                Union(s1,s2);
            }
        }
        sort(ans.begin(),ans.end());
        cout<<ans[ans.size()/2]<<endl;
    }
    return 0;
}