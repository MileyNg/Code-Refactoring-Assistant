#include<stdio.h>
#define N 100000

typedef struct{
  int p,l,r;
} Node;

Node A[N];
int depth[N];

int sibling(int id){
  if(A[A[id].p].l == id) return A[A[id].p].r;
  else if(A[A[id].p].r == id) return A[A[id].p].l;
  else return -1;
}
int degree(int id){
  if(A[id].l != -1 && A[id].r != -1) return 2;
  else if(A[id].l != -1 || A[id].r != -1) return 1;
  else return 0;
}

int height(int id){
  int lheight=0,rheight=0;
  if(A[id].l != -1){
    lheight = height(A[id].l)+1;
  } 
  if(A[id].r != -1){
    rheight = height(A[id].r)+1;
  }
  if(lheight > rheight) return lheight;
  else return rheight;
  
}

void getDepth(int id){
  int up;
  up = A[id].p;
  while(1){
    if(up == -1){
      break;
    }
    else {
      up = A[up].p;
      depth[id]++; 
    }
  }
}

void printType(int id){
  int cild;
  if(A[id].p == -1) printf("root\n");
  else if(A[id].l != -1 || A[id].r != -1) printf("internal node\n");
  else printf("leaf\n");
}

int main(){
  int i,n;
  int v,d,c;

  scanf("%d",&n);

  for(i = 0; i < n; i ++){
    A[i].p = -1;
    A[i].l = -1;
    A[i].r = -1;
  }

  for(i = 0; i < n; i ++){
    scanf("%d%d%d",&v,&d,&c);
    if(d != -1)A[d].p = v;
    if(c != -1)A[c].p = v;
    A[v].l = d;
    A[v].r = c;
  }
 
  for(i = 0; i < n; i ++){ 
    getDepth(i);
    printf("node %d: parent = %d, sibling = %d, degree = %d, depth = %d, height = %d, ",i,A[i].p,sibling(i),degree(i),depth[i],height(i));
    printType(i);
  }
  return 0;
}