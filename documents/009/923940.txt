#include <iostream>
#include <iomanip>
#include <cassert>
#include <algorithm>
#include <functional>
#include <vector>
#include <string>
#include <cstring>
#include <stack>
#include <queue>
#include <map>
#include <bitset>
#include <sstream>
#include <istream>
#include <cmath>
#include <cstdio>

using namespace std;

#define vci vector<int>
#define vcs vector<string>
#define pb push_back
#define sz size()
#define mapii map<int, int>
#define mapci map<char, int>
#define mapsi map<string, int>
#define all(x) x.begin(), x.end()
#define minit(a, i) memset(a, i, sizeof(a));

#define for_(i, a, b) for (int i=(int)a; i<(int)b; i++)
#define for_d(i, a, b) for (int i=(int)a-1; i>=b; i--)
#define for_r(i, a, b, c) for (int i=(int)a; i<(int)b; i += c)
#define for_dr(i, a, b, c) for (int i=(int)a-1; i>=b; i -= c)
#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();++i)

typedef long long ll;
typedef double D;

const int iINF = 2147483647;
const ll lINF = 9223372036854775807;

template <class T> inline void dbg(T t) { cout << t << endl; }


vcs split(string s, string t) {
	vcs r;
	int p = s.find(t);
	if (p != s.npos) {
		r.pb(s.substr(0, p));
		s = s.substr(p + t.size());
	}
	r.pb(s);
	return r;
}

int main() {
	mapsi now, prev;
	
	string s, d;
	while (1) {
		cin >> s;
		if (s=="") break;
		vcs sp = split(s, ",");		
		now[sp[0]]++;
	}
	
	while (cin>>s) {
		vcs sp = split(s, ",");		
		prev[sp[0]]++;
	}
	
	FOR(it, now) {
		if ((*it).second > 0) {
			if (prev[(*it).first] > 0) cout << (*it).first << " " << (*it).second + prev[(*it).first] << endl;
		}
	}
	
	return 0;
}