#include <cstdio>
#include <queue>
#include <utility>
#include <algorithm>

using namespace std;

typedef pair<int, pair<int, int> > pii;
#define piii(x, y, d) make_pair(x, make_pair(y, d))

int w, h;
char c[20][20], cc[20][20];
int n;
int gx[11], gy[11];
int g[11][11];
int dp[1 << 11][11];
const int INF = 10000000;

const int dx[] = {1, 0, -1, 0}, dy[] = {0, 1, 0, -1};
int bfs(int sx, int sy, int gx, int gy)
{
    queue<pii> q;

    q.push(piii(sx, sy, 0));

    while (!q.empty()) {
        int x = q.front().first;
        int y = q.front().second.first;
        int d = q.front().second.second;
        q.pop();
        //printf("(%d, %d) = %d\n", x, y, d);

        cc[x][y] = 'x';
        for (int i = 0; i < 4; ++i) {
            int nx = x + dx[i], ny = y + dy[i];
            if (nx < 0 || h <= nx || ny < 0 || w <= ny)
                continue;
            if (cc[nx][ny] == 'x')
                continue;
            if (nx == gx && ny == gy)
                return d + 1;
            q.push(piii(nx, ny, d + 1));
        }
    }
    return INF;
}

int tsp(int visited, int v)
{
    if (dp[visited][v] != -1)
        return dp[visited][v];

    if (visited == (1 << n) - 1)
        return 0;

    int res = INF;
    for (int u = 0; u < n; ++u) {
        if (!(visited & (1 << u))) {
            res = min(res, tsp(visited | (1 << u), u) + g[v][u]);
        }
    }
    return dp[visited][v] = res;
}

int main()
{
    for (;;) {
        scanf("%d %d", &w, &h);
        if (w == 0 && h == 0)
            break;

        n = 1;
        for (int i = 0; i < h; ++i) {
            for (int j = 0; j < w; ++j) {
                scanf(" %c", &c[i][j]);
                if (c[i][j] == 'o') {
                    gx[0] = i;
                    gy[0] = j;
                } else if (c[i][j] == '*') {
                    gx[n] = i;
                    gy[n] = j;
                    ++n;
                }
            }
        }
        //for (int i = 0; i < n; ++i) printf("%d, %d\n", gx[i], gy[i]);

        /*
        fill(&g[0][0], &g[11][0], INF);
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j){
                copy(&c[0][0], &c[20][0], &cc[0][0]);
                if (i == j)
                    g[i][j] = 0;
                else
                    g[i][j] = bfs(gx[i], gy[i], gx[j], gy[j]);
                //printf("%d\t", g[i][j]);
            }
            //printf("\n");
        }

        fill(&dp[0][0], &dp[1 << 11][0], -1);
        int res = tsp(1, 0);
        if (res == INF)
            printf("-1\n");
        else
            printf("%d\n", res);
        */
    }

    return 0;
}