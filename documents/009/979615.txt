#include <iostream>
#include <vector>
#include <cmath>
#include <map>
#include <complex>
#include <algorithm>
using namespace std;
#define mk make_pair
typedef pair<int,int> pii;
typedef complex<double> C;

const double agl = M_PI / 2;
vector<C> temp1, temp2;

int roundOff( double x ){
	if( 0 <= x ) return (int)(x + 0.5);
	else				 return (int)(x - 0.5);
}

C rotate( C p ){
	p *= C(cos(agl), sin(agl));
	p.real(roundOff(p.real()));
	p.imag(roundOff(p.imag()));
	return p;
}

bool isSame( vector<C> l ){
	bool res = false;
	for( int r = 0; r < 4; r++ ){	// 90度づつ回転(clockwise)
		bool f1 = true, f2 = true;
		for( int i = 0; i < temp1.size(); i++ ){
			l[i] = rotate(l[i]);
			if( temp1[i] != l[i] ) f1 = false;
			if( temp2[i] != l[i] ) f2 = false;
		}
		if( f1 || f2 ) res = true;
	}
	return res;
}

int main(){
	int n;
	while( cin >> n, n ){
		vector<int> diff;
		for( int i = 0; i <= n; i++ ){
			int m;
			cin >> m;
			vector<C> lines(m);
			double dx, dy;
			for( int j = 0; j < m; j++ ){
				int x, y;
				cin >> x >> y;
				if( j == 0 ){
					dx = x;
					dy = y;
				}
				lines[j] = C(x-dx,y-dy);	// スタートを原点にするように平行移動
			}
			// 探したい折れ線を設定
			if( i == 0 ){
				temp1 = lines;
				reverse(lines.begin(), lines.end());
				temp2 = lines;
				dx = temp2[0].real();
				dy = temp2[0].imag();
				for( int i = 0; i < m; i++ ){
					temp2[i] = C(temp2[i].real()-dx, temp2[i].imag()-dy);
				}
				continue;
			}
			if( temp1.size() != lines.size() ) continue;
			if( isSame(lines) ) diff.push_back(i);
		}

		// output
		for( int i = 0; i < diff.size(); i++ ) cout << diff[i] << endl;
		cout << "+++++" << endl;
	}
}