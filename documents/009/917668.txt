#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <functional>
#include <numeric>
#include <cmath>
#include <cstring>
#include <queue>
#include <stack>
#include <set>

using namespace std;

#define ALL(co) co.begin(), co.end()

typedef long long LL;
typedef pair<int, int> P;
typedef pair<int, P> IP;
typedef pair<P, P> PP;
typedef vector<int> Array;
typedef vector<vector<int> > Array2;
typedef vector<int> LArray;

const int INF = 1 << 29;
const LL LINF = 1LL << 60;

int itiv;
inline int getInt() { return (cin >> itiv, itiv); }
void readAll(Array& vec, int n) { for (int i = 0; i < n; i++) cin >> vec[i]; }
inline bool between(int first, int last, int n) { return first <= n && n <= last; }
inline bool inRange(int begin, int end, int n) { return begin <= n && n < end; }
inline bool inRange(int size, int n) { return 0 <= n && n < size; }

int w, h;
int dx[] = { -1, 0, 1, 0 }, dy[] = { 0, -1, 0, 1 };
int dr[] = { 0, -1, 0, 1 }, dc[] = { -1, 0, 1, 0 };


int main(void)
{
	while(cin >> w >> h && w)
	{
		int n = getInt();
		Array ws(n), hs(n);
		for (int i = 0; i < n; i++)
		{
			cin >> ws[i] >> hs[i];
		}
		int ans = 0;
		for (int i = 0; i < n; i++)
		{
			if(ws[i - 1] > ws[i])
				ans += abs(ws[i - 1] - ws[i]) + abs(hs[i - 1] - hs[i]);
			else
				ans += max(abs(ws[i - 1] - ws[i]), abs(hs[i - 1] - hs[i]));
		}
		cout << ans << endl;
	}
	return 0;
}