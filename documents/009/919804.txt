#include <bits/stdc++.h>
#define rep(i,n) for(int i=0; i<(int)(n); ++i)

using namespace std;
typedef pair<int, int> p;

int main(){
    int n;
    while(cin >> n && n > 0){
        if(n == 1){
            cout << 0 << endl;
            continue;
        }
        if(n == 2) {
            int p1, t1, p2, t2;
            cin >> p1 >> t1 >> p2 >> t2;
            cout << abs(p1 - p2) << endl;
            continue;
        }
        vector<long long> p1;
        vector<long long> p2;
        vector<p> pv;
        rep(i, n) {
            int p, t;
            cin >> p >> t;
            if(t == 1){
                p1.push_back(p);
            }else{
                pv.push_back(p(p, t - 2));
            }
        }

        sort(pv.begin(), pv.end());
        if(pv.size() > 1) {
            pv[0].second ++;
            pv[pv.size() - 1].second ++;
        }
        rep(i, pv.size()){
            rep(_, pv[i].second){
                p2.push_back(pv[i].first);
            }
        }

        int n1 = p1.size();
        int n2 = p2.size();

        if(n1 > n2) {
            cout << -1 << endl;
            continue;
        }

        sort(p1.begin(), p1.end());
        sort(p2.begin(), p2.end());

        long long ans = *max_element(p2.begin(), p2.end()) - *min_element(p2.begin(), p2.end());
        // cout << ans << endl;
        // cout << "p1 : "; rep(i, p1.size()) cout << p1[i] << " "; cout << endl;
        // cout << "p2 : "; rep(i, p2.size()) cout << p2[i] << " "; cout << endl;

        vector<long long> dp(2 * n1 + 1, 0);
        int last_base2 = -1;
        for(int i1 = 0; i1 < n1; i1++){
            vector<long long> next(2 * n1, llong_max);
            int base2 = lower_bound(p2.begin(), p2.end(), p1[i1]) - p2.begin();
            for(int di = 0; di < 2 * n1; di++){
                int i2 = di - n1 + base2;
                if(i2 >= i1 && i2 < n2){
                    // lastdi - n1 + last_base2 == (i2 - 1)
                    int lastdi = (i2 - 1) - last_base2 + n1;
                    assert(lastdi >= 0);
                    long long last = (lastdi < 2 * n1 ? dp[lastdi] : dp.back());
                    if(last == llong_max) continue;
                    next[di] = last + abs(p1[i1] - p2[i2]);
                    // printf("i1 = %d i2 = %d di = %d base = %d lastdi = %d last = %lld next[%d] <- %lld + %lld = %lld\n", i1, i2, di, base2, lastdi, last, di, last, abs(p1[i1] - p2[i2]), next[di]);
                }
            }
            for(int j = 1; j < 2 * n1; j++){
                next[j] = min(next[j], next[j - 1]);
            }
            last_base2 = base2;
            dp.swap(next);
        }

        cout << ans + dp.back() << endl;
    }

    return 0;
}