#include<stdio.h>
#include<stdlib.h>
#include<string.h>

struct node{
  int key;
  struct node *prev;
  struct node *next;
};

typedef struct node * NodePointer;
NodePointer nil;

/*NodePointer listSearch(int key){
  NodePointer t;
  for(t = nil -> next; t != nil; t = t -> next){
    if(t -> key == key){
      return t;
    }
  }
}*/

void init(){
  nil = malloc(sizeof(struct node));
  nil->next = nil;
  nil->prev = nil;
}

void printList(){
  NodePointer cur = nil->next;
  int isf = 1;
  while(1){
    if ( cur == nil ) break;
    if ( isf == 0)  printf(" ");
    printf("%d", cur->key);
    cur = cur->next;
    isf = 0;
  }
  printf("\n");
}

void deleteNode(NodePointer t){
  if(t -> next == nil){
    nil -> prev = t -> prev;
    t -> prev -> next = nil;
    free(t);
  }else if(t -> prev == nil){
    nil -> next = t -> next;
    t -> next -> prev = nil;
    free(t);
  }else{
    t -> prev -> next = t -> next;
    t -> next -> prev = t -> prev;
    free(t);
  }
}

void deleteFirst(){
  NodePointer t = nil->next;
  if ( t == nil ) return;
  deleteNode(t);
}

void deleteLast(){
  NodePointer t = nil -> prev;
  if(t == nil) return;
  deleteNode(t);
}

void delete(int key){
  struct node *n;
  if(nil -> key == key){
    deleteFirst();
    return;
  }
  for(n = nil -> next; n != nil; n = n -> next){
    if(n -> key == key){
      deleteNode(n);
      return;
    }
  }
}



void insert(int key){
  NodePointer x;
  x = malloc(sizeof(struct node));
  x->key = key;

  if(nil -> next == nil){
    nil -> prev = x;
  }

  x -> next = nil -> next;
  x -> prev = nil;
  nil -> next -> prev = x;
  nil -> next = x;
}

int main(){
  int key, n, i;
  int size = 0;
  char com[20];
  int np = 0, nd = 0;
  scanf("%d", &n);
  init();
  for ( i = 0; i < n; i++ ){
    scanf("%s%d", com, &key);
    if ( com[0] == 'i' ) {insert(key); np++; size++;}
    else if ( com[0] == 'd' ) {
      if (strlen(com) > 6){
	if ( com[6] == 'F' ) deleteFirst();
	else if ( com[6] == 'L' ) deleteLast();
      } else {
	delete(key); nd++; 
      }
      size--;
    }
  }

  printList();
  return 0;
}