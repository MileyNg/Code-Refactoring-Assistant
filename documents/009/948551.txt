#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <iostream>
#include <math.h>
#include <assert.h>
#include <vector>
#include <queue>
#include <string>
#include <map>
#include <set>

using namespace std;
typedef long long ll;
typedef unsigned int uint;
typedef unsigned long long ull;
static const double EPS = 1e-9;
static const double PI = acos(-1.0);

#define REP(i, n) for (int i = 0; i < (int)(n); i++)
#define FOR(i, s, n) for (int i = (s); i < (int)(n); i++)
#define FOREQ(i, s, n) for (int i = (s); i <= (int)(n); i++)
#define FORIT(it, c) for (__typeof((c).begin())it = (c).begin(); it != (c).end(); it++)
#define MEMSET(v, h) memset((v), h, sizeof(v))

const int N = 1e+6 + 10;
#include <bitset>
const int PRIME_SIZE = N + 100;
int psize;
bitset<PRIME_SIZE + 1> bprime;
int prime[PRIME_SIZE / 10 + 1000];
int Eratosthenes(int n) {
  psize = 0;
  bprime.set();
  bprime[0] = bprime[1] = false;
  for (int i = 2; i <= n; i++) {
    if (!bprime[i]) { continue; }
    prime[psize++] = i;
    if ((long long)i * i > n) { continue; }
    for (int j = i * i; j <= n; j += i) {
      bprime[j] = false;
    }
  }
  return psize;
}


int m, s;
pair<int, int> memo[N + 100];
map<int, map<int, int> > mapto;
map<int, pair<int, int> > mapfrom;

pair<int, int> calc(int f) {
  pair<int, int> &ret = memo[f];
  if (ret.first != -1) { return ret; }
  ret = make_pair(0, 0);
  if (f > m) { return ret; }
  int y = mapfrom[f].first;
  int x = mapfrom[f].second;
  FOREQ(dx, -1, 1) {
    int nx = x + dx;
    int ny = y + 1;
    if (!mapto[ny].count(nx)) { continue; }
    int nf = mapto[ny][nx];
    //cout << nf << " " << x << " " << nx << " " << dx << endl;
    ret = max(ret, calc(nf));
  }
  if (bprime[f]) {
    ret.first++;
    if (ret.second == 0) { ret.second = f; }
  }
  return ret;
}

int main() {
  Eratosthenes(N);
  {
    int dir = 3;
    int dx[4] = { 1, 0, -1, 0 };
    int dy[4] = { 0, -1, 0, 1 };
    int x = 0;
    int y = 0;
    REP(i, N) {
      mapto[y][x] = i + 1;
      mapfrom[i + 1] = make_pair(y, x);
      dir = (dir + 1) % 4;
      int nx = x + dx[dir];
      int ny = y + dy[dir];
      if (mapto[ny].count(nx)) {
        dir = (dir + 3) % 4;
        nx = x + dx[dir];
        ny = y + dy[dir];
      }
      x = nx;
      y = ny;
    }
  }
  // FOREQ(y, -5, 5) {
  //   FOREQ(x, -5, 5) {
  //     printf("%3d ", mapto[y][x]);
  //   }
  //   puts("");
  // }
  while (cin >> m >> s, m|s) {
    MEMSET(memo, -1);
    pair<int, int> ans = calc(s);
    printf("%d %d\n", ans.first, ans.second);
  }
}