#include <iostream>
#include <cstdio>
#include <iomanip>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <stack>
#include <utility>
#include <numeric>
#include <algorithm>
#include <functional>
#include <cctype>
#include <complex>
#include <string>
#include <sstream>
#include <fstream>
#include <cassert>
using namespace std;

//common

typedef int  i32;
typedef long long i64,ll;
typedef long double ld;

#define BR "\n"
#define ALL(c) (c).begin(),(c).end()
#define REP(i,n) for(int i=0;i<(int)(n);++i)
#define FOR(i,l,r) for(int i=(int)l;i<(int)(r);++i)
#define EACH(it,o) for(auto it = (o).begin(); it != (o).end(); ++it)
#define IN(l,v,r) ((l)<=(v) && (v)<(r))

//config
//#define NDEBUG
//#define INF 1<<30
//#define EPS 1e-8
//const ll MOD =100000007;

//debug
#ifdef NDEBUG
#define DUMP(x)
#define DUMPLN(x)
#define DEBUG(x)
#define DEBUGLN(x)
#define LINE()
#define LINELN()
#define CHECK(exp,act)
#define STOP(e)
#else
#define DUMP(x)  cerr << #x << " = " << (x)
#define DUMPLN(x)  DUMP(x) <<endl
#define DEBUG(x) DUMP(x) << LINE() << " " << __FILE__
#define DEBUGLN(x) DEBUG(x)<<endl
#define LINE()    cerr<< " (L" << __LINE__ << ")"
#define LINELN()    LINE()<<endl
#define CHECK(exp,act)  if(exp!=act){DUMPLN(exp);DEBUGLN(act);}
#define STOP(e)  CHECK(e,true);if(!(e)) exit(1);
#endif

template<class T> inline string toString(const vector<T>& x) {
	stringstream ss;
	REP(i,x.size()){
		if(i!=0)ss<<" ";
		ss<< x[i];
	}
	return ss.str();
}

template<class T> inline string toString(const vector<vector<T> >& map) {
	stringstream ss;
	REP(i,map.size()){
		if(i!=0)ss<<BR;
		ss<< toString(map[i]);
	}
	return ss.str();
}
template<class K,class V>  string toString(map<K,V>& x) {
	string res;stringstream ss;
	for(auto& p:x)ss<< p.first<<":" << p.second<<" ";
	return ss.str();
}

string BITtoString(int bit){
    stringstream ss;
    while(bit!=0){ss<<(bit%2);bit/=2;}
    string res=ss.str();reverse(ALL(res));
    return res;
}

template<typename T,typename V> inline T pmod(T v,V MOD){
	return (v%MOD+MOD)%MOD;
}
#define nextInt(n) scanf("%d",&n)
#define defInt(n) int n;nextInt(n)
#define nextLong(n) scanf("%lld",&n)
#define defLong(n) ll n;nextLong(n)
#define nextDouble(n) scanf("%lf",&n)

namespace SpanningTree{
	typedef int Cost;
	struct Edge{
		int id;
		int from,to;Cost cost;
		Edge(int id,int from,int to,Cost cost)
		: id(id),from(from),to(to),cost(cost) {};

		bool operator<(Edge r) const{
		    return cost<r.cost;
		}
		bool operator>(Edge r) const{
		    return cost>r.cost;
		}
	};
	typedef vector<vector<Edge> >  Graph;

	//条件: 連結区間内
	//O(E*log(V))
	// verified by ACAC002 B
	// http://judge.u-aizu.ac.jp/onlinejudge/creview.jsp?rid=899143&cid=ACAC002
	Cost prim(Graph& g,vector<Edge>& es,int s){
		const int V=g.size();
		vector<bool> use(es.size());
		vector<bool> visited(V);
		priority_queue<Edge,vector<Edge>,greater<Edge>> que;que.push(Edge(-1,-1,s,0));
		Cost res=0;
		while(!que.empty()){
			Edge task=que.top();que.pop();
			int pos=task.to;
			if(visited[pos])continue;
			visited[pos]=true;
			res+=task.cost;
			if(task.id!=-1)use[task.id]=true;
			for(Edge e:g[pos])if(!visited[e.to])que.push(e);
		}
		vector<Cost> ecosts;
		REP(i,es.size()){
			if(use[i])ecosts.push_back(es[i].cost);
		}
		sort(ALL(ecosts));

		if(ecosts.size()%2==0)return (ecosts[ecosts.size()/2]+ecosts[(1+ecosts.size())/2])/2;
		return ecosts[ecosts.size()/2];
	}

}

using namespace SpanningTree;

class Main{
public:
	void run(){
	//	ifstream cin("in");
	//	ofstream cout( "out" );
		while(true){
			int N,M;nextInt(N);nextInt(M);
			if(N==0)break;
			Graph g(N);
			int id=0;
			vector<Edge> es;
			REP(i,M){
				int s,t,c;nextInt(s);nextInt(t);nextInt(c);s--;t--;
				g[s].push_back(Edge(id,s,t,c));
				es.push_back(Edge(id,s,t,c));
				g[t].push_back(Edge(id,t,s,c));
				id++;
			}
			cout << (prim(g,es,0))<<endl;
		}
	}
};
int main(){
	cout <<fixed<<setprecision(13);	
	ios::sync_with_stdio(false);
	Main().run();
	return 0;
}