#include <iostream>
#include <vector>
#include <unordered_map>
#include <string>
#include <queue>
#include <algorithm>

using namespace std;

typedef pair<string, int> P;

int N;

int bfs(const string& str) {

  int ans = 0;
  string sorted = str; sort(sorted.begin(), sorted.end());
  unordered_map<string, int> mp;
  mp[str] = 0;
  queue<P> Q;
  Q.push(P(str, 0));
  while(!Q.empty()) {
    
    const string now = Q.front().first;
    const int cost = Q.front().second;
    Q.pop();
    
    if(now == sorted) {
      ans = cost;
      break;
    }
    
    const int ncost = cost+1;
    for(int i=0; i<N; i++) {
      for(int j=i+1; j<=N; j++) {
        string next = now;
        reverse(next.begin()+i, next.begin()+j);
        unordered_map<string, int>::iterator it = mp.find(next);
        if(it != mp.end()) {
          if(it->second < ncost) continue;
        }
        mp[next] = ncost;
        Q.push(P(next, ncost));
      }
    }
  }
  
  return ans;
}

int main() {
  
  cin >> N;
  string str; str.resize(N);
  for(int i=0; i<N; i++) {
    cin >> str[i];
  }
  
  cout << bfs(str) << endl;
  
  return 0;
}