#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <algorithm>

#define REP(i,n) for(int i=0;i<(int)(n);i++)
#define FOR(i,r) for(auto& (i) : (r))

using namespace std;

struct Edge{
  	int src, dst;
    Edge(int s, int d) : src(s),dst(d){}
};

typedef vector<Edge> Edges;
typedef vector<Edges> Graph;

bool augment(const Graph& g, int u, vector<int>& matchTo, vector<bool>& visited) {
  	if (u < 0) return true;
  	FOR(e, g[u]) if (!visited[e.dst]) {
    	visited[e.dst] = true;
    	if (augment(g, matchTo[e.dst], matchTo, visited)) {
      		matchTo[e.src] = e.dst;
      		matchTo[e.dst] = e.src;
      		return true;
    	}
  	}
  	return false;
}
int bipartiteMatching(const Graph& g, int L, Edges& matching) {
  const int n = g.size();
  vector<int> matchTo(n, -1);
  int match = 0;
  REP(u, L) {
    vector<bool> visited(n);
    if (augment(g, u, matchTo, visited)) ++match;
  }
  REP(u, L) if (matchTo[u] >= 0) // make explicit matching
    matching.push_back( Edge(u, matchTo[u]) );
  return match;
}

int gcd(int x, int y){
  if(x<y)return gcd(y,x);
  if(y==0)return x;
  return gcd(y,x%y);
}

int main() {
  while(1){
    int m,n;
    cin >> m >> n;
    if(!m) break;
    vector<int> b(m);
    vector<int> a(n);
    REP(i,m) cin >> b[i];
    REP(i,n) cin >> a[i];
    Graph g(n+m);
    REP(i,m)REP(j,n){
      if(gcd(b[i],a[j]) != 1){
        g[i].push_back(Edge(i, j+m));
      }
    }
    Edges e;
    cout << bipartiteMatching(g, m, e) << endl;
  }
  return 0;
}