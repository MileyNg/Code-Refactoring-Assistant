#include<stdio.h>
#include<stdlib.h>
#define NIL NULL


struct node{
  struct node *right;
  struct node *left;
  struct node *parent;
  int key;
};
typedef struct node * Node;


Node root;

/*Node treeSearch(Node u, int k){
  if(x == NIL || k == x.key)  return x;
  if(k < x.key)  return treeSearch(u.left , k);
  else return treeSearch(u.right , k);
  }
  
  
  //Node treeMinimum(Node x){}
  //Node treeSuccessor(Node x){}
  
  void treeDelete(Node z){
  Node y; // node to be deleted
  Node x; // child of y
  }*/


void insert(int k){
  Node y = NIL;
  Node x = root;
  Node z;
  
  z = malloc(sizeof(struct node));
  z->key = k;
  z->left = NIL;
  z->right = NIL;
  
  while(x != NIL){
    y = x;
    if(z->key < x->key){
      x = x->left;
    }
    else 
      x=x->right;
  }
  z->parent = y;
  if(y==NIL){
    x = z;
  }
  else if(z->key < y->key){
    y->left = z;
  }
  else
    y->right = z;
}

void inorder(Node u){
  if(u != NIL){
    if(u->left != NIL){
      inorder(u->left);
    }
    printf("%2d",u->key);
    if(u->right != NIL){
      inorder(u->right);
    }
  }
}
void preorder(Node u){
 printf(" %d",u->key);
  if(u != NIL){
    if(u->left != NIL)preorder(u->left);
    if(u->right != NIL)preorder(u->right);
  }
}


main(){
  int n, i, x;
  char com[20];
  scanf("%d", &n);
  
  for ( i = 0; i < n; i++ ){
    scanf("%s", com);
    if ( com[0] == 'i' ){
      scanf("%d", &x);
      insert(x);
    } 
    else if ( com[0] == 'p' ){
      inorder(root);
      
      printf("\n");
      
      preorder(root);
      
      printf("\n");
    }
  }
  
  return 0;
}