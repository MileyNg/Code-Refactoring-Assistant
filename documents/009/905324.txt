#include <iostream>
#include <vector>
#include <queue>
#include <map>

using namespace std;

int W, H, N;
vector<string> board;

const int dx[] = {1, 0, -1, 0};
const int dy[] = {0, 1, 0, -1};

int main()
{
    cin >> W >> H;
    board.resize(H);
    vector<vector<bool>> memo(H, vector<bool>(W, false));

    for (int i = 0; i < H; ++i)
        cin >> board[i];
    cin >> N;

    int x = 0, y = 0;
    bool check = false, fst = true;
    for (int t = 0; t < N; ++t) {
        board[y][x] = '.';

        queue<pair<int, int>> que;
        que.push(make_pair(x, y));
        memo[y][x] = true;

        while (!que.empty()) {
            pair<int, int> now = que.front();
            que.pop();

            if (board[now.second][now.first] == 't') {
                if (fst)
                    cout << "0\n";
                else
                    cout << t << endl;

                check = true;
                break;
            }

            for (int d = 0; d < 4; ++d) {
                int nx = now.first + dx[d];
                int ny = now.second + dy[d];

                if (nx < 0 || nx >= W || ny < 0 || ny >= H)
                    continue;
                if (memo[ny][nx] || board[ny][nx] == '#')
                    continue;

                memo[ny][nx] = true;
                que.push(make_pair(nx, ny));
            }
        }

        if (check)
            break;

        fst = false;
        cin >> x >> y;
    }


    if (!check)
        cout << "-1\n";

    return 0;
}