#include<bits/stdc++.h>

#define REP(i,s,n) for(int i=s;i<n;i++)
#define rep(i,n) REP(i,0,n)
#define IINF (INT_MAX)
#define MAX_N 110
#define MAX_T 1010
#define EPS (1e-7)
#define equals(a,b) (fabs((a)-(b)) < EPS)

using namespace std;

struct Data{
  int robot_1, robot_2; // robot_1 < robot_2
  double t;
  Data(int robot_1=IINF,int robot_2=IINF,double t=IINF):robot_1(robot_1),robot_2(robot_2),t(t){}
  bool operator < (const Data& a)const{
    return t < a.t;
  }
  bool operator == (const Data& a)const{
    return equals(t,a.t) && robot_1 == robot_1 && robot_2 == robot_2;
  }
};

int N,T,timeline[MAX_N],limit[MAX_N];
double R,t[MAX_N][MAX_T],vx[MAX_N][MAX_T],vy[MAX_N][MAX_T],cx[MAX_N][MAX_T],cy[MAX_N][MAX_T],tmp;
string nickname[MAX_N];
bool informer[MAX_N];

inline void compute(){
  vector<Data> info;
  rep(loop_t,T+1){
    rep(i,N){
      while( loop_t > t[i][timeline[i]] )timeline[i]++;
      double xi = cx[i][timeline[i]], yi = cy[i][timeline[i]];
      double vxi = vx[i][timeline[i]], vyi = vy[i][timeline[i]];
      rep(j,N){
	if( i == j ) continue;
	while( loop_t > t[j][timeline[j]] )timeline[j]++;
	double xj = cx[j][timeline[j]], yj = cy[j][timeline[j]];
	double vxj = vx[j][timeline[j]], vyj = vy[j][timeline[j]];
	double dx = xi - xj, dy = yi - yj, dvx = vxi - vxj, dvy = vyi - vyj;
	double a = dvx*dvx + dvy*dvy, b = 2*dvx*dx + 2*dvy*dy, c = dx*dx + dy*dy - R*R;
	vector<double> ans_t;
	if( !equals(b*b - 4.0*a*c,0) && b*b - 4*a*c < 0 ) continue;

	if( equals(a,0) ){
	  if( equals(b,0) ) continue;
	  ans_t.push_back( - c / b );

	} else {
	  double ans = ( -b - sqrt( b*b - 4.0*a*c ) ) / ( 2.0 * a );
	  ans_t.push_back( max(0.0,ans) );
	  ans = ( -b + sqrt( b*b - 4.0*a*c ) ) / ( 2.0 * a );
	  ans_t.push_back( max(0.0,ans) );
	}


	double min_t = min(ans_t[0],ans_t.back());
	double max_t = max(ans_t[0],ans_t.back());

	double cur_min_t = max(((timeline[i]-1>=0)?t[i][timeline[i]-1]:0),((timeline[j]-1>=0)?t[j][timeline[j]-1]:0));
	double cur_max_t = min(t[i][timeline[i]],t[j][timeline[j]]);
	if( max_t < cur_min_t || cur_max_t < min_t ) continue;
	//cout << "cur_min_t = " << cur_min_t << ", cur_max_t = " << cur_max_t << endl;
	//cout << "min_t = " << min_t << ", max_t = " << max_t << endl;
	double timer = cur_min_t;
	info.push_back(Data(min(i,j),max(i,j),max(cur_min_t,min_t)));
	info.push_back(Data(min(i,j),max(i,j),min(cur_max_t,max_t)));
	//cout << "push | " << info.back().robot_1 << "," << info.back().robot_2 << " " << info.back().t << endl;
      }
    }
  }

  sort(info.begin(),info.end());
  //info.erase(unique(info.begin(),info.end()),info.end());
  if( info.empty() ) return;
  //cout << "--------- " << info.size() << endl;
  informer[0] = true;
  double bell_timer = info[0].t;
  //rep(i,info.size())cout << nickname[info[i].robot_1] << " " << nickname[info[i].robot_2] << "," << info[i].t << endl;
  rep(i,info.size()){
    vector<Data> S;
    while( i < info.size() && equals(info[i].t,bell_timer) ) S.push_back(info[i++]);
    if( i < info.size() ) bell_timer = info[i].t;
    //cout << "i = " << i << endl;
    bool update = true;
    while(update){
      update = false;
      rep(j,S.size()){
	int r1 = S[j].robot_1, r2 = S[j].robot_2;
	//cout << "r1 = " <<r1 << "," << r2 << " = " << r1 << "," << r2 << endl;
	if( informer[r1] && informer[r2] )continue;
	if( informer[r1] || informer[r2] ) {
	  update = true;
	  //cout << "!!! " << nickname[r1] << " and " << nickname[r2] << endl;
	  informer[r1] = informer[r2] = true;
	}
      }
    }

    //cout << info[i].robot_1 << " " << info[i].robot_2 << endl;
    //cout << nickname[info[i].robot_1] << " " << nickname[info[i].robot_2] << " " << info[i].t << endl;
  }

  vector<string> ans;
  rep(i,N)if(informer[i])ans.push_back(nickname[i]);
  sort(ans.begin(),ans.end());
  rep(i,ans.size())cout << ans[i] << endl;

}

int main(){

  while( cin >> N >> T >> R, N|T|(int)R){
    rep(i,N){
      cin >> nickname[i];
      int dex = 0;
      cin >> tmp >> cx[i][0] >> cy[i][0];
      while(cin >> t[i][dex] >> vx[i][dex] >> vy[i][dex]){
	dex++;
	cx[i][dex] = cx[i][dex-1] + ( t[i][dex-1] - t[i][dex-2] ) * vx[i][dex-1];
	cy[i][dex] = cy[i][dex-1] + ( t[i][dex-1] - t[i][dex-2] ) * vy[i][dex-1];
	//cout << "c[" << i << "][" << dex << "] = " << cx[i][dex] << "," << cy[i][dex] << endl;
	if( t[i][dex-1] == T ) break;
      }
      //cout << "limit = " << dex << endl;
      timeline[i] = 0, limit[i] = dex, informer[i] = false;
    }

    compute();

  }

  return 0;
}