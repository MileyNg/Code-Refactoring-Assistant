#include <iostream>
#include <algorithm>
#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <functional>
#include <numeric>
#include <cmath>
#include <cstring>
#include <queue>
#include <stack>
#include <set>

using namespace std;

#define ALL(co) co.begin(), co.end()

typedef long long LL;
typedef pair<int, int> P;
typedef pair<int, P> IP;
typedef pair<P, P> PP;
typedef vector<int> Array;
typedef vector<int> LArray;

const int INF = 1 << 29;
const LL LINF = 1LL << 60;

int itiv;
inline int getInt() { return (cin >> itiv, itiv); }
void readAll(Array& vec, int n) { for (int i = 0; i < n; i++) cin >> vec[i]; }
inline bool between(int first, int last, int n) { return first <= n && n <= last; }
inline bool inRange(int begin, int end, int n) { return begin <= n && n < end; }
inline bool inRange(int size, int n) { return 0 <= n && n < size; }

int k, n;
int dx[] = { -1, 0, 1, 0 }, dy[] = { 0, -1, 0, 1 };
int dr[] = { 0, -1, 0, 1 }, dc[] = { -1, 0, 1, 0 };

// day, pizza, renzoku
int dp[101][3][2];
const int MOD = 10000;

int main(void)
{
	while(cin >> n >> k && n)
	{
		memset(dp, 0, sizeof(dp));
		Array kimari(n+1);
		for (int i = 0; i < k; i++)
		{
			int a, b; cin >> a >> b;
			kimari[--a] = b;
		}

		if(kimari[0])
			dp[0][kimari[0] - 1][0] = 1;
		else
			dp[0][0][0] = dp[0][1][0] = dp[0][2][0] = 1;
		for (int i = 1; i < n; i++)
		{
			for (int j = 0; j < 3; j++) //今日
			{
				if(kimari[i] && kimari[i] - 1 != j) continue;

				dp[i][j][1] = dp[i-1][j][0];
				for (int k = 0; k < 3; k++) //前日
				{
					if(j != k)
						dp[i][j][0] = (dp[i][j][0] + dp[i - 1][k][0] + dp[i - 1][k][1]) % MOD;
				}
			}
		}
		int ans = 0;
		for (int i = 0; i < 3; i++)
		{
			ans += dp[n-1][i][0] + dp[n-1][i][1];
		}
		cout << ans % MOD << endl;
	}
	return 0;
}