#include <bits/stdc++.h>
using namespace std;

typedef long double ld;

const ld EPS = 1e-9;
const ld INF = 1e10;
const ld PI = M_PI;

struct Point{
  ld x, y;
  Point(ld x, ld y):x(x), y(y){}
  Point(){}
};

Point operator+(const Point &a, const Point &b){
  return Point(a.x + b.x, a.y + b.y);
}
Point operator-(const Point &a, const Point &b){
  return Point(a.x - b.x, a.y - b.y);
}
Point operator*(const Point &a, const ld b){
  return Point(a.x * b, a.y * b);
}
Point operator*(const Point &a, const Point &b){
  return Point(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x);
}
Point operator/(const Point &a, const ld b){
  return Point(a.x / b, a.y / b);
}

ld cross(const Point &a, const Point &b){
  return a.x*b.y - a.y*b.x;
}

ld dot(const Point &a, const Point &b){
  return a.x*b.x + a.y*b.y;
}

ld norm(const Point &a){
  return dot(a, a);
}

struct Line:vector<Point>{
  Line(Point a = Point(0, 0), Point b = Point(0, 0)){
    this->push_back(a);
    this->push_back(b);
  }
};

int ccw(Point a, Point b, Point c){
  b = b - a;
  c = c - a;
  if(cross(b, c) > EPS) return +1; // 反時計周り
  if(cross(b, c) < -EPS) return -1; // 時計周り
  if(dot(b, c) < 0) return +2; // c -- a -- b がこの順番に一直線上
  if(norm(b) < norm(c)) return -2; // a -- b -- c がこの順番に一直線上
  return 0; // a -- c -- b が一直線上
}

ld abs(const Point &a){
  return sqrt(norm(a));
}

Point projection(const Line &l, const Point &p){
  ld t = dot(p-l[0], l[1]-l[0]) / norm(l[0] - l[1]);
  return l[0] + (l[1] - l[0]) * t;
}

bool is_intersect_SS(const Line &s, const Line &t){
  return ccw(s[0], s[1], t[0]) * ccw(s[0], s[1], t[1]) <= 0 &&
    ccw(t[0], t[1], s[0]) * ccw(t[0], t[1], s[1]) <= 0;
}

bool is_intersect_SP(const Line &l, const Point &p){
  return ccw(l[0], l[1], p) == 0;
}

ld distance_SP(const Line &s, const Point &p){
  const Point r = projection(s, p);
  if(is_intersect_SP(s, r)) return abs(r - p);
  return min(abs(s[0] - p), abs(s[1] - p));
}

ld distance_SS(const Line &s, const Line &t){
  if(is_intersect_SS(s, t)) return 0;
  return min(min(distance_SP(s, t[0]), distance_SP(s, t[1])),
	     min(distance_SP(t, s[0]), distance_SP(t, s[1])));
}

int main(){  
  int q;
  cin >> q;
  while(q--){
    Point p0, p1;
    Line l1, l2;
    cin >> p0.x >> p0.y >> p1.x >> p1.y;
    l1 = Line(p0, p1);
    
    cin >> p0.x >> p0.y >> p1.x >> p1.y;
    l2 = Line(p0, p1);
    
    ld ans = distance_SS(l1, l2);
    printf("%.10Lf\n", ans);
    //printf("%.10Lf %.10Lf\n", ans.x, ans.y);
  }
  
  return 0;
}