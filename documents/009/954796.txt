#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

const int INF = 1000000000;

int main() {
  while(1){
    int w,h;
    cin>>w>>h;
    if (!w) break;
    vector<vector<vector<int>>> graph(h, vector<vector<int>>(w));
    for (int i = 0; i < h; ++i) {
      for (int j = 0; j < w-1; ++j) {
        int f;
        cin >> f;
        if (f == 0) {
          graph[i][j].push_back(i*w+j+1);
          graph[i][j+1].push_back(i*w+j);
        }
      }
      if (i != h - 1) {
        for (int j = 0; j < w; ++j) {
          int f;
          cin >> f;
          if (f == 0) {
            graph[i][j].push_back((i+1)*w+j);
            graph[i+1][j].push_back(i*w+j);
          }
        }
      }
    }
    queue<int> q;
    q.push(0);
    vector<int> dist(w*h, INF);
    dist[0] = 1;
    while (!q.empty()) {
      int e = q.front();
      q.pop();
      int i = e / w;
      int j = e % w;
      for (int to : graph[i][j]) {
        if (dist[to] > dist[e] + 1) {
          dist[to] = dist[e] + 1;
          q.push(to);
        }
      }
    }
    if (dist[w*h-1] == INF) {
      cout << 0 << endl;
    } else {
      cout << dist[w*h-1] << endl;
    }
  }
  return 0;
}