#include <bits/stdc++.h>

#define rep_(v, f, l) for (int v = (f), v##_ = (l); v < v##_; ++v)
#define rep(v, n) rep_(v, 0, n)
#define lep(v, n) rep_(v, 1, n + 1)
#define rrep_(v, f, l) for (int v = (l), v##_ = (f); v >= v##_; --v)
#define rrep(v, n) rrep_(v, 0, n - 1)
#define rlep(v, n) rrep_(v, 1, n)
#define show_a(a, size) rep(a##_it, size) std::cout << a[a##_it] << " \n"[a##_it == a##_it_ - 1];
#define show_v(v) show_a(v, v.size())
#define eachv(v, i) rep(i, v.size())
#define reachv(v, i) rrep(i, v.size())
#define debug(x) std::cerr << #x << " = " << x << "\n";

using namespace std;

typedef long long int lint;

static inline int in(){ int x; scanf("%d", &x); return x; }
static inline lint inl(){ lint x; scanf("%lld", &x); return x; }

bool is_triangle(int a, int b, int c){
    return (a < b + c && b < a + c && c < a + b);
}
bool is_right(int a, int b, int c){
    return a * a + b * b == c * c;
}
int get_type(int a, int b, int c){
    if (is_right(a, b, c) || is_right(b, c, a) || is_right(a, c, b)){
        return 1;
    }
    if (is_triangle(a * a, b * b, c * c)){
        return 2;
    }
    return 3;
}
int main()
{
    int bucket[4] = {};
    int a, b, c;
    while (~scanf("%d %d %d", &a, &b, &c)){
        if (is_triangle(a, b, c)){
            bucket[0]++;
            bucket[get_type(a, b, c)]++;
        }
        else break;
    }
    show_a(bucket, 4);
    return (0);
}