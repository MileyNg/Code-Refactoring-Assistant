#include <iostream>
#include <algorithm>
#include <queue>
#include <utility>
using namespace std;

const int INF = (int)1e8;
typedef pair<int, int> P;

int main() {
  while(true) {
    int W, H; cin >> W >> H;
    if(W == 0 && H == 0) break;
    bool wall[H][W][4];
    const int dx[4] = { 1, 0, -1, 0 };
    const int dy[4] = { 0, -1, 0, 1 };
    for(int i = 0; i < H; i++) {
      for(int j = 0; j < W; j++) {
        wall[i][j][0] = false;
        wall[i][j][1] = false;
        wall[i][j][2] = false;
        wall[i][j][3] = false;
        if(i == 0) wall[i][j][1] = true;
        if(i == H - 1) wall[i][j][3] = true;
        if(j == 0) wall[i][j][2] = true;
        if(j == W - 1) wall[i][j][0] = true;
      }
    }
    for(int i = 0 ; i < H; i++) {
      for(int j = 0; j < W - 1; j++) {
        int s; cin >> s;
        if(s) {
          wall[i][j][0] = true;
          wall[i][j+1][2] = true;
        }
      }
      if(i != H - 1) {
        for(int j = 0; j < W; j++) {
          int s; cin >> s;
          if(s) {
            wall[i][j][3] = true;
            wall[i+1][j][1] = true;
          }
        }
      }
    }

    int d[H][W];
    for(int i = 0; i < H; i++)
      for(int j = 0; j < W; j++) d[i][j] = INF;
    queue<P> Q;
    Q.push(P(0, 0));
    d[0][0] = 1;
    while(!Q.empty()) {
      P p = Q.front(); Q.pop();
      for(int i = 0; i < 4; i++) {
        int ny = p.first + dy[i];
        int nx = p.second + dx[i];
        if(0 <= ny && ny < H && 0 <= nx && nx < W && d[ny][nx] == INF && wall[p.first][p.second][i] == 0) {
          d[ny][nx] = d[p.first][p.second] + 1;
          Q.push(P(ny, nx));
        }
      }
    }
    if(d[H-1][W-1] != INF) {
      cout << d[H-1][W-1] << endl;
    }
    else {
      cout << 0 << endl;
    }
  }
}