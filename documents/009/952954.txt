#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

bool solve() {
    int N, D;
    if(!(cin >> N >> D)) return false;
    if(!N && !D) return false;

    vector<vector<int>> wire_to(D-1, vector<int>(N, 0));
    for(int i = 0; i < D-1; ++i) {
        for(int j = 0; j < N; ++j) {
            cin >> wire_to[i][j];
        }
    }

    vector<int> v(N);
    for(int i = 0; i < N; ++i) {
        v[i] = i;
    }

    bool ok = true;
    vector<int> tmp(N);
    for(int _ = 0; _ < 10000; ++_) {
        for(int d = 0; d < D-1; ++d) {
            random_shuffle(v.begin(), v.end());
            sort(v.begin(), v.begin()+N/2);
            sort(v.begin()+N/2, v.end());
            for(int i = 0; i < N; ++i) {
                tmp[wire_to[d][i]] = v[i];
            }
            v.swap(tmp);
        }
        sort(v.begin(), v.begin()+N/2);
        sort(v.begin()+N/2, v.end());
        for(int i = 1; i < N; ++i) {
            if(v[i] < v[i-1]) {
                ok = false;
                break;
            }
        }
        if(!ok) break;
    }
    if(ok) cout << "Yes" << endl;
    else cout << "No" << endl;
    return true;
}

int main() {
    cin.tie(0);
    ios::sync_with_stdio(0);

    while(solve()) ;
    return 0;
}