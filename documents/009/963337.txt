#include <cstdio>
#include <vector>
#include <algorithm>
#include <utility>
#include <queue>
using namespace std;

typedef unsigned long long ull;
typedef pair<int,int> pii;

const int INF = 1010101010;

struct cmper{
	const vector<int> &v;
	explicit cmper(const vector<int> &w) : v(w) {}
	bool operator() (const pii &p, const pii &q) const{
		return v[p.second] < v[q.second];
	}
};

int main(){
	int s, r, a, b, c, qr;
	scanf("%d%d", &s, &r);
	vector<vector<pii> > G(s + 1);
	for(int i = 0; i < r; ++i){
		scanf("%d%d%d", &a, &b, &c);
		G[a].push_back(pii(c, b));
		G[b].push_back(pii(c, a));
	}
	scanf("%d%d%d", &a, &b, &qr);
	vector<int> xs(qr), ys(qr);
	for(int i = 0; i < qr; ++i){
		scanf("%d%d", &xs[i], &ys[i]);
	}

	vector<int> ds(s + 1, INF);
	priority_queue<pii> pq;
	vector<vector<int> > from(s + 1);
	pq.push(pii(0, a));
	ds[a] = 0;
	while(!pq.empty()){
		pii p = pq.top();
		pq.pop();
		int u = p.second;
		int d = -p.first;
		if(ds[u] != d){ continue; }

		for(size_t i = 0; i < G[u].size(); ++i){
			int v = G[u][i].second;
			int nd = d + G[u][i].first;
			if(ds[v] > nd){
				from[v].clear();
				pq.push(pii(-nd, v));
			}
			if(ds[v] >= nd){
				ds[v] = nd;
				from[v].push_back(u);
			}
		}
	}
	
	vector<char> vis(s + 1);
	queue<int> q;
	q.push(b);
	vis[b] = 1;
	vector<pii> es;
	while(!q.empty()){
		int u = q.front();
		q.pop();
		for(size_t i = 0; i < from[u].size(); ++i){
			int v = from[u][i];
			es.push_back(pii(v, u));
			if(!vis[v]){
				vis[v] = 1;
				q.push(v);
			}
		}
	}

	sort(es.begin(), es.end(), cmper(ds));

	vector<ull> dp(s + 1);
	for(int k = 0; k < qr; ){
		int t = min(k + 64, qr);
		fill(dp.begin(), dp.end(), 0ull);
		for(int i = k; i < t; ++i){
			dp[xs[i]] |= 1ull << (i - k);
		}
		for(size_t i = 0; i < es.size(); ++i){
			dp[es[i].second] |= dp[es[i].first];
		}
		for(int i = k; i < t; ++i){
			puts(dp[ys[i]] >> (i - k) & 1 ? "Yes" : "No");
		}
		k = t;
	}
}