#include <cstdlib>
#include <iostream>
#include <vector>
using namespace std;

bool dfs(int v, int t, vector<vector<int>> &mat, vector<bool> &used) {
	if(v == t) return true;

	used[v] = true;
	const int n = mat.size();
	for(int i = 0; i < n; ++i) {
		if(mat[v][i] > 0 && !used[i] && dfs(i, t, mat, used)) {
			--mat[v][i];
			++mat[i][v];
			return true;
		}
	}

	return false;
}

bool rdfs(int v, int t, vector<vector<int>> &mat, vector<bool> &used) {
	if(v == t) return true;

	used[v] = true;
	const int n = mat.size();
	for(int i = 0; i < n; ++i) {
		if(mat[v][i] == 2 && !used[i] && rdfs(i, t, mat, used)) {
			--mat[v][i];
			++mat[i][v];
			return true;
		}
	}

	return false;
}

int main() {
	cin.tie(nullptr);
	ios::sync_with_stdio(false);


	int n, m, q;
	cin >> n >> m >> q;

	vector<vector<int>> mat(n, vector<int>(n, 0));
	while(m--) {
		int a, b;
		cin >> a >> b;
		--a; --b;
		mat[a][b] = mat[b][a] = 1;
	}

	const int s = 0;
	const int t = n - 1;

	int flow = 0;
	vector<bool> used(n, false);
	while(dfs(s, t, mat, used)) {
		++flow;
		fill(used.begin(), used.end(), false);
	}

	while(q--) {
		int m, a, b;
		cin >> m >> a >> b;
		--a; --b;

		if(m == 1) { // connect
			mat[a][b] = mat[b][a] = 1;
			fill(used.begin(), used.end(), false);
			flow += dfs(s, t, mat, used);
		}
		else { // cut
			if(mat[a][b] != 1) {
				--flow;
				fill(used.begin(), used.end(), false);
				if(mat[a][b] == 0) {
					mat[b][a] = 0;
					rdfs(a, s, mat, used);
					rdfs(t, b, mat, used);
				}
				else {
					mat[a][b] = 0;
					rdfs(b, s, mat, used);
					rdfs(t, a, mat, used);
				}

				fill(used.begin(), used.end(), false);
				flow += dfs(s, t, mat, used);
			}
			else {
				mat[a][b] = mat[b][a] = 0;
			}
		}

		cout << flow << "\n";
	}

	return EXIT_SUCCESS;
}