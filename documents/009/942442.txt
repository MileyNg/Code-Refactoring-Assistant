#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;
const int maxn = 60;
const int maxm = 4010;
const int inf = 0x3f3f3f3f;
int d[maxn], e[maxn];

struct Edge {
    int u, v, w, next;
    Edge() {}
    Edge(int t_u, int t_v, int t_w, int t_next) : u(t_u), v(t_v), w(t_w) {}
}edges[maxm];

int head[maxn], edge_sum;

void init_grapth() {
    edge_sum = 0;
    memset(head, -1, sizeof(head));
}

void addEdge(int u, int v, int w) {
    edges[edge_sum].u = u;
    edges[edge_sum].v = v;
    edges[edge_sum].w = w;
    edges[edge_sum].next = head[u];
    head[u] = edge_sum++;
}

int n, m;
bool used[maxn];
int  pre[maxn];
int  ans, ans_cnt;
bool visit[maxn];
int  dis[maxn];
bool inq[maxn];

void spfa(int s) {
    memset(dis, inf, sizeof(dis));
    memset(inq, false, sizeof(inq));
    queue<int> Q;
    Q.push(s); dis[s] = 0; inq[s] = true;
    while(!Q.empty()) {
        int u = Q.front(); Q.pop(); inq[u] = false;
        for(int i = head[u]; i != -1; i = edges[i].next) {
            int v = edges[i].v;
            if(!visit[v]) {
                if(e[v] <= e[u] && dis[v] > dis[u] + edges[i].w + d[v]) {
                    dis[v] = dis[u] + edges[i].w + d[v];
                    if(!inq[v]) {
                        Q.push(v);
                        inq[v] = true;
                    }
                }
            } else {
                if(e[v] <= e[u] && dis[v] > dis[u] + edges[i].w) {
                    dis[v] = dis[u] + edges[i].w;
                    if(!inq[v]) {
                        Q.push(v);
                        inq[v] = true;
                    }
                }
            }
        }
    }
    return ;
}

void dfs(int u, int p, int sum) {
    pre[u] = p;
    if(u == n) {
        ans_cnt++;
        memset(visit, false, sizeof(visit));
        int i = n;
        while(i != -1) {
            visit[i] = true;
            i = pre[i];
        }
        spfa(n);
        //printf("Test: %d %d\n", sum, dis[1]);
        ans = min(ans, sum + dis[1]);
        return ;
    }
    for(int i = head[u]; i != -1; i = edges[i].next) {
        int v = edges[i].v;
        if(!used[v] && e[v] >= e[u]) {
            used[v] = true;
            dfs(v, u, sum + edges[i].w + d[v]);
            used[v] = false;
        }
    }
    return ;
}

int main() {

    //freopen("aa.in", "r", stdin);

    int u, v, w;
    while(scanf("%d %d", &n, &m) && n + m) {
        init_grapth();
        d[1] = 0; e[1] = 0; d[n] = 0; e[n] = 1000;
        for(int i = 2; i < n; ++i) {
            scanf("%d %d", &d[i], &e[i]);
        }
        for(int i = 1; i <= m; ++i) {
            scanf("%d %d %d", &u, &v, &w);
            addEdge(u, v, w);
        }
        memset(used, false, sizeof(used));
        memset(pre, -1, sizeof(pre));
        ans = inf; ans_cnt = 0;
        used[1] = true;
        dfs(1, -1, 0);
        if(ans_cnt == 0) {
            printf("-1\n");
        } else {
            printf("%d\n", ans);
        }
    }
    return 0;
}