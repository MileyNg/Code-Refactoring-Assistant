#include <iostream>
using namespace std;

string intersection(string tree1, string tree2);
string tunion(string tree1, string tree2);
int camma_pos(string tree);


int camma_pos(string tree){
	int i, camma_p;
	int braket = 0;
	for(i = 0; i < tree.size(); i++){
		if(tree[i] == '('){
			braket++;
		}else if(tree[i] == ')'){
			braket--;
		}
		if((tree[i] == ',') && (braket == 1)){
			camma_p = i;
		}
	} 
	return camma_p;
}

string intersection(string tree1, string tree2){
	int i;
	int braket = 0;
	int camma_p1, camma_p2;
	string tree1_l, tree1_r;
	string tree2_l, tree2_r;
	string left, right;
	if(tree1.size() == 0 || tree2.size() == 0){
		return "";
	}
	camma_p1 = camma_pos(tree1);
	camma_p2 = camma_pos(tree2);
	tree1_l = tree1.substr(1,camma_p1-1);
	tree1_r = tree1.substr(camma_p1+1, tree1.size() - camma_p1 - 2);
	tree2_l = tree2.substr(1,camma_p2-1);
	tree2_r = tree2.substr(camma_p2+1, tree2.size() - camma_p2 - 2);
	left = intersection(tree1_l, tree2_l);
	right = intersection(tree1_r, tree2_r);
	return "(" + left + "," + right + ")";
}

string tunion(string tree1, string tree2){
	int i;
	int braket = 0;
	int camma_p1, camma_p2;
	string tree1_l, tree1_r;
	string tree2_l, tree2_r;
	string left, right;
	if(tree1.size() == 0){
		return tree2;
	}
	if(tree2.size() == 0){
		return tree1;
	}
	camma_p1 = camma_pos(tree1);
	camma_p2 = camma_pos(tree2);
	tree1_l = tree1.substr(1,camma_p1-1);
	tree1_r = tree1.substr(camma_p1+1, tree1.size() - camma_p1 - 2);
	tree2_l = tree2.substr(1,camma_p2-1);
	tree2_r = tree2.substr(camma_p2+1, tree2.size() - camma_p2 - 2);
	left = tunion(tree1_l, tree2_l);
	right = tunion(tree1_r, tree2_r);
	return "(" + left + "," + right + ")";
}

int main(){
	char ui;
	string tree1, tree2, treeans;
	cin >> ui >> tree1 >> tree2;

	if(ui == 'i'){
		treeans = intersection(tree1, tree2);
	}else{
 		treeans = tunion(tree1, tree2);
	}
	cout << treeans << endl;
}