#include <iostream>
#include <map>
#include <vector>
#include <cmath>
using namespace std;
#define make_pair mp
#define pb push_bacck
typedef vector<int> vi;
typedef vector<vi> vii;
typedef pair<int,int> pii;

const int jx[] = {-1,0,1,
						2,2,2,
						1,0,-1,
						-2,-2,-2};
const int jy[] = {-2,-2,-2,
						-1,0,1,
						2,2,2,
						1,0,-1};
//const int sx[] = {-1,0,1,-1,0,1,-1,0,1};
//const int sy[] = {-1,-1,-1,0,0,0,1,1,1};

int n;
//int park[10][10];
pii sp[10];
//bool memo[10][9];

bool isInside( int x, int y ){
	return ( 0 <= x && x < 10 && 0 <= y && y < 10 );
}

bool dfs( int x, int y , int pos ){
	//cout << "pos:" << pos << " " << x << "," << y << endl;
	if( pos == n ) return true;
	for( int i = 0; i < 12; i++ ){
		int nx = x + jx[i],
				ny = y + jy[i];
		if( !isInside(nx,ny) ) continue;
		if( abs(nx - sp[pos].first) <= 1 && abs(ny - sp[pos].second) <= 1 ){
			if( dfs(nx,ny,pos+1) ) return true;
		}
		/*for( int j = 0; j < 9; j++ ){
			int nsx = sp[pos].first + sx[j],
					nsy = sp[pos].second + sy[j];
			if( !isInside(nsx,nsy) || !memo[pos][j] ) continue;
			if( nx == nsx && ny == nsy ){
				if( dfs(nx,ny,pos+1) ) return true;
				else memo[pos][j] = false;
			}
		}*/
	}
	return false;
}

int main(){
	int px, py;
	while( cin >> px >> py, px || py ){
		/*for( int i = 0; i < 10; i++ ){
			for( int j = 0; j < 9; j++ ){
				memo[i][j] = true;
			}
		}*/
		cin >> n;
		for( int i = 0; i < n; i++ ){
			cin >> sp[i].first >> sp[i].second;
		}
		if( dfs(px,py,0) ) cout << "OK" << endl;
		else							 cout << "NA" << endl;
	}
}