#include <bits/stdc++.h>
#define REP(i,n) for(int i=0; i<(int)(n); ++i)

using namespace std;

const int MAX = 301;

const long double EPS = 1e-9;
typedef vector<long double> Vec;
typedef vector<Vec> Mat;

Vec gauss_jordan(const Mat& A, const Vec& b){
    int W = A[0].size();
    int H = A.size();

    Mat B(H, Vec(W + 1));

    for(int y = 0; y < H; y++)
        for(int x = 0; x < W; x++)
            B[y][x] = A[y][x];

    for(int y = 0; y < H; y++)
        B[y][W] = b[y];

    bool unique = true; // 解が一意かどうか
    int cy = 0; // 現在注目している式

    // 現在注目している変数
    for(int x = 0; x < W; x++){
        int pivot = cy;
        // 注目している変数の係数の絶対値が一番大きい式を選ぶ
        for(int y = cy; y < H; y++){
            if(abs(B[y][x]) > abs(B[pivot][x])) pivot = y;
        }

        // 解が一意でないか，解が存在しない
        if(pivot >= H || abs(B[pivot][x]) < EPS) {
            unique = false;
            continue;
        }

        swap(B[cy], B[pivot]);

        // 注目している変数の係数を1にする
        for(int x2 = x + 1; x2 <= W; x2++) {
            B[cy][x2] /= B[cy][x];
        }

        // y番目の式からx2番目の変数を消去
        for(int y = 0; y < H; y++) if(y != cy)
            for(int x2 = x + 1; x2 <= W; x2++)
                B[y][x2] -= B[y][x] * B[cy][x2];

        // 次の式に注目する
        cy++;
    }


    // 解が存在するかどうか
    for(int y = cy; y < H; y++)
        if(abs(B[y][W]) > EPS){
            return Vec();
        }

    // 解が複数存在するかどうか
    if(!unique){
        return Vec();
    }

    // 一意な解を返す
    Vec V(W);
    int cur_x = 0;
    for(int y = 0; y < H; y++){
        if(abs(B[y][cur_x]) > EPS){
            V[cur_x++] = B[y][W];
        }
    }
    return V;
}

int main(){
    int S, N, K;
    while(cin >> S >> N >> K){
        S = abs(S);
        if(N == 1) {
            if(S % K == 0) {
                cout << S / K << endl;
            }else {
                cout << -1 << endl;
            }
            continue;
        }
        long double prob[MAX] = {};
        prob[0] = 1.0;
        for(int i = 0; i < K; i++){
            long double next[MAX] = {};
            for(int from = 0; from <= i * N; from++) if(prob[from] > EPS) {
                for(int p = 1; p <= N; p++){
                    next[from + p] += prob[from] * (1.0L / N);
                }
            }
            REP(j, MAX) prob[j] = next[j];
        }
        long double ave = 0;
        REP(i, MAX) ave += prob[i] * i;
        Mat M(MAX, Vec(MAX, 0));
        Vec B(MAX, 1);
        REP(i, MAX) M[i][i] = 1.0;
        B[0] = 0.0;
        for(int y = 1; y < MAX; y++){
            for(int i = K; i <= N * K; i++) {
                int x = abs(y - i);
                M[y][x] -= prob[i];
            }
        }

        Vec A = gauss_jordan(M, B);
        if(A.empty()){
            cout << -1 << endl;
        }else{
            if(S < MAX) {
                printf("%.12Lf\n", A[S]);
            } else {
                long double a = (1.0 * S - (MAX - 1)) / ave;
                printf("%.12Lf\n", a + A[MAX - 1]);
            }
        }
    }
    return 0;
}