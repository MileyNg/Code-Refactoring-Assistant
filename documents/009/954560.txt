#include <bitset>
#include <vector>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <cstring>
#include <string>
#include <sstream>
#include <algorithm>
#include <iomanip>
#include <iostream>

#define VARIABLE(x) cerr << #x << "=" << x << endl
#define BINARY(x) cerr << #x << "=" << static_cast<bitset<16> >(x) << endl;
#define rep(i,n) for(int i=0;i<(int)(n);i++)
#define REP(i,m,n) for (int i=m;i<(int)(n);i++)

const int INF = 10000000;
int dx[4]={1, 0, -1, 0}, dy[4]={0, 1, 0, -1};
using namespace std;
typedef long long  ll;

/** Problem0263 : Beat Panel **/
int count(int bits){
	bits = (bits & 0x55555555) + (bits >> 1 & 0x55555555);
	bits = (bits & 0x33333333) + (bits >> 2 & 0x33333333);
	bits =(((bits >> 4) + bits) & 0x0f0f0f0f);
	bits += bits >> 8;
	return (bits + (bits >> 16)) & 0xff;
}

int main()
{
	int n, cn;
	
	while (cin >> n >> cn, n||cn) {
		vector<int> button, ptn;
		int tmp, in;
		rep(i, n) {
			tmp=0;
			rep(j, 16) {
				cin >> in;
				tmp = tmp<<1;
				if (in)
					tmp+=1;
			}
			button.push_back(tmp);
		}
		rep(i, cn) {
			tmp=0;
			rep(j, 16) {
				cin >> in;
				tmp = tmp<<1;
				if (in)
					tmp+=1;
			}
			ptn.push_back(tmp);
		}
		
		int current = button[0];
		int sum=0;
		rep(k, n) {
			current = current|button[k];
			int max=0, push;
			rep(j, cn) {
				int pushed = current & ptn[k];
				int num = count(pushed);
				if (max<num) {
					max = num;
					push = pushed;
				}
			}
			sum+=max;
			current ^= push;
		}
		cout << sum << endl;
	}
	return 0;
}