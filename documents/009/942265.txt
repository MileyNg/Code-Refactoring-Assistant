#include<stdio.h>
#define compile 1
void init(int array[], int length)
{
	int i = 0;
	for(i = 0; i < length; i++)
	{
		array[i] = 0;
	}
}
void merge(int separate1[], int length1, int separate2[], int length2, int array[])
{
	int i = 0, j = 0;
	while(i < length1 || j < length2)
	{
		if((j >= length2) ||(i < length1 && (separate1[i] < separate2[j])))
		{
			array[i + j] = separate1[i];
			i++;
		}
		else
		{
			array[i + j] = separate2[j];
			j++;
		}
	}
}
void mergesort(int array[], int length)
{
	if(length > 1)
	{
		int m = length / 2;
		int n = length - m;
		int i = 0;
		int separate1[m];
		int separate2[n];
		init(separate1, m);
		init(separate2, n);
		for(i = 0; i < m; i++)
		{
			separate1[i] = array[i];
		}
		for(i = 0; i < n; i++)
		{
			separate2[i] = array[i + m];
		}
		mergesort(separate1, m);
		mergesort(separate2, n);
		merge(separate1, m, separate2, n, array);
	}
}
int search(int array1[], int length1, int array2[], int length2)
/*
array1->main関数内S[], length1->main関数内n
array2->main関数内T[], length2->main関数内q
*/
{
	int counter = 0;
	int i = 0, j = 0, num = 0;
	
	//探索する処理を記述
	while(j <= length2)
	{
		while(i <= length1)
		{
#if compile == 1
		printf("array2[%d] = %d ", j, array2[j]);
		printf("array1[%d] = %d\n", i, array1[i]);
#endif
			if(array2[j] == array1[i])
			{
				counter++;
				#if compile == 1
				printf("counter++ execution.\n");
				#endif
				i++;
				break;
			}
			else
			{
				i++;
			}
		}
		j++;
	}
	
	return counter;
}
main()
{
	int n = 0, i = 0, q = 0;
	int result = 0;
	scanf("%d", &n);
	int S[n];
	init(S, n);
	for(i = 0; i < n; i++)
	{
		scanf("%d", &S[i]);
	}
	scanf("%d", &q);
	int T[q];
	init(T, q);
	for(i = 0; i < q; i++)
	{
		scanf("%d", &T[i]);
	}
	mergesort(S, n);
	mergesort(T, q);
	result = search(S, n, T, q);
	printf("%d\n", result);
	return 0;
}