#include <string>
#include <vector>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <map>
#include <list>
#include <set>
#include <numeric>
#include <queue>
#include <stack>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <climits>
#include <cfloat>
#include <ctime>
#include <complex>
#include <cassert>
#include <iomanip>
#include <tuple>
using namespace std;
typedef long long LL;
typedef pair<int,int> P;

int h,w,s;
int u[33][33];
P dp[32][32][33][33];
int area(int i, int j, int a, int b)
{
	return u[i+a][j+b]-u[i][j+b]-u[i+a][j]+u[i][j];
}
void exec()
{
	cin >> h >> w >> s;
	if(h==0&&w==0&&s==0)exit(0);
	for(int i=1;i<=h;i++){
		for(int j=1;j<=w;j++){
			cin>>u[i][j];
		}
	}
	for(int i=1;i<=h;i++){
		for(int j=1;j<=w;j++){
			u[i][j]+=u[i][j-1];
		}
	}
	for(int i=1;i<=h;i++){
		for(int j=1;j<=w;j++){
			u[i][j]+=u[i-1][j];
		}
	}
	memset(dp,0,sizeof(dp));
	int total=area(0,0,h,w);
	int bound=total-s;
	for(int a=1;a<=h;a++){
		for(int b=1;b<=w;b++){
			for(int i=0;i+a<=h;i++){
				for(int j=0;j+b<=w;j++){
					P v(0,0);
					int ar=area(i,j,a,b);
					if(ar>=bound){
						v=P(1,ar);
					}
					for(int p=1;p<a;p++){
						int f0=dp[i][j][p][b].first;
						int f1=dp[i+p][j][a-p][b].first;
						int s0=dp[i][j][p][b].second;
						int s1=dp[i+p][j][a-p][b].second;
						if(f0&&f1){
							v=max(v,P(f0+f1,min(s0,s1)));
						}
					}
					for(int q=1;q<b;q++){
						int f0=dp[i][j][a][q].first;
						int f1=dp[i][j+q][a][b-q].first;
						int s0=dp[i][j][a][q].second;
						int s1=dp[i][j+q][a][b-q].second;
						if(f0&&f1){
							v=max(v,P(f0+f1,min(s0,s1)));
						}
					}
					dp[i][j][a][b]=v;
				}
			}
		}
	}
	cout << dp[0][0][h][w].first << " " << dp[0][0][h][w].second-bound << endl;
}
int main() {
	while(1)exec();

}