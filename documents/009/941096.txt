#include<cstdio>
#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<complex>
#include<set>
#include<map>
#include<queue>

using namespace std;

#define reps(i,f,n) for(int i=f;i<int(n);i++)
#define rep(i,n) reps(i,0,n)

typedef pair<int,int> pii;

class P{
	public:
	int now,used;
	double val;
	P(int now,double val,int used):now(now),val(val),used(used){}
	bool operator<(const P& a)const{
		return val>a.val;
	}
};

const int M = 33;
const int H = 8;

int visit[M][1<<H];

int main(){
	A:;
	int n,m,r,st,en;
	cin>>n>>m>>r>>st>>en;
	
	if(m==0)return 0;
	
	int hors[H];
	rep(i,n)cin>>hors[i];
	
	vector<pii> edge[M];
	rep(i,r){
		int a,b,c;
		cin>>a>>b>>c;
		edge[a].push_back(pii(b,c));
		edge[b].push_back(pii(a,c));
	}
	
	priority_queue<P> que;
	que.push(P(st,0,0));
	
	rep(i,M)rep(j,1<<H)visit[i][j]=0;
	
	double answer = -1;
	while(1){
		if(que.empty())break;
		
		P u = que.top();
		que.pop();
		
		if(visit[u.now][u.used]==1)continue;
		visit[u.now][u.used]=1;
		
		if(u.now==en){
			answer = u.val;
			break;
		}
		/*
		printf("now=%d ",u.now);
		printf("used=");
		rep(i,n)printf("%d",((u.used&(1<<i))>0));
		printf(" val=%lf\n",u.val);
		*/
		rep(i,edge[u.now].size()){
			int next = edge[u.now][i].first;
			double len = edge[u.now][i].second;
			
			rep(j,n){
				if((u.used & (1<<j))>0)continue;
				que.push( P(next, u.val+len/hors[j], u.used|(1<<j)) );
			}
		}
	}
	
	if(answer==-1)puts("Impossible");
	else printf("%lf\n",answer);
	
	goto A;
}