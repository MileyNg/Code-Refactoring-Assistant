#include <vector>
#include <list>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <deque>
#include <algorithm>
#include <utility>
#include <functional>
#include <sstream>
#include <iostream>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <string>
#include <cstring>
#include <ctime>
#include <climits>
#include <cassert>
#include <memory>
#include <time.h>
using namespace std;
inline int toInt(string s) {int v; istringstream sin(s);sin>>v;return v;}
template<class T> inline string toString(T x) {ostringstream sout;sout<<x;return sout.str();}
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<string> vs;
typedef pair<int, int> pii;
typedef long long ll;
#define ALL(a) (a).begin(),(a).end()
#define RALL(a) (a).rbegin(),(a).rend()
#define EXIST(s,e) ((s).find(e)!=(s).end())
#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define REP(i,n) FOR(i,0,n)
const double EPS = 1e-9;
const double PI  = acos(-1.0);

vi sieve_of_eratosthenes(int n) {
  vi primes(n);
  for (int i = 2; i < n; ++i)
    primes[i] = i;
  for (int i = 2; i*i < n; ++i)
    if (primes[i])
      for (int j = i*i; j < n; j+=i)
        primes[j] = 0;
  return primes;
}
typedef vector<double> vd;
typedef vector<vd> vvd;

int main(){
	cout.precision(30);
	int n;
	cin>>n;
	vi a(n);
	REP(i,n){
		cin>>a[i];
	}

	vi primes=sieve_of_eratosthenes(100000);
	sort(ALL(primes));
	primes.erase(unique(ALL(primes)),primes.end());
	primes.erase(find(ALL(primes),0));
	primes.insert(primes.begin(),1);

	const int MAX=100000;
	vvd dp(n,vd(MAX+1,INT_MAX));
	REP(i,MAX+1){
		dp[0][i]=(double)abs(i-a[0])/a[0];
	}
	REP(i,n-1){
		FOR(j,1,MAX+1){
			for(int k=0;k<primes.size()&&primes[k]*j<=MAX;k++){
				int p=primes[k];
				double confusion=(double)abs(j*p-a[i+1])/a[i+1];
				dp[i+1][j*p]=min(dp[i+1][j*p],max(dp[i][j],confusion));
			}
		}
	}

	double ans=INT_MAX;
	REP(i,MAX){
		ans=min(ans,dp[n-1][i]);
	}
	cout<<ans<<endl;
}