#include <bits/stdc++.h>
using namespace std;

const double eps = 1e-8;
const double inf = 1e10;

bool equals(double a, double b) {
  return abs(a-b) < eps;
}

struct P {
  double x, y, z;
  P() : x(0), y(0), z(0) {}
  P(double x, double y, double z) : x(x), y(y), z(z) {}
};

P operator + (const P &a, const P &b) {
  return P(a.x+b.x, a.y+b.y, a.z+b.z);
}
P operator - (const P &a, const P &b) {
  return P(a.x-b.x, a.y-b.y, a.z-b.z);
}
P operator * (const P &p, const double &a) {
  return P(p.x*a, p.y*a, p.z*a);
}
P operator / (const P &p, const double &a) {
  return P(p.x/a, p.y/a, p.z/a);
}

double dot(P a, P b) {
  return a.x*b.x + a.y*b.y + a.z*b.z;
}

double norm(P a) {
  return dot(a,a);
}

double abs(P a) {
  return sqrt(norm(a));
}

P project(P s1, P s2, P p) {
  P base = s2 - s1;
  double t = dot(p - s1, base)/norm(base);
  return s1 + base*t;
}

P reflect(P s1, P s2, P p) {
  return p + (project(s1, s2, p) - p)*2.0;
}

double getDistanceLP(P s1, P s2, P p) {
  return abs(project(s1, s2, p) - p);
}

P getQ(P s1, P s2, P p, double r) {
  P m = project(s1, s2, p);
  P base = s2 - s1;
  double x = r*r - norm(m-p);
  if(equals(x, 0.0)) x = 0.0;
  else if(x < 0) return P(inf,inf,inf);
  return m - base * sqrt(x) / abs(base);
}

int main() {
  int N;
  P v;
  vector<P> p;
  vector<double> r;
  while(cin >> N && N) {
    p.resize(N);
    r.resize(N);
    cin >> v.x >> v.y >> v.z;
    for(int i = 0; i < N; ++i) {
      cin >> p[i].x >> p[i].y >> p[i].z >> r[i];
    }
    
    P s, t;
    t = v;
    while(1) {
      double mini = inf;
      int k = -1;
      for(int i = 0; i < N; ++i) {
        P q = getQ(s, t, p[i], r[i]);
        if(q.x == inf) continue;
        if(dot(t-s, q-s) < eps) continue;
        double dist = abs(q - s);
        if(mini > dist) {
          mini = dist;
          k = i;
        }
      }
      if(k == -1) break;
      P q = getQ(s, t, p[k], r[k]);
      t = reflect(p[k], q, s);
      s = q;
    }
    printf("%.4f %.4f %.4f\n", s.x, s.y, s.z);
  }
  return 0;
}