#include <iostream>
#include <vector>
#include <cmath>
using namespace std;
const int INF = 1<<28;
int n,m,s,g1,g2;
void warshall_floyd(vector<vector<int> > &cost){
  for(int i = 0;i < n;i++){
	for(int j = 0;j < n;j++){  
	  for(int k = 0;k < n;k++){	  
		cost[j][k] = min(cost[j][k],cost[j][i] + cost[i][k]);
	  }
	}
  }
}
int main(){
  while(cin >> n >> m >> s >> g1 >> g2 &&n){
	vector<vector<int> > cost = vector<vector<int> >(n,vector<int>(n,INF));
	for(int i =0;i < n;i++)cost[i][i] = 0;
	for(int i = 0;i < m;i++){
	  int from,to,c;
	  cin >> from >> to >> c;
	  cost[from-1][to-1] = c;
	}
	warshall_floyd(cost);
	s--;g1--;g2--;
	int ans = INF;
	for(int j = 0;j < n;j++){
	  ans = min(ans,(cost[s][j]+cost[j][g1]+cost[j][g2]));
	}
	cout << ans << endl;
//	cout << min(min(cost[s][g1]+cost[s][g2],cost[s][g1]+cost[g1][g2]),cost[s][g2]+cost[g2][g1]) << endl;
  }
  return 0;
}