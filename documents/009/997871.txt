#include <iostream>
#include <algorithm>
#include <set>
#include <vector>
#include <string>
#include <queue>

using namespace std;
typedef vector<int> vi;
typedef vector<bool> vb;
int const inf = 1e9;
#define loop(i,a,b) for(int i=(a); i<int(b); i++)
#define rep(i,b) loop(i,0,b)
#define iter(it,c) for(auto it=c.begin(); it!=c.end(); ++it)
#define all(c) (c).begin(), (c).end()

typedef int Weight;
struct Edge {
    int src, dst;
    Weight weight;
    Edge(int src, int dst, Weight weight) :
        src(src), dst(dst), weight(weight) { }
};
bool operator < (const Edge &e, const Edge &f) {
    return e.weight != f.weight ? e.weight > f.weight : // !!INVERSE!!
    e.src != f.src ? e.src < f.src : e.dst < f.dst;
}
typedef vector<Edge> Edges;
typedef vector<Edges> Graph;

typedef vector<Weight> Array;
typedef vector<Array> Matrix;

// Dijkstra法で1対多の最短経路を求める
// gは隣接リスト表現のグラフ，sは始点
// distに各頂点までの距離，prevに最短経路である頂点の1つ手前の頂点
void dijk(Graph const&g, int s, vector<Weight> &dist, vi &prev) {
    int n = g.size();
    dist.assign(n, inf); dist[s] = 0;
    prev.assign(n, -1);
    priority_queue<Edge> q; // "e < f" <=> "e.weight > f.weight"
    q.push(Edge(-2, s, 0));
    while (q.size()) {
        Edge e = q.top();
        q.pop();
        if (prev[e.dst] != -1) continue;
        prev[e.dst] = e.src;
        iter(f, g[e.dst]) {
            if (dist[f->dst] > e.weight + f->weight) {
                dist[f->dst] = e.weight + f->weight;
                q.push(Edge(f->src, f->dst, e.weight + f->weight));
            }
        }
    }
}

// 経路復元
// prevはダイクストラ法で求めた手前の頂点，tは終点
vi buildPath(vi const& prev, int t) {
    vi path;
    for (int u = t; u >= 0; u = prev[u])
        path.push_back(u);
    reverse(all(path));
    return path;
}

inline bool in(int x, int y, int h, int w){
    return 0 <= x && 0 <= y&&y < h&&x < w;
}

int main(){
    int w, h;
    while (cin >> w >> h && w | h){
        cin.ignore();
        vector<string> gs(h * 2 - 1);
        rep(i, h * 2 - 1){
            getline(cin, gs[i]);
            gs[i].resize(w * 2 - 1, ' ');
        }

        int const dx[] = { 1, 0, -1, 0 };
        int const dy[] = { 0, 1, 0, -1 };

        Graph g(h*w);
        for (int y = 0; y < gs.size(); y += 2){
            for (int x = 0; x < gs[0].size(); x += 2){
                for (int d = 0; d < 4; d++){
                    int bx = x + dx[d];
                    int by = y + dy[d];
                    if (!in(bx, by, gs.size(), gs[0].size())) continue;
                    if (gs[by][bx] == '0'){
                        int nx = bx + dx[d];
                        int ny = by + dy[d];

                        int v1 = x / 2 + y / 2 * w;
                        int v2 = nx / 2 + ny / 2 * w;
                        g[v1].push_back(Edge(v1, v2, 1));
                        g[v2].push_back(Edge(v2, v1, 1));
                    }
                }
            }
        }

        vi dist, prev;
        dijk(g, 0, dist, prev);
        int d = dist.back();
        if (d == inf) cout << 0 << endl;
        else cout << d + 1 << endl;
    }
}