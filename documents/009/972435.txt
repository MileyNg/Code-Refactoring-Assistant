#include <bits/stdc++.h>
using namespace std;

#define dump(n) cout<<"# "<<#n<<'='<<(n)<<endl
#define repi(i,a,b) for(int i=int(a);i<int(b);i++)
#define peri(i,a,b) for(int i=int(b);i-->int(a);)
#define rep(i,n) repi(i,0,n)
#define per(i,n) peri(i,0,n)
#define all(c) begin(c),end(c)
#define mp make_pair
#define mt make_tuple

typedef unsigned int uint;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<double> vd;
typedef vector<vd> vvd;
typedef vector<string> vs;

const int INF=1e9;
const int MOD=1e9+7;
const double EPS=1e-9;

template<typename T1,typename T2>
ostream& operator<<(ostream& os,const pair<T1,T2>& p){
	return os<<'('<<p.first<<','<<p.second<<')';
}
template<typename T>
ostream& operator<<(ostream& os,const vector<T>& a){
	os<<'[';
	rep(i,a.size()) os<<(i?" ":"")<<a[i];
	return os<<']';
}

struct Edge{
	int src,dst,weight,count;
	Edge(){}
	Edge(int s,int d,int w,int c=0):src(s),dst(d),weight(w),count(c){}
};
typedef vector<vector<Edge>> Graph;
bool operator<(const Edge& a,const Edge& b){return a.weight<b.weight;}
bool operator>(const Edge& a,const Edge& b){return a.weight>b.weight;}

int main()
{
	for(int n,m,c;cin>>n>>m>>c && n|m|c;){
		Graph g(n);
		rep(i,m){
			int u,v,w; cin>>u>>v>>w; u--,v--;
			g[u].emplace_back(u,v,w);
		}
		vvi dist(n,vi(n,INF));
		priority_queue<Edge,vector<Edge>,greater<Edge>> pq;
		pq.emplace(-1,0,0,0);
		while(pq.size()){
			Edge cur=pq.top(); pq.pop();
			if(dist[cur.dst][cur.count]<=cur.weight) continue;
			dist[cur.dst][cur.count]=cur.weight;
			for(Edge e:g[cur.dst]){
				pq.emplace(e.src,e.dst,cur.weight+e.weight,cur.count);
				if(cur.count==n-1) continue;
				pq.emplace(e.src,e.dst,cur.weight,cur.count+1);
			}
		}
		rep(i,n) if(dist[n-1][i]<=c){
			cout<<i<<endl;
			break;
		}
	}
}