#include<bits/stdc++.h>
using namespace std;
const int INF = 1 << 30;
typedef pair< int, int > Pi;
#define MAX_V 202
int n;
class Primal_Dual{
private:
  struct edge{
    int to, cap, cost, rev;
  };
  int V;
  vector< edge > info[MAX_V];
  int h[MAX_V], dist[MAX_V], prevv[MAX_V], preve[MAX_V];
public:
  void add_edge(int from,int to,int cap,int cost){ //from,to,容量,コスト
    info[from].push_back((edge){to,cap,cost,info[to].size()});
    info[to].push_back((edge){from,0,-cost,info[from].size()-1});
  }
  Primal_Dual(){};
  Primal_Dual(int size):V(size){};
  int min_cost_flow(int s,int t,int f){ //sからtへの最小費用流
    int ret = 0;
    fill_n( h, V, 0);
    while(f > 0){
      priority_queue< Pi, vector< Pi >, greater< Pi > > que;
      fill_n( dist, V, INF);
      que.push(Pi(0,s));
      dist[s] = 0;
      while(!que.empty()){
        Pi p = que.top(); que.pop();
        if(dist[p.second] < p.first) continue;
        for(int i = 0; i < info[p.second].size(); i++){
          edge& e = info[p.second][i];
          if(e.cap > 0 && dist[e.to] > dist[p.second] + e.cost + h[p.second] - h[e.to]){
            dist[e.to] = dist[p.second] + e.cost + h[p.second] - h[e.to];
            prevv[e.to] = p.second, preve[e.to] = i;
            que.push(Pi(dist[e.to],e.to));
          }
        }
      }
      if(dist[t] == INF) return -1;
      for(int v = 0; v < V; v++) h[v] += dist[v];
      int d = f;
      for(int v = t; v != s; v = prevv[v]){
        d = min( d, info[prevv[v]][preve[v]].cap);
      }
      f -= d;
      ret += d * h[t];
      for(int v = t; v != s; v = prevv[v]){
        edge& e = info[prevv[v]][preve[v]];
        e.cap -= d;
        info[v][e.rev].cap += d;
      }
    }
    return ret;
  }
  void dump(char F[][100]){
    vector< string > ret;
    for(int i = 0; i < n; i++){
      for(int j = 0; j < info[i].size(); j++){
        if(info[i][j].cap == 0){
          const int pos = info[i][j].to - n;
          if(F[i][pos] == '.'){
            stringstream ss;
            ss << i + 1 << " " <<  pos + 1 << " write";
              ret.push_back(ss.str());
          }
          for(int k = 0; k < n; k++){
            if(k == pos) continue;
            if(F[i][k] == 'o'){
              stringstream ss;
              ss << i + 1 << " " << k + 1 << " erase";
              ret.push_back(ss.str());
            }
          }
          break;
        }
      }
    }
    cout << ret.size() << endl;
    for(int i = 0 ; i < ret.size(); i++){
      cout << ret[i] << endl;
    }
  }
};

int main(){

  int n, p[100];
  cin >> n;
  for(int i = 0; i < n; i++){
    cin >> p[i];
  }

  const int from = n * 2, to = n * 2 + 1;

  Primal_Dual java(2 + 2 * n);

  for(int i = 0; i < n; i++){
    java.add_edge( from, i, 1, 0);
    java.add_edge( n + i, to, 1, 0);
  }
  for(int i = 0; i < n; i++){
    for(int j = 0; j < n; j++){
      if(p[i] != j + 1){
        java.add_edge( i, n + j, 1, p[i] * abs( i - j));
      }
    }
  }
  cout << java.min_cost_flow( from, to, n) << endl;
}