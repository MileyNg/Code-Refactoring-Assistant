using namespace std;
#include <bits/stdc++.h>

// If this structure is used for two-dimensional surface,
// it assumes that the face id[0] faces the positive direction of the Y axis,
// the face id[1] faces the positive direction of the X axis
// and id[2] is top of the dice.
struct Dice {
  int id[6], cnt;
  const static int f[3][3];

  Dice() { init(); }

  void init() {
    for(int i = 0; i < 6; ++i) {
      id[i] = i;
    }
    cnt = 0;
  }

  // type (0:spin, 1:rollX, 2:rollY)
  // dir 1( ccw     neg      pos   )
  //    -1( cw      pos      neg   )
  void rotate(int type, int dir = 1) {
    const int *v = f[type];
    int a,b,c,t; a=v[0]; b=v[1]; c=v[2]; t=id[type];
    if(dir < 0) swap(a,c);
    id[type]=id[a]; id[a]=id[b]; id[b]=id[c]; id[c]=t;
  }

  bool next() {
    ++cnt;
    if(cnt == 24) {
      rotate(0,-1);
      rotate(1,-1);
      cnt = 0;
      return false;
    }
    if(cnt == 4*3) {
      rotate(2,-1);
      rotate(0,-1);
    } else if(cnt%4 == 0) {
      rotate(2);
    } else {
      rotate(0);
    }
    return true;
  }

  void roll(int dir) {
    //const static int dx[] = {1,0,-1,0};
    //const static int dy[] = {0,1,0,-1};
    switch(dir) {
      case 0: rotate(1,-1); break;
      case 1: rotate(2, 1); break;
      case 2: rotate(1, 1); break;
      case 3: rotate(2,-1); break;
    }
  }

  bool operator < (const Dice &d) const {
    for(int i = 0; i < 3; ++i)
      if(id[i] != d.id[i]) return id[i] < d.id[i];
    return false;
  }

  void show() {
    cout << id[4] << " / \\ " << id[5] << endl;
    cout << " /   \\" << endl;
    cout << "|\\ " << id[2] << " /|" << endl;
    cout << "|" << id[0] << "\\ /" << id[1] << "|" << endl;
    cout << " \\ | /" << endl;
    cout << "  \\|/" << endl;
    cout << "   " << id[3] << endl;
  }
};
const int Dice::f[3][3] = {{4,5,1},{3,4,2},{5,3,0}};

vector<string> F;
vector<int> used;
int S[2][2][2];
Dice G[2][2][2];

bool equals(char a, char b) {
  return ((bool)isupper(a) ^ (bool)isupper(b)) && (toupper(a) == toupper(b));
}

bool rec(int pos) {
  const static int X[8] = {0,1,0,0,1,1,0,1};
  const static int Y[8] = {0,0,1,0,1,0,1,1};
  const static int Z[8] = {0,0,0,1,0,1,1,1};
  const static int size[8] = {0,1,1,1,2,2,2,3};
  const static int dx[8][3] = {
    {-1,-1,-1},
    {0,-1,-1},
    {0,-1,-1},
    {0,-1,-1},
    {1,0,-1},
    {1,0,-1},
    {0,0,-1},
    {1,1,0}
  };
  const static int dy[8][3] = {
    {-1,-1,-1},
    {0,-1,-1},
    {0,-1,-1},
    {0,-1,-1},
    {0,1,-1},
    {0,0,-1},
    {1,0,-1},
    {1,0,1}
  };
  const static int dz[8][3] = {
    {-1,-1,-1},
    {0,-1,-1},
    {0,-1,-1},
    {0,-1,-1},
    {0,0,-1},
    {0,1,-1},
    {0,1,-1},
    {0,1,1}
  };
  const static int p[8][3] = {
    {-1,-1,-1},
    {4,-1,-1},
    {5,-1,-1},
    {3,-1,-1},
    {5,4,-1},
    {3,4,-1},
    {3,5,-1},
    {3,5,4}
  };
  if(pos == 8) return true;
  int x = X[pos];
  int y = Y[pos];
  int z = Z[pos];
  //cout << x << ", " << y << ", " << z << endl;
  for(int i = 0; i < 8; ++i) {
    if(used[i]) continue;
    if(pos == 0 && i != 0) continue;
    S[x][y][z] = i;
    Dice &d = G[x][y][z];
    used[i] = true;
    do {
      try {
        for(int k = 0; k < size[pos]; ++k) {
          const int &t = S[dx[pos][k]][dy[pos][k]][dz[pos][k]];
          if(t == -1) continue;
          const Dice &e = G[dx[pos][k]][dy[pos][k]][dz[pos][k]];
          if(!equals(F[i][d.id[p[pos][k]]], F[t][e.id[5-p[pos][k]]])) throw 0;
        }
        if(rec(pos+1)) return true;
      } catch(...) {}
    } while(d.next());
    used[i] = false;
    S[x][y][z] = -1;
  }
  return false;
}

int main() {
  while(1) {
    F.clear();
    for(int i = 0; i < 8; ++i) {
      string s;
      cin >> s;
      if(s == "0") return 0;
      string t(6,' ');
      t[2] = s[0];
      t[0] = s[1];
      t[1] = s[2];
      t[4] = s[3];
      t[5] = s[4];
      t[3] = s[5];
      F.push_back(t);
    }
    used = vector<int>(8,0);
    fill(G[0][0], G[2][0], Dice());
    fill(S[0][0], S[2][0], -1);
    if(rec(0)) cout << "YES" << endl;
    else cout << "NO" << endl;
  }
  return 0;
}