#include<cstdio>
#include<vector>
#include<cstring>
#include<queue>
#include<cassert>
#define rep(i,n) for(int i=0;i<(int)(n);i++)
using namespace std;

int m,a[6],s,g,n[330];
int d[330];
vector<int> G[330];

int main(){
  scanf("%d",&m);
  rep(i,6)scanf("%d",a+i);
  scanf("%d%d",&s,&g); s--; g--;
  rep(i,m)scanf("%d",n+i);

  rep(i,m)rep(j,6){
    int nxt = i+a[j];
    if(0<=nxt && nxt<m){
      nxt += n[nxt];
      G[nxt].push_back(i);
    }
    nxt = i-a[j];
    if(0<=nxt && nxt<m){
      nxt += n[nxt];
      G[nxt].push_back(i);
    }
  }
  
  memset(d,-1,sizeof(d));
  d[g] = 0;
  queue<int> q;
  q.push(g);

  while(q.size()){
    int cur = q.front(); q.pop();
    rep(i,G[cur].size()){
      int nxt = G[cur][i];
      if(d[nxt]<0){
	d[nxt] = d[cur]+1;
	q.push(nxt);
      }
    }
  }

  while(true){
    int dice;
    scanf("%d",&dice); dice--;

    int res = 0, nxt = s + a[dice];
    if(0<=nxt && nxt<m){
      nxt += n[nxt];
      if(d[nxt]>=0 && d[s]>d[nxt]){
      s = nxt; res = 1;
    } 

    nxt = s - a[dice];
    if(0<=nxt && nxt<m){
      nxt += n[nxt];
      if(d[nxt]>=0 && d[s]>d[nxt]){
      s = nxt; res = -1;
    } 
    
    printf("%d\n",res); fflush(stdout);
    if(s == g)return 0;
  }
}