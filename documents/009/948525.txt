#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <iostream>
#include <math.h>
#include <assert.h>
#include <vector>
#include <queue>
#include <string>
#include <map>
#include <set>

using namespace std;
typedef long long ll;
typedef unsigned int uint;
typedef unsigned long long ull;
static const double EPS = 1e-9;
static const double PI = acos(-1.0);

#define REP(i, n) for (int i = 0; i < (int)(n); i++)
#define FOR(i, s, n) for (int i = (s); i < (int)(n); i++)
#define FOREQ(i, s, n) for (int i = (s); i <= (int)(n); i++)
#define FORIT(it, c) for (__typeof((c).begin())it = (c).begin(); it != (c).end(); it++)
#define MEMSET(v, h) memset((v), h, sizeof(v))

struct Team {
  int index;
  int cnts[10];
  int solved;
  int penalty;
  Team() {;}
  bool operator<(const Team &rhs) const {
    if (solved != rhs.solved) { return solved < rhs.solved; }
    if (penalty != rhs.penalty) { return penalty > rhs.penalty; }
    return index < rhs.index;
  }
  void ac(int t, int p) {
    solved++;
    penalty += t + cnts[p] * 20;
  }
  void wa(int t, int p) {
    cnts[p]++;
  }
};

Team teams[100];
int M, T, P, R;
int main() {
  while (cin >> M >> T >> P >> R, M) {
    MEMSET(teams, 0);
    REP(i, T) { teams[i].index = i; }
    REP(i, R) {
      int m, t, p, j;
      cin >> m >> t >> p >> j;
      t--; p--;
      if (j == 0) {
        teams[t].ac(m, p);
      } else {
        teams[t].wa(m, p);
      }
    }
    sort(teams, teams + T);
    reverse(teams, teams + T);
    REP(i, T) {
      printf("%d", teams[i].index + 1);
      if (i != T - 1) {
        if (teams[i].solved == teams[i + 1].solved && teams[i].penalty == teams[i + 1].penalty) {
          printf("=");
        } else {
          printf(",");
        }
      }
    }
    puts("");
  }
}