#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <sstream>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <numeric>
#include <cctype>
#include <tuple>
#include <iterator>
#include <bitset>
#include <random>
#include <assert.h>
#include <unordered_map>
#include <array>
#include <ctime>

#ifdef _MSC_VER
#include <agents.h>
#endif

#define FOR(i, a, b) for(int i = (a); i < (int)(b); ++i)
#define rep(i, n) FOR(i, 0, n)
#define ALL(v) v.begin(), v.end()
#define REV(v) v.rbegin(), v.rend()
#define MEMSET(v, s) memset(v, s, sizeof(v))
#define X first
#define Y second
#define MP make_pair
#define MT make_tuple

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> P;
typedef unsigned int uint;

struct UF{
	vector<int> par;
	int n;
	UF(int size){
		n = size;
		par = vector<int>(n);
		rep(i, n) par[i] = i;
	}

	int find(int x){
		if (x == par[x]) return x;
		return par[x] = find(par[x]);
	}

	void unite(int x, int y){
		par[find(x)] = find(y);
	}

	bool same(int x, int y){
		return find(x) == find(y);
	}
};

int main(){
	auto sq = [](double x){return x*x; };

	cout.setf(ios::fixed);
	cout.precision(3);

	int n;
	while (cin >> n, n){
		vector<double> x(n), y(n), z(n), r(n);
		rep(i, n) cin >> x[i] >> y[i] >> z[i] >> r[i];

		vector<tuple<double, int, int>> edge;
		rep(i, n) rep(j, i){
			double len = sqrt(sq(x[i] - x[j]) + sq(y[i] - y[j]) + sq(z[i] - z[j]));
			len -= r[i] + r[j];
			len = max(len, 0.);
			edge.push_back(MT(len, i, j));
		}
		sort(ALL(edge));

		UF uf(n);

		double ans = 0;
		for (auto e : edge){
			double cost;
			int s, t;
			tie(cost, s, t) = e;
			if (uf.same(s, t)) continue;
			uf.unite(s, t);
			ans += cost;
		}
		cout << ans << endl;
	}

	return 0;
}