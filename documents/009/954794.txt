
//=====================================================
// 
// (setq backup-inhibited t)
// (setq auto-save-default nil)
// 
// (column-number-mode t)
// (setq-default tab-width 2 indent-tabs-mode nil)
// 
// (global-set-key "\C-h" 'delete-backward-char)
// 
// (setq indent-line-function 'indent-relative-maybe)
// (global-set-key "\C-m" 'newline-and-indent)
// 
//=====================================================

#include <iostream>
#include <iomanip>
#include <vector>
#include <string>
#include <map>
#include <algorithm>
#include <complex>
#include <queue>
using namespace std;

#define REP(i,n) for(int i=0;i<(int)(n);i++)
typedef complex<long double> P;
typedef vector<P> L;

const long double EPS=1e-9;
const long double INF=1e+12; 

double cross(const P& a, const P& b) {
    return imag(conj(a)*b);
}
double dot(const P& a, const P& b) {
    return real(conj(a)*b);
}

int ccw(P a, P b, P c) {
    b -= a; c -= a;
    if (cross(b, c) > 0)   return +1;       // counter clockwise
    if (cross(b, c) < 0)   return -1;       // clockwise
    if (dot(b, c) < 0)     return +2;       // c--a--b on line
    if (norm(b) < norm(c)) return -2;       // a--b--c on line
    return 0;
}

bool intersectSS(const L &s, const L &t) {
    return ccw(s[0],s[1],t[0])*ccw(s[0],s[1],t[1]) <= 0 &&
           ccw(t[0],t[1],s[0])*ccw(t[0],t[1],s[1]) <= 0;
}

long double dijkstra(const vector<vector<pair<int,long double>>>& g){
  priority_queue<pair<long double,int>,vector<pair<long double,int>>,greater<pair<long double,int>>> q;
  q.push(pair<long double,int>(0.0,0));
  vector<long double> dist(g.size(),INF);
  dist[0]=0.0;
  while(!q.empty()){
    auto p=q.top();
    q.pop();
    long double d=p.first;
    int i=p.second;
    if(d > dist[i])continue;
    for(auto e:g[i]){
      int j=e.first;
      long double l=e.second;
      if(dist[j] > dist[i]+l){
        dist[j] = dist[i]+l;
        q.push(make_pair(dist[j],j));
      }
    }
  }
  return dist[1];
}

int main() {
  int na,nb;
  cin>>na>>nb;
  vector<P> a(na);
  vector<P> b(nb);
  REP(i,na){
    int x,y;
    cin>>x>>y;
    a[i] = P(x,y);
  }
  REP(i,nb){
    int x,y;
    cin>>x>>y;
    b[i] = P(x,y);
  }
  vector<vector<pair<int,long double>>> ea(na);
  vector<vector<pair<int,long double>>> eb(nb);
  L la={a[0],a[1]};
  L lb={b[0],b[1]};
  REP(i,na){
    REP(j,na){
      if(i==j)continue;
      L l = {a[i],a[j]};
      if(!intersectSS(lb,l)){
        ea[i].push_back(make_pair(j,abs(a[i]-a[j])));
      }
    }
  }
  REP(i,nb){
    REP(j,nb){
      if(i==j)continue;
      L l = {b[i],b[j]};
      if(!intersectSS(la,l)){
        eb[i].push_back(make_pair(j,abs(b[i]-b[j])));
      }
    }
  }
  double dist1 = dijkstra(ea) + abs(b[0]-b[1]);
  double dist2 = dijkstra(eb) + abs(a[0]-a[1]);
  long double d = min(dist1,dist2);
  if(d<INF)
    cout<<fixed<<setprecision(12)<<d<<endl;
  else
    cout<<-1<<endl;
  return 0;
}