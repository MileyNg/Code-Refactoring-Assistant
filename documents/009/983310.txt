#include <iostream>
#include <cstdio>
#include <iomanip>
#include <vector>
#include <map>
#include <set>
#include <queue>
#include <bitset>
#include <stack>
#include <utility>
#include <numeric>
#include <algorithm>
#include <functional>
#include <cctype>
#include <complex>
#include <string>
#include <sstream>
#include <fstream>
#include <cassert>
using namespace std;

//common
typedef long long i64,ll;

#define BR "\n"
#define ALL(c) (c).begin(),(c).end()
#define REP(i,n) for(int i=0;i<(int)(n);++i)
#define FOR(i,l,r) for(int i=(l);i<(int)(r);++i)
#define EACH(it,o) for(auto it = (o).begin(); it != (o).end(); ++it)
#define IN(l,v,r) ((l)<=(v) && (v)<(r))

//debug
#ifdef NDEBUG
#define DUMP(x)
#define DUMPLN(x)
#define DEBUG(x)
#define DEBUGLN(x)
#define LINE()
#define LINELN()
#define CHECK(exp,act)
#define STOP(e)
#else
#define DUMP(x)  cerr << #x << " = " << (x)
#define DUMPLN(x)  DUMP(x) <<endl
#define DEBUG(x) DUMP(x) << LINE() << " " << __FILE__
#define DEBUGLN(x) DEBUG(x)<<endl
#define LINE()    cerr<< " (L" << __LINE__ << ")"
#define LINELN()    LINE()<<endl
#define CHECK(exp,act)  if(exp!=act){DUMPLN(exp);DEBUGLN(act);}
#define STOP(e)  CHECK(e,true);if(!(e)) exit(1);
#endif

template<class T> inline string toString(const vector<T>& x) {
	stringstream ss;
	REP(i,x.size()){
		if(i!=0)ss<<" ";
		ss<< x[i];
	}
	return ss.str();
}

template<class T> inline string toString(const vector<vector<T> >& map) {
	stringstream ss;
	REP(i,map.size()){
		if(i!=0)ss<<BR;
		ss<< toString(map[i]);
	}
	return ss.str();
}
template<class K,class V>  string toString(map<K,V>& x) {
	string res;stringstream ss;
	for(auto& p:x)ss<< p.first<<":" << p.second<<" ";
	return ss.str();
}

string BITtoString(int bit){
    stringstream ss;
    while(bit!=0){ss<<(bit%2);bit/=2;}
    string res=ss.str();reverse(ALL(res));
    return res;
}

template<typename T,typename V> inline T pmod(T v,V MOD){
	return (v%MOD+MOD)%MOD;
}


int M,T,P,R;
class Team{
public:
	int id;int sc;
	vector<int> wts;
	int time;
	Team(int id,int sc,int time):id(id),sc(sc),time(time){
		wts=vector<int>(P);
	}

	bool operator < (const Team& r) const{
		if(sc!=r.sc)return sc<r.sc;
		else if(time!=r.time)return time>r.time;
		return id<r.id;
	}

	bool operator > (const Team& r) const{
		if(sc!=r.sc)return sc>r.sc;
		else if(time!=r.time)return time<r.time;
		return id>r.id;
	}
};

class Main{
public:
	
	vector<int> ms,ts,ps,js;

	bool input(){
		cin >> M >> T >> P >> R;if(M==0)return false;

		ms=vector<int>(R);ts=vector<int>(R);
		ps=vector<int>(R);js=vector<int>(R);

		REP(i,R){
			cin >> ms[i] >> ts[i] >> ps[i] >> js[i];ts[i]--;
		}
		return true;
	}

	void run(){

		while(input()){
			vector<Team> teams;  
			REP(i,T)teams.push_back(Team(i,0,0));
			
			REP(i,R){
				if(js[i]==0){
					Team& t=teams[ts[i]];
					t.sc++;
					t.time+=ms[i];
					t.time+=t.wts[ps[i]];
				}else{
					Team& t=teams[ts[i]];
					t.wts[ps[i]]+=20;
				}
			}

			//REP(i,T)teams[i].time/=60;

			sort(ALL(teams),greater<Team>());
			int psc=-1,ptime=-1;
			stringstream res;
			REP(i,T){
				if(i!=0){
					if(teams[i].sc==psc && teams[i].time==ptime){
						res<<"=";
					}else{
						res<<",";
					}
				}
				res<<teams[i].id+1;
				psc=teams[i].sc;
				ptime=teams[i].time;
			}
			cout << res.str()<<endl;
		}
		
	}
};

 int main(){
	//ios::sync_with_stdio(false);
 	Main().run();
 	return 0;
 }