#include <iostream>
#include <queue>
#include <map>

using namespace std;

typedef long long ll;
#define rep(i, n) for(int i=0; i<(n); ++i)
#define mp(a, b) make_pair(a, b)

const int adj[] = {1, 3, -1, -3};
int ch, cv;

inline void bitswap(ll &b, int i, int j, int n){
    ll x = ((b >> i) ^ (b >> j)) & ((1UL << n) - 1);
    b ^= ((x << i) | (x << j));
}

inline int zero(ll b){
    for(int k=8; ; --k, b>>=4)if(!(b & 0x0F))return k;
}

int solve(ll s, ll g){
    map<ll, int> mem;
    typedef pair<int, ll> state;
    priority_queue<state, vector<state>, greater<state> > q;
    mem[s] = 0;
    for(q.push(mp(0, s)); !q.empty();){
        state pzl = q.top(); q.pop();
        if(pzl.second == g)break;
        int cur = zero(pzl.second);
        rep(k, 4){
            int nxt = (cur + adj[k] + 9) % 9;
            int cost = pzl.first + (k & 1? cv: ch);
            bitswap(pzl.second, (8 - cur) * 4, (8 - nxt) * 4, 4);
            if(!mem.count(pzl.second) || cost < mem[pzl.second]){
                q.push(mp(cost, pzl.second));
                mem[pzl.second] = cost;
            }
            bitswap(pzl.second, (8 - cur) * 4, (8 - nxt) * 4, 4);
        }
    }
    return mem[g];
}

ll in(){
    ll k, res = 0;
    for(int i=32; i>=0; res|=k<<i, i-=4)cin >> k;
    return res;
}

int main(){
    while(cin >> ch >> cv, ch|cv)cout << solve(in(), in()) << '\n';
    return 0;
}