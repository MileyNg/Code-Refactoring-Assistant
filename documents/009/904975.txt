#include <cstdio>

#define FOR( i, k, n ) for ( int i = ( k ); i < ( int )( n ); ++i )
#define REP( i, n ) FOR( i, 0, n )

#define MAX_S 12
#define MAX_N 1000000

// トライ木っぽいもの
struct t_Node {
	bool end;
	int child[ 4 ];
};

void Init( void );
void Insert( const char* );
bool Find( const char* );

t_Node nodes[ MAX_N ];
int next_id;

int main() {
	Init();
	char ch[ MAX_S + 1 ];
	int n;  scanf( "%d", &n );
	while( n-- ) {
		scanf( "%s", ch );
		if( ch[ 0 ] == 'i' ) {  // insert
			scanf( "%s", ch );
			Insert( ch );
		} else {  // find
			scanf( "%s", ch );
			if( Find( ch ) ) printf( "yes\n" );
			else printf( "no\n" );
		}
	}
	return 0;
}

int Index( char ch ) {
	switch( ch ) {
	case 'A' : return 0;
	case 'C' : return 1;
	case 'G' : return 2;
	case 'T' : return 3;
	};
	return -1;
}

void Init() {
	REP( i, MAX_N ) {
		nodes[ i ].end = false;
		REP( j, 4 ) nodes[ i ].child[ j ] = -1;
	}
	next_id = 1;
	return ;
}

void Insert( const char* word ) {
	int s = 0;
	for( int i = 0; word[ i ] != '\0'; ++i ) {
		int index = Index( word[ i ] );
		int next_s = nodes[ s ].child[ index ];
		if( next_s == -1 ) {
			nodes[ s ].child[ index ] = next_id;
			s = next_id++;
		} else s = next_s;
	}
	nodes[ s ].end = true;
	return ;
}

bool Find( const char* word ) {
	int s = 0;
	for( int i = 0; word[ i ] != '\0'; ++i ) {
		int index = Index( word[ i ] );
		int next_s = nodes[ s ].child[ index ];
		if( next_s == -1 ) return false;
		else s = next_s;
	}
	return nodes[ s ].end;
}