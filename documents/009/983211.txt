#include <iostream>
#include <cmath>
#include <algorithm>
#include <vector>
#include <map>
#include <string>
#include <stack>
#include <queue>

#define loop(lp) for(int lp2 = 0; lp2 < lp; lp2 ++)
#define ascent(i, a, b) for(int i = a; i < b; i ++)

#define pb push_back
#define ii pair<int, int>

using namespace std;

vector<string> shop;
queue<ii> pos;

int dx[4] = {-1, 0, 1, 0};
int dy[4] = {0, -1, 0, 1};

int w, h;

bool dfs(int px, int py) {
  int _map[1000][1000] = {0};
  while(!pos.empty()) { pos.pop(); }

  pos.push(make_pair(0, 0));

  while(!pos.empty()) {
    int x = pos.front().first, y = pos.front().second;
    pos.pop();

    if(_map[y][x] == 0) {
      _map[y][x] = 1;
      ascent(i, 0, 4) {
	int _x = x + dx[i];
	int _y = y + dy[i];
	
	if(0 <= _x && _x < w && 0 <= _y && _y < h) {
	  if(_map[_y][_x] == 0 && shop[_y][_x] == '.') {
	    pos.push(make_pair(_x, _y));
	  }
	  if(shop[_y][_x] == 't') {
	    return true;
	  }
	}
      }
    }
    //else if() {
    //}
  }

  return false;
}

int main() {
  int n;

  cin >> w >> h;
  ascent(i, 0, h) {
    string tmp;
    cin >> tmp;
    shop.pb(tmp);
  }

  cin >> n;
  ascent(i, 0, n+1) {
    int x, y;

    if(dfs(x, y)) {
      cout << i << endl;
      return 0;
    }
    cin >> x >> y;

    shop[y][x] = '.';
  }

  cout << -1 << endl;
  return 0;
}