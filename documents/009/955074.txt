//各データセットごとに出力をしてもよい。
//というか入力→出力→入力…でも内容があっていれば良いらしい。
//仕様が難しいorzちょっと実装したくなくなる

#include<iostream>
#include<string.h>
#include<string>
#include<stdlib.h>
#include<string.h>
#include<algorithm>
#include<vector>
#include<map>
#include<stdio.h>
using namespace std;

typedef pair<string,int> P;

int n;
char buffer[1026];
vector<P>  vstr;
map<string,int> mstr;
map<string,int>::iterator mit;

char key;

int compare( const P &s1,const P &s2 ){
	P *v1 = (P*)&s1;
	P *v2 = (P*)&s2;
	if( v1->second != v2->second )
		return v2->second - v1->second;
	else
		return strcmp( v1->first.c_str() ,v2->first.c_str() );
}

int main()
{
	int i,j,k;
	for( i = 0; cin >> n;i++ ){
		if( n == 0 )
			break;
		for( j = 0;j < n;j++ ){
			fgets( buffer,1024,stdin );
			if( buffer[0] == '\n' || buffer[0] == '\r' ){
				j--;
				continue;
			}

			int slen = strlen( buffer );
			for( k = 0;	k < slen; ){
				char str[22];
				sscanf( buffer+k,"%s",str );
				if( mstr.find( string(str) ) == mstr.end() ){
					mstr.insert( make_pair(string(str),1) );
				}
				else{
					mstr[ string(str) ]++;
				}
				k += strlen( str );
			}
			cin >> key;
		}
		//mstrの情報をvstrにコピー(ただし、mstrのキーについて、キー[0] == keyのもののみ)
		for( mit = mstr.begin(); mit != mstr.end(); mit++ )
		{
			if( ( (*mit).first )[0] == key )
				vstr.push_back( P( (*mit).first,(*mit).second ) );
		}
		if( vstr.empty() ){
			cout << "NA" << endl;
		}
		else{
			int vsize = vstr.size();
			sort( vstr.begin(),vstr.end() );
			for( j = 0;j < 5 && j < vsize;j++ ){
				cout << vstr[j].first;
				if( j == vsize-1 )
					cout << endl;
				else
					cout << " ";
			}
		}
		vstr.clear();
		mstr.clear();
	}
}