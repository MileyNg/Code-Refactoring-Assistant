#include <bits/stdc++.h>

using namespace std;

#define MP make_pair

typedef pair<int, int> PII;

const int SIZE = 100;

char line[SIZE], t[SIZE];
set<int> memo[SIZE][SIZE];
set<PII> used;
 
void eval(int const l, int const r) {
   
  set<int>& ret = memo[l][r];
  if(l == r) return;
   
  if(used.count(MP(l, r))) return;
  used.insert(MP(l, r));
   
  // check is digits [l, r)
  bool digits = true;
  for(int i=l; i<r; i++) { digits = digits && isdigit(line[i]); }
  strncpy(t, line+l, r-l); t[r-l+1] = 0;
  if(digits) { ret.insert(atoi(t)); return; }
   
  int par = 0; bool check = true;
  for(int i=l; i<r-1; i++) {
    if(line[i] == '(') { par ++; }
    if(line[i] == ')') { par --; }
    if(par == 0) { check = false; }
  }
   
  // "(expr)"
  if(check) {
    if(line[r-1] == ')') {
      eval(l+1, r-1); ret = memo[l+1][r-1]; return;
    }
  }
   
  par = 0;
  // parsing loop
  for(int i=l; i<r; i++) {
    if(line[i] == '(') { par ++; }
    if(line[i] == ')') { par --; }
    if(par != 0) continue;
     
    switch(line[i]) {
    case '+': case '-': case '*': case '/': {
      eval(l, i); eval(i+1, r);
      set<int>::iterator iter_a, iter_b;
      for(iter_a = memo[l][i].begin(); iter_a!=memo[l][i].end(); iter_a++) {
        for(iter_b = memo[i+1][r].begin(); iter_b!=memo[i+1][r].end(); iter_b++) {
          if(line[i] == '+') { ret.insert(*iter_a + *iter_b); }
          if(line[i] == '-') { ret.insert(*iter_a - *iter_b); }
          if(line[i] == '*') { ret.insert(*iter_a * *iter_b); }
          if(line[i] == '/') {
            if(*iter_b == 0) continue;
            ret.insert(*iter_a / *iter_b);
          }
        }
      }
      break;
    }
    default:;
    }
  } // for parsing loop
}
 
int main() {
   
  while(1) {
    scanf("%s\n", line);
    for(int i=0; i<SIZE; i++)
      for(int j=0; j<SIZE; j++)
        memo[i][j].clear();
     
    used.clear();
     
    if(0==strcmp(line, "#")) break;
    eval(0, strlen(line));
    cout << memo[0][strlen(line)].size() << endl;
  }
   
  return 0;
}