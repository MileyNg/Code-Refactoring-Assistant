#include<bits/stdc++.h>

#define REP(i,s,n) for(int i=s;i<n;i++)
#define rep(i,n) REP(i,0,n)
#define IINF (INT_MAX)

using namespace std;

struct Data{
  int x,y,dir,P,Q,cost,px,py;
  Data(int x=IINF,int y=IINF,int dir=IINF,int P=IINF,int Q=IINF,int cost=IINF,int px=IINF,int py=IINF):x(x),y(y),dir(dir),P(P),Q(Q),cost(cost),px(px),py(py){}
  bool operator < (const Data& a)const{
    return P+Q < a.P+a.Q;
  }
};

int H,W,A,sp_x,sp_y;
char field[101][101];
int mincost[101][101][11][11][4];
int dx[] = {1,0,-1,0}; // 右、下、左、上
int dy[] = {0,1,0,-1};

inline bool isValid(int x,int y){ return 0 <= x && x < W && 0 <= y && y < H; }

inline int getType(int c_dir,int n_dir){
  if( c_dir == 0 ){
    if( n_dir == 3 ) return 0; // P -> 0, Q -> 1
    if( n_dir == 1 ) return 1;
  } else if( c_dir == 1 ){
    if( n_dir == 2 ) return 0;
    if( n_dir == 0 ) return 1;
  } else if( c_dir == 2 ){
    if( n_dir == 1 ) return 0;
    if( n_dir == 3 ) return 1;
  } else{
    if( n_dir == 0 ) return 0;
    if( n_dir == 2 ) return 1;
  }
  return -1;
}

int main(){
  cin >> H >> W >> A;
  rep(i,H)rep(j,W){
    cin >> field[i][j];
    if( field[i][j] == 'S' ) sp_x = j, sp_y = i;
  }

  rep(i,H)rep(j,W)rep(k,A+1)rep(l,A+1)rep(m,4)mincost[i][j][k][l][m] = IINF;
  priority_queue<Data> Q;
  if( isValid(sp_x+dx[1],sp_y+dy[1]) && field[sp_y+dy[1]][sp_x+dx[1]] != '#' ){
    Q.push(Data(sp_x+dx[1],sp_y+dy[1],3,A,A,1,sp_x,sp_y));
    mincost[sp_y][sp_x][A][A][3] = 1;
  }
  while(!Q.empty()){
    Data data = Q.top(); Q.pop();
    int x = data.x, y = data.y;
    if( field[y][x] == 'G' ){
      cout << 2*A-(data.P+data.Q) << endl;
      return 0;
    }
    rep(i,4){
      if( i == data.dir ) continue;
      int nx = x + dx[i], ny = y + dy[i];
      if( field[ny][nx] == 'S' && i == 3 ) continue;
      if(!isValid(nx,ny))continue;
      if(field[ny][nx] == '#')continue;
      int next_P = data.P, next_Q = data.Q;
      int type = getType(data.dir,i);
      if( type == 0 ) next_P--;
      if( type == 1 ) next_Q--;
      if( type != -1 && field[y][x] == 'S' ) continue;
      if( next_P < 0 || next_Q < 0) continue;
      if(mincost[ny][nx][next_P][next_Q][i] > data.cost+1){
	mincost[ny][nx][next_P][next_Q][i] = data.cost+1;
	Q.push(Data(nx,ny,(i+2)%4,next_P,next_Q,data.cost+1,x,y));
      }
    }
  }
  cout << -1 << endl;
  return 0;
}