#include <iostream>
#include <cstdio>
#include <cmath>
#include <vector>
#include <map>
#include <stack>
#include <queue>
#include <algorithm>
#include <set>
#include <cassert>

#define FOR(i,a,b) for(int i=(a);i<(b);i++)
#define REP(i,j) FOR(i,0,j)
#define mp std::make_pair

typedef long long ll;
typedef unsigned long long ull;
typedef std::pair<int,int> P;
typedef std::string::const_iterator State;

const int INF = 1001001001;

// S N E W(南北東西)
const int dx[8] = {0, 0, 1, -1, 1, 1, -1, -1}, dy[8] = {1, -1, 0, 0, 1, -1, 1, -1};

struct Tag_{
    std::string name;
    int child_n;
};

std::vector<Tag_> tags;
std::vector<P> ps1, ps2;

std::string Open(State& begin){
    begin += 1;

    std::string res = "";
    while(*begin != '>'){
        res += *begin;
        begin += 1;
    }
    begin += 1;

    return res;
}

void Close(State& begin){
    while(*begin != '>'){
        begin += 1;
    }
    begin += 1;
}

int Number(State& begin){
    int res = 0;
    while(std::isdigit(*begin)){
        res = res * 10 + (*begin - '0');
        begin += 1;
    }
    return res;
}

std::vector<int> TagValues(State& begin){
    std::vector<int> res;
    res.push_back(Number(begin));
    begin += 1;
    res.push_back(Number(begin));
    begin += 1;
    res.push_back(Number(begin));
    begin += 1;
    res.push_back(Number(begin));
    return res;
}

void Tag(State& begin){
    Tag_ t;
    t.name = Open(begin);
    t.child_n = 0;
    
    std::vector<int> ps = TagValues(begin);

    while(*(begin+1) != '/'){Tag(begin); t.child_n += 1;}
    
    Close(begin);

    tags.push_back(t);

    ps1.push_back(mp(ps[0], ps[1]));
    ps2.push_back(mp(ps[2], ps[3]));
}

int touchedObject(int x, int y){
    REP(i, (int)tags.size()){
        if(ps1[i].first <= x && x <= ps2[i].first &&
           ps1[i].second <= y && y <= ps2[i].second){
            return i;
        }
    }
    return -1;
}

int main(){
    int n;
    while(std::cin >> n, n){
        tags.clear();
        ps1.clear();
        ps2.clear();

        std::string gui;
        std::cin >> gui;

        State state = gui.begin();
        Tag(state);
    
        REP(i, n){
            int x, y;
            std::cin >> x >> y;

            int index = touchedObject(x, y);
            if(index != -1){
                std::cout << tags[index].name << " " << tags[index].child_n << std::endl;
            }else{
                std::cout << "OUT OF MAIN PANEL 1" << std::endl;
            }
        }
    }
}