#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <sstream>
#include <cstring>
#include <cstdio>
#include <cstdlib>
#include <cmath>
#include <queue>
#include <stack>
#include <map>
#include <set>
#include <numeric>
#include <cctype>
#include <tuple>
#include <iterator>
#include <bitset>
#include <random>
#include <assert.h>
#include <unordered_map>
#include <array>
#include <ctime>

#ifdef _MSC_VER
#include <agents.h>
#endif

#define FOR(i, a, b) for(int i = (a); i < (int)(b); ++i)
#define rep(i, n) FOR(i, 0, n)
#define ALL(v) v.begin(), v.end()
#define REV(v) v.rbegin(), v.rend()
#define MEMSET(v, s) memset(v, s, sizeof(v))
#define X first
#define Y second
#define MP make_pair
#define umap unordered_map

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef pair<int, int> P;
typedef unsigned int uint;

int c[20], v[20];
int visit[1 << 20];
int ans;
int n, U;

void dfs(int cnt, int bits, int sum){
	if (visit[bits]) return;
	visit[bits] = 1;
	if (ans <= cnt) return;
	if (sum >= U){
		ans = cnt;
		return;
	}

	for (int i = 0; i < n; ++i){
		if (bits&(1 << i))continue;
		if ((bits&v[i]) != v[i]) continue;
		dfs(cnt + 1, bits | (1 << i), sum + c[i]);
	}
}

int main(){
	while (cin >> n >> U, n|U){
        rep(i, n){
            cin >> c[i];
            int k;
            cin >> k;
			v[i] = 0;
            rep(j, k){
                int x;
                cin >> x;
                v[i] |= 1<<x;
            }
        }
        ans = n;
		MEMSET(visit, 0);
		dfs(0, 0, 0);
        cout << ans << endl;
	}

	return 0;
}