#include <stdio.h>
#include <math.h>

#include <bitset>
#include <vector>
#include <map>
#include <set>
#include <stack>
#include <queue>
#include <cstring>
#include <string>
#include <sstream>
#include <algorithm>
#include <iomanip>
#include <iostream>

#define VARIABLE(x) cerr << #x << "=" << x << endl
#define BINARY(x) cerr << #x << "=" << static_cast<bitset<16> >(x) << endl;
#define rep(i,n) for(int i=0;i<(int)(n);i++)
#define REP(i,m,n) for (int i=m;i<(int)(n);i++)
#define if_range(x, y, w, h) if (0<=(int)(x) && (int)(x)<(int)(w) && 0<=(int)(y) && (int)(y)<(int)(h))

const int INF = 10000000;
int dx[4]={-1, 0, 1, 0}, dy[4]={0, -1, 0, 1};
using namespace std;
typedef pair<int, int> P;

/** Problem1166 : Amazing Mazes **/
bool wall[30][30][4];
int vis[30][30];
int W, H;

int solve()
{
	queue<P> Q;
	Q.push(P(0,0));
	vis[0][0]=1;
	
	while (Q.size()) {
		P p = Q.front(); Q.pop();
		
		rep(i, 4) {
			int nx = p.first+dx[i], ny = p.second+dy[i];
			if_range(nx, ny, W, H) {
				if (vis[nx][ny]==0) {
					if (!wall[p.first][p.second][i]) {
						Q.push(P(nx, ny));
						vis[nx][ny]=vis[p.first][p.second]+1;
					}
				}
			}
		}
	}
	
	return vis[W-1][H-1];
}

int main() {
	while (cin>>W>>H, W||H) {
		fill(wall[0][0], wall[0][0]+4*30*30, false);
		fill(vis[0], vis[0]+30*30, 0);
		
		rep(i, 2*H-1) {
			if (i%2==0) {
				rep(j, W-1) {
					int a; cin>>a;
					if (a) {
						wall[j][i/2][2]=true;
						wall[j+1][i/2][0]=true;
					}
				}
			} else {
				rep(j, W) {
					int a; cin>>a;
					if (a) {
						wall[j][i/2][3]=true;
						wall[j][i/2+1][1]=true;
					}
				}
			}
		}
		cout << solve() << endl;
	}
}