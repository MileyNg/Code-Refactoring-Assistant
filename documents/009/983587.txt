#include <cstdio>
#include <cstring>
#include <cmath>
#include <iostream>
#include <sstream>
#include <algorithm>
#include <numeric>
#include <functional>
#include <vector>
#include <queue>
#include <string>
#include <complex>

#define REP(i,n) for (int i = 0; i < (n); i++)
#define FOR(i,s,n) for (int i = (s); i < (n); i++)
#define ALLOF(c) c.begin(), c.end()
#define RANGEOF(c,i,n) c.begin() + (i), c.begin() + (i) + (n)
#define EPS 1e-9
#define INF 1000000000
using namespace std;

template <class T> T read() { T t; cin >> t; return t; }
template <class T> vector<T> read(int n) { vector<T> v; REP(i,n) { v.push_back(read<T>()); } return v; }
template <class T> vector<vector<T>> read(int n, int m)
{
	vector<vector<T>> v;
	REP(i,n) { v.push_back(read<T>(m)); }
	return v;
}

template <class T> void write(const T &t) { cout << t << endl; }
template <class T> void write(const T &t, const T &t2) { cout << t << ' ' << t2 << endl; }
template <class T> void write(const vector<T> &v)
{
	ostringstream ss; 
	for (auto x : v) ss << x << ' ';
	auto s = ss.str();
	cout << s.substr(0, s.length() - 1) << endl;
}

struct _Reader { template <class T> _Reader operator ,(T &rhs) { cin >> rhs; return *this; } };
#define READ(t,...) t __VA_ARGS__; _Reader(), __VA_ARGS__

void solve();
int main() { solve(); return 0; }

/// template end ///



void solve()
{
	while (true)
	{
		READ(int, H, W);
		if (!(W|H)) { break; }
		auto field = read<string>(W);
		for (auto &f : field) { f.insert(f.begin(), '#'); f.push_back('#'); }
		field.insert(field.begin(), string(H+2, '#'));
		field.push_back(string(H+2, '#'));
		W += 2; H += 2;

		int sx = 0, sy = 0;
		REP(x,W) REP(y,H) if (field[x][y] == '@') { sx = x; sy = y; }

		typedef complex<int> P;
		queue<P> q;
		int count = 0;
		q.push(P(sx, sy));
		while (!q.empty())
		{
			P cur = q.front(); q.pop();
			if (field[cur.real()][cur.imag()] == '#') { continue; }
			count++;
			field[cur.real()][cur.imag()] = '#';
			if (field[cur.real() + 1][cur.imag()] != '#') q.push(P(cur.real() + 1, cur.imag()));
			if (field[cur.real() - 1][cur.imag()] != '#') q.push(P(cur.real() - 1, cur.imag()));
			if (field[cur.real()][cur.imag() + 1] != '#') q.push(P(cur.real(), cur.imag() + 1));
			if (field[cur.real()][cur.imag() - 1] != '#') q.push(P(cur.real(), cur.imag() - 1));
		}
		write(count);
	}
}