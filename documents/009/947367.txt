#include <cstdlib>
#include <cstring>
#include <iostream>
#include <vector>
using namespace std;

constexpr int MAX_N = 500000;
int n;
int l[MAX_N], r[MAX_N];
int memo[MAX_N][2];

int dfs(int v, bool used, int depth) {
	if(v == n) return 0;

	int &res = memo[v][used];
	if(res != -1) return res;

	if(used) {
		res = dfs(l[v], true, depth + 1) + dfs(r[v], true, depth + 1) + depth + 2;
	}
	else {
		res = min(dfs(l[v], false, depth + 1) + dfs(r[v], true, depth + 1) + 2,
				  dfs(l[v], true, depth + 1) + dfs(r[v], false, depth + 1) + 2);
	}

	return res;
}

int main() {
	cin.tie(nullptr);
	ios::sync_with_stdio(false);

	cin >> n;

	for(int i = 1; i < n; ++i) {
		cin >> l[i] >> r[i];
	}

	memset(memo, -1, sizeof(memo));
	cout << dfs(l[1], false, 1) + dfs(r[1], false, 1) + 2 << endl;

	return EXIT_SUCCESS;
}