#include<iostream>
#include<map>
#include<stack>
  
using namespace std;
   
#define NMAX 100
#define INF 10000000
#define WALL -1
typedef map<int,int>::value_type VT;
  
struct data{
    int x,y,turn;
};
  
int main(void){
      
    int t,n;
    int x,y;
    map<int,int> road;
    stack<data> no;
    data tm,da;
    int dx[]={1,1,0,-1,-1,0};
    int dy[]={0,1,1,0,-1,-1};
    int cnt;
  
    for(int i=-35;i<=35;i++){
        for(int j=-35;j<=35;j++){
        road.insert(VT(i+j*100,INF));
        }
    }
    while(1){
        cin>>t>>n;
        if(t==0&&n==0) break;
        for(int i=-35;i<=35;i++){
            for(int j=-35;j<=35;j++){
                road[i+j*100]=INF;
            }
        }
        for(int i=-31;i<=31;i++){
            road[-31+i*100]=WALL;
            road[31+i*100]=WALL;
            road[i+31*100]=WALL;
            road[i-31*100]=WALL;
        }
  
        for(int i=0;i<n;i++){
            cin>>x>>y;
            road[y+x*100]=WALL;
        }
        cin>>x>>y;
        tm.x=x,tm.y=y,tm.turn=0;
        no.push(tm);
        road[y+x*100]=0;
        cnt=1;
        while(!no.empty()){
            tm=no.top();
            no.pop();
            if(tm.turn==t) continue;
            for(int i=0;i<6;i++){
                if(road[(tm.y+dy[i])+(tm.x+dx[i])*100]>road[(tm.y)+(tm.x)*100]+1){
                    if(road[(tm.y+dy[i])+(tm.x+dx[i])*100]==INF) cnt++;
                    road[(tm.y+dy[i])+(tm.x+dx[i])*100]=road[(tm.y)+(tm.x)*100]+1;
                    da.x=tm.x+dx[i];
                    da.y=tm.y+dy[i];
                    da.turn=tm.turn+1;
                    no.push(da);
                }
            }
        }
        cout<<cnt<<endl;
    }
      
    return 0;
}