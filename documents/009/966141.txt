#include <cstdio>
using namespace std;

struct C {
  int h;
  int w;
  int fr;
  int fc;
  int s;
  bool shape[20][20];

  void find_upperleft(bool b, int &r, int &c) {
    bool flg = false;
    for (int i=0; i<h; i++) {
      for (int j=0; j<w; j++) {
        if (shape[i][j] == b) {
          r = i;
          c = j;
          flg = true;
          break;
        }
      }
      if (flg) break;
    }
  }

  void set(C &obj, bool rot) {
    if (!rot) {
      h = obj.h;
      w = obj.w;
      s = obj.s;
      fr = obj.fr;
      fc = obj.fc;
      for (int i=0; i<h; i++) {
        for (int j=0; j<w; j++) {
          shape[i][j] = obj.shape[i][j];
        }
      }
    } else {
      h = obj.w;
      w = obj.h;
      s = obj.s;
      for (int i=0; i<h; i++) {
        for (int j=0; j<w; j++) {
          shape[i][j] = obj.shape[obj.h-j-1][i];
        }
      }
      find_upperleft(true, fr, fc);
    }
  }

  bool can_put(C &obj, int r, int c) {
    int sr, sc;
    sr = r - obj.fr;
    sc = c - obj.fc;
    if (sr<0 || sc<0 || sr+obj.h>=h || sc+obj.w>=w) return false;

    for (int i=0; i<obj.h; i++) {
      for (int j=0; j<obj.w; j++) {
        if (!obj.shape[i][j]) continue;
        if (shape[sr+i][sc+j]) return false;
      }
    }
    return true;
  }

  void put(C &obj, int r, int c, bool b) {
    int sr, sc, er, ec;
    sr = r - obj.fr;
    sc = c - obj.fc;
    for (int i=0; i<obj.h; i++) {
      for (int j=0; j<obj.w; j++) {
        if (!obj.shape[i][j]) continue;
        shape[sr+i][sc+j] = b;
      }
    }
    if (b) {
      s -= obj.s;
    } else {
      s += obj.s;
    }
  }

};

int n, p, np;
C board;
C board_buf;
C piece[10][4];
int t[10];
bool used[10];

bool dfs(int x, int l) {
  if (!l) return !board.s;
  if (x >= np) return false;
  if (!used[x]) {
    int r, c;
    board.find_upperleft(false, r, c);
    for (int i=0; i<4; i++) {
      if (board.can_put(piece[t[x]][i], r, c)) {
        board.put(piece[t[x]][i], r, c, true);
        used[x] = true;
        if (dfs(0, l-1)) return true;
        board.put(piece[t[x]][i], r, c, false);
        used[x] = false;
      }
    }
  }
  return dfs(x+1, l);
}

int main() {
  char c;
  int s;
  bool ans;
  scanf("%d %d\n", &board.h, &board.w);
  s = 0;
  for (int i=0; i<board.h; i++) {
    for (int j=0; j<board.w; j++) {
      c = getchar();
      board.shape[i][j] = (c == '.' ? false : true);
      if (c == '.') s++;
    }
    c = getchar();
  }
  board.s = s;
  board_buf.set(board, false);

  scanf("%d", &n);
  for (int i=0; i<n; i++) {
    s = 0;
    scanf("%d %d\n", &piece[i][0].h, &piece[i][0].w);
    for (int j=0; j<piece[i][0].h; j++) {
      for (int k=0; k<piece[i][0].w; k++) {
        c = getchar();
        piece[i][0].shape[j][k] = (c == '.' ? false : true);
        if (c == '#') s++;
      }
      c = getchar();
    }
    piece[i][0].s = s;
    piece[i][0].find_upperleft(true, piece[i][0].fr, piece[i][0].fc);
    
    for (int j=0; j<3; j++) {
      piece[i][j+1].set(piece[i][j], true);
    }
  }

  scanf("%d", &p);
  for (int i=0; i<p; i++) {
    scanf("%d", &np); 
    for (int j=0; j<np; j++) {
      scanf("%d", &t[j]);
      --t[j];
    }

    board.set(board_buf, false);
    for (int j=0; j<np; j++) {
      used[j] = false;
    }

    ans = dfs(0, np);
    if (ans) {
      printf("YES\n");
    } else {
      printf("NO\n");
    }
  }


  return 0;
}