#include <bits/stdc++.h>
#define REP(i,n) for(int i=0; i<(int)(n); ++i)

using namespace std;

struct clasure{
    int x[3];
};

int to_id(char c){
    if(isupper(c)) return c - 'A';
    else return c - 'a' + 26;
}

struct SAT3{
    vector<clasure> cls;
    vector<int> state;
    SAT3(int N, vector<clasure> cls_) :
        cls(cls_), state(N, -1) {}
    vector<int> solve(){
        if(!dfs(0)) return vector<int>(100, -1);
        vector<int> res;
        REP(i, state.size()) if(state[i] == 1) {
            res.push_back(i);
        }
        return res;
    }
    bool dfs(int k){
        if(k == cls.size()) return true;
        int x[3], y[3];
        for(int i = 0; i < 3; i++){
            x[i] = cls[k].x[i] % 26;
            y[i] = cls[k].x[i] / 26;
        }
        vector<int> memo = state;
        for(int i = 0; i < 3; i++){
            bool ok = true;
            for(int j = 0; j <= i; j++){
                int ny = y[j] ^ (j != i);
                if(state[x[j]] != -1 && state[x[j]] != ny) ok = false;
                state[x[j]] = ny;
            }
            if(ok) {
                if(dfs(k + 1)) return true;
            }
            state = memo;
        }
        return false;
    }
};

int main(){
    int N;
    while(cin >> N && N){
        string s[3];
        REP(i, 3) cin >> s[i];
        vector<clasure> cls;
        REP(i, N){
            REP(S, 1 << 3){
                clasure c;
                REP(j, 3){
                    c.x[j] = to_id(s[j][3 * i + 1 + (S >> j & 1)]);
                }
                sort(c.x, c.x + 3);
                cls.push_back(c);
            }
        }
        random_shuffle(cls.begin(), cls.end());

        SAT3 solver(26, cls);
        vector<int> res = solver.solve();
        if(res.size() > 30){
            cout << -1 << endl;
        }else{
            cout << res.size();
            REP(i, res.size()) cout << " " << (char)(res[i] + 'A');
            cout << endl;
        }
    }
    return 0;
}