#include<iostream>
#include<algorithm>
#include<vector>

using namespace std;

#define rep(i, n) for (int i = 0; i < int(n); ++i)

char piece[9][4];

void rot(int i) {
  rep (j, 3) swap(piece[i][j], piece[i][j + 1]);
}

bool ok(char a, char b) {return (a ^ b) == 32;}

int solve(int i, int j) {
  int res = 0;
  rep (k, 4) {
    rot(i * 3 + j);
    if (i > 0 && !ok(piece[i * 3 + j][0], piece[i * 3 + j - 3][2])) continue;
    if (j > 0 && !ok(piece[i * 3 + j][1], piece[i * 3 + j - 1][3])) continue;
    if (j == 2) {
      if (i == 2) ++res;
      else res += solve(i + 1, 0);
    } else {
      res += solve(i, j + 1);
    }
  }
  return res;
}

bool mem[9][9];

bool check(vector<int> per) {
  rep (i, 3) rep (j, 3) {
    if (i > 0) if (!mem[per[i * 3 + j]][per[i * 3 + j - 3]]) return false;
    if (j > 0) if (!mem[per[i * 3 + j]][per[i * 3 + j - 1]]) return false;
  }
  return true;
}

void solve() {
  vector<string> p(9);
  rep (i, 9) cin >> p[i];
  rep (i, 9) rep (j, 9) mem[i][j] = false;
  rep (i, 9) rep (j, 9) rep (k1, 4) rep (k2, 4) if (ok(p[i][k1], p[j][k2])) mem[i][j] = true;
  vector<int> per;
  rep (i, 9) per.push_back(i);
  int res = 0;
  do {
    if (!check(per)) continue;
    rep (i, 9) rep (j, 4) piece[i][j] = p[per[i]][j];
    res += solve(0, 0);
  } while (next_permutation(per.begin(), per.end()));
  cout << res << endl;
}

int main() {
  int n;
  cin >> n;
  rep (i, n) solve();
}