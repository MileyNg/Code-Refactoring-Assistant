#include <stdio.h>

typedef struct _node{
	long long int p;
	long long int q;
	long long int r;
	long long int b;
	long long int left;	//p-side mass
	long long int right;	//q-side mass
} Node;
long long int calc_mass(int trgt);
long long int calc_gcd( long long int a, long long int b);
Node MOB[102];
long long int memo[102];

int main(){

	int n;
	long long int chk[102];
	int i;
	long long int p;
	long long int q;
	long long int r;
	long long int b;
	int Top;
	long long int Total;
	long long int gcd;
	
	for(i=0;i<102;i++)memo[i]=0;
	
	while(1){
		scanf("%d\n",&n);
		if(n==0)break;

		for(i=1;i<=n;i++){
			scanf("%lld %lld %lld %lld\n",&p,&q,&r,&b);
			gcd=calc_gcd(p,q);
			MOB[i].p=p/gcd;
			MOB[i].q=q/gcd;
			MOB[i].r=r;
			MOB[i].b=b;
			MOB[i].left=0;
			MOB[i].right=0;
			
		}
		
		// search TOP;
		for(i=1;i<=n;i++)chk[i]=0;
		for(i=1;i<=n;i++){
			if(MOB[i].r!=0)chk[MOB[i].r]=1;
			if(MOB[i].b!=0)chk[MOB[i].b]=1;
		}
		for(i=1;i<=n;i++){
			if(chk[i]==0)Top=i;
		}
		Total=calc_mass(Top);
		printf("%lld\n",Total);

	}
	return 0;
}


long long int calc_gcd( long long int a, long long int b){
	 long long int c=1;
	 long long int gcd;

//	if(a==0 || b==0)return 0;
//	if(a==1 || b==1)return 1;

//	if(a<b){
//		c=a,a=b,b=c;
//	}

        gcd=1;
	
	while(a%b!=0){
		c=b;
		b=a%b;
		a=c;
	}
	gcd=b;

	return gcd;

}



long long int calc_mass(int trgt){
//printf("trgt=%d\n",trgt);
	long long int gcd;
	long long int left,right;
	long long int left2,right2;
	long long int ratio;
	if(memo[trgt]!=0)return memo[trgt];
//	if(MOB[trgt].r==0 && MOB[trgt].b==0){
//		gcd=calc_gcd(MOB[trgt].p,MOB[trgt].q);
//		MOB[trgt].left=MOB[trgt].q/gcd;
//		MOB[trgt].right=MOB[trgt].p/gcd;
//		return MOB[trgt].left+MOB[trgt].right;
//	}
	
	if(MOB[trgt].left==0){
		if(MOB[trgt].r==0)left=1;
		if(MOB[trgt].r!=0)left=calc_mass(MOB[trgt].r);
	}
	if(MOB[trgt].right==0){
		if(MOB[trgt].b==0)right=1;
		if(MOB[trgt].b!=0)right=calc_mass(MOB[trgt].b);
	}
	


	gcd=calc_gcd(right,left);
	left2=left/gcd,right2=right/gcd;
	gcd=calc_gcd(left2*MOB[trgt].q,right2*MOB[trgt].p);
	ratio=(right2*MOB[trgt].p)/gcd;
	MOB[trgt].left=left*ratio;
	
	ratio=(left2*MOB[trgt].q)/gcd;
	MOB[trgt].right=right*ratio;
	
	memo[trgt]=MOB[trgt].left+MOB[trgt].right;
	return memo[trgt];

}