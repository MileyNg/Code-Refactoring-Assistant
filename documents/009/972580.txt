#define _USE_MATH_DEFINES
#define _CRT_SECURE_NO_DEPRECATE

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <cmath>
#include <climits>
#include <cfloat>
#include <ctime>
#include <cassert>
#include <map>
#include <utility>
#include <set>
#include <iostream>
#include <memory>
#include <string>
#include <vector>
#include <algorithm>
#include <functional>
#include <sstream>
#include <complex>
#include <stack>
#include <queue>
#include <numeric>
#include <list>
#include <iomanip>
#include <fstream>
#include <iterator>

using namespace std;
const int MOD = 1000000007; // check!!!
const int INF = 100000000; //1e8

typedef long long ll;
typedef pair<int, int> Pii;
typedef pair<ll, ll> Pll;

#define FOR(i,n) for(int i = 0; i < (n); i++)
#define sz(c) ((int)(c).size())
#define ten(x) ((int)1e##x)
#define tenll(x) ((ll)1e##x)

class UnionFind {
	int n;
	vector<int> par;
	vector<int> rank;
public:
	UnionFind() {}
	UnionFind(int size) { reset(size); }

	void reset(int size) {
		n = size;
		par.resize(size);
		rank.resize(size);
		for (int i = 0; i < size; i++) par[i] = i, rank[i] = 0;
	}

	int find(int x) {
		if (par[x] == x) return x;
		return par[x] = find(par[x]);
	}

	void unite(int x, int y) {
		x = find(x), y = find(y);
		if (x == y) return;
		if (rank[x] < rank[y]) {
			par[x] = y;
		} else {
			par[y] = x;
			if (rank[x] == rank[y]) rank[x]++;
		}
		n--;
	}

	bool same(int x, int y) { return find(x) == find(y); }

	int size() { return n; }
};


int main() {
	int n;
	while (cin >> n, n) {
		UnionFind uf(n);
		bool b[50][35] = {};
		FOR(i, n) {
			int k; cin >> k;
			FOR(j, k) {
				int x; cin >> x;
				b[i][x] = true;
			}
		}
		int ans = -1;
		for(int i = 1;  i <= 30; i++){
			vector<int> v;
			FOR(j, n) if (b[j][i]) {
				v.push_back(j);
			}
			FOR(j, sz(v) - 1) uf.unite(v[j], v[j + 1]);
			if (uf.size() == 1) {
				ans = i;
				break;
			}
		}
		cout << ans << endl;
	}
	return 0;
}