#include<iostream>
#include<string>
#include<map>
using namespace std;
int vals;
pair<string, string> equation(string str){
  int i=0;
  for(i=0;i<(int)str.length();i++){
    if(str[i]=='=')break;
  }
  return make_pair(str.substr(0, i),str.substr(i+1));
}
bool formula(string str){
  if(str[0]=='-'){
    return !formula(str.substr(1));
  }if(isalpha(str[0])){
    return
      (str[0] == 'T')?true
      :(str[0] == 'F')?false
      :((vals >> (str[0]-'a')) & 1);
  }else if(str[0]=='('){
    int tcur=1, opc=-1, op=-1, depth=0;

    while(tcur<(int)str.length()){
      if(str[tcur]=='('){
        depth++;
      }else if(str[tcur]==')'){
        depth--;
      }else if(depth==0){
        if(str[tcur]=='+'){
          op=1;opc=tcur;
          break;
        }else if(str[tcur]=='*'){
          op=2;opc=tcur;
          break;
        }else if(str[tcur]=='-'
                 &&tcur+1<(int)str.length()
                 &&str[tcur+1]=='>'){
          tcur++;
          op=3;opc=tcur;
          break;
        }
        
      }
        tcur++;
    }
    switch(op){
    case -1:
      return formula(str.substr(1,str.length()-2));
    case 1:
      return formula(str.substr(1,opc-1))
        ||formula(str.substr(opc+1, str.length()-1 - (opc+1)));
    case 2:
      return formula(str.substr(1,opc-1))
        &&formula(str.substr(opc+1, str.length()-1 - (opc+1)));
    case 3:
      return !(formula(str.substr(1,opc-2))
               &&!formula(str.substr(opc+1, str.length()-1 - (opc+1))));
    default:
      cout<<"ERROR!"<<endl;
      return false;
    }
  }
}
int main(){
  string str;
  pair<string, string> eq;
  while(cin>>str&&str!="#"){
    eq=equation(str);
    int flg=1;
    for(vals=0;vals< 1<<10;vals++){
      if(formula(eq.first) != formula(eq.second)) flg=0;
    }
    (flg)?cout<<"YES"<<endl:cout<<"NO"<<endl;
  }
  return 0;
}