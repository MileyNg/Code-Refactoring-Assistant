#include<iostream>
#include<map>
#include<queue>

using namespace std;
 
#define NMAX 50

typedef map<int,bool>::value_type VT;

struct data{
	int x,y,turn;
};

int main(void){
	
	int t,n;
	int x,y;
	map<int,bool> road[31];
	queue<data> no;
	data tm,da;
	int dx[]={1,1,0,-1,-1,0};
	int dy[]={0,1,1,0,-1,-1};
	int cnt;

	for(int i=-31;i<=31;i++){
		for(int j=-31;j<=31;j++){
			for(int k=0;k<31;k++){
				road[k].insert(VT(i+j*100,true));
			}
		}
	}
	while(1){
		cin>>t>>n;
		if(t==0&&n==0) break;
		for(int i=-30;i<=30;i++){
			for(int j=-30;j<=30;j++){
				for(int k=0;k<31;k++){
					road[k][i+j*100]=true;
				}
			}
		}
		for(int i=-31;i<=31;i++){
			for(int k=0;k<31;k++){
			road[k][-31+i*100]=false;
			road[k][31+i*100]=false;
			road[k][i+31*100]=false;
			road[k][i-31*100]=false;
			}
		}

		for(int i=0;i<n;i++){
			cin>>x>>y;
			for(int k=0;k<31;k++){
				road[k][y+x*100]=false;
			}
		}
		cin>>x>>y;
		tm.x=x,tm.y=y,tm.turn=0;
		no.push(tm);
		cnt=0;
		while(!no.empty()){
			tm=no.front();
			no.pop();
			if(tm.turn==t){
				cnt++;
				continue;
			}
			for(int i=0;i<6;i++){
				if(road[tm.turn][(tm.y+dy[i])+(tm.x+dx[i])*100]==true){
					road[tm.turn][(tm.y+dy[i])+(tm.x+dx[i])*100]=false;
					da.x=tm.x+dx[i];
					da.y=tm.y+dy[i];
					da.turn=tm.turn+1;
					no.push(da);
				}
			}
		}
		if(road[t-1][y+x*100]==true) cnt++;
		cout<<cnt<<endl;
	}
	
	return 0;
}