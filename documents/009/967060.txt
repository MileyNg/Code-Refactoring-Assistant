#include <stdio.h>

#define DIGITS_LIMIT 80
#define NUM_UNIT 100000000
#define OVERFLOW -1

typedef struct {
    int digits;
    int length;
    int v[10];
} largenumber;


void clear_large_number(largenumber *num) {
    int i;
    for (i = 0; i < 10; i++) {
        num->v[i] = 0;
    }
}

void read_large_number(largenumber *num) {
    static char buf[DIGITS_LIMIT];
    char c;
    int i, j, m, x;

    while ((c = getc(stdin)) < '0');

    for (i = 0; c >= '0' && i < DIGITS_LIMIT; c = getc(stdin), i++) {
        buf[i] = c - '0';
    }
    if (i == DIGITS_LIMIT && c >= '0') {
        while ((c = getc(stdin)) >= '0');
        num->length = OVERFLOW;
        return;
    }
    num->digits = i;
    num->length = i / 8 + (i % 8 != 0);
    for (i=0, m=1, x=0; i < num->digits; i++) {
        x += buf[num->digits-i-1] * m;
        if (i % 8 == 7 || i == num->digits - 1) {
            num->v[i/8] = x;
            x = 0;
            m = 1;
        }
        else {
            m *= 10;
        }
    }
    return;
}

largenumber *sum_large_number(largenumber *x1, largenumber *x2) {
    int i, l, carry, v;
    l = x1->length > x2->length ? x1->length: x2->length;
    for (i = 0, carry = 0; i < l; i++) {
        v = x1->v[i] + x2->v[i] + carry;
        x1->v[i] = v % NUM_UNIT;
        carry = v / NUM_UNIT;
    }
    if (carry) {
        if (l == 10) {
            l = OVERFLOW;
        }
        else {
            x1->v[i] = carry;
            l += 1;
        }
    }

    x1->length = l;
    return x1;
}

void print_large_number(largenumber *num) {
    int i;
    for (i = num->length - 1; i >= 0; i--) {
        if (i == num->length - 1) {
            printf("%d", num->v[i]);
        }
        else {
            printf("%08d", num->v[i]);
        }
    }
    printf("\n");
}

int main() {
    char c, buf[DIGITS_LIMIT], overflow;
    int n, i, cnt, r1, r2;
    largenumber x1, x2;

    scanf("%d", &n);

    while (n--) {
        clear_large_number(&x1);
        clear_large_number(&x2);
        read_large_number(&x1);
        read_large_number(&x2);
        if (x1.length == OVERFLOW || x2.length == OVERFLOW) {
            printf("overflow\n");
            continue;
        }
        sum_large_number(&x1, &x2);
        if (x1.length == OVERFLOW) {
            printf("overflow\n");
            continue;
        }
        print_large_number(&x1);
    }

    return 0;
}