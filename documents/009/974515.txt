#include <bits/stdc++.h>
using namespace std;

#define dump(n) cout<<"# "<<#n<<'='<<(n)<<endl
#define repi(i,a,b) for(int i=int(a);i<int(b);i++)
#define peri(i,a,b) for(int i=int(b);i-->int(a);)
#define rep(i,n) repi(i,0,n)
#define per(i,n) peri(i,0,n)
#define all(c) begin(c),end(c)
#define mp make_pair
#define mt make_tuple

typedef unsigned int uint;
typedef long long ll;
typedef unsigned long long ull;
typedef pair<int,int> pii;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vl;
typedef vector<vl> vvl;
typedef vector<double> vd;
typedef vector<vd> vvd;
typedef vector<string> vs;

const int INF=1e9;
const int MOD=1e9+7;
const double EPS=1e-9;

template<typename T1,typename T2>
ostream& operator<<(ostream& os,const pair<T1,T2>& p){
	return os<<'('<<p.first<<','<<p.second<<')';
}
template<typename T>
ostream& operator<<(ostream& os,const vector<T>& a){
	os<<'[';
	rep(i,a.size()) os<<(i?" ":"")<<a[i];
	return os<<']';
}

typedef bitset<128> bset;
namespace std{
	bool operator<(const bset& a,const bset& b){
		rep(i,a.size()) if(a[i]!=b[i]) return a[i]<b[i];
		return false;
	}
	bool operator>(const bset& a,const bset& b){
		rep(i,a.size()) if(a[i]!=b[i]) return a[i]>b[i];
		return false;
	}
}

int solve(const vs& ss,bset mask,map<bset,int>& memo)
{
	if(memo.count(mask)) return memo[mask];
	if(mask.count()==1) return memo[mask]=0;
	
	int n=ss.size(),m=ss[0].size();
	int res=INF;
	rep(i,m){
		bset b;
		rep(j,n) if(mask[j] && ss[j][i]=='1') b[j]=1;
		if(b.none() || b==mask) continue;
		res=min(res,1+max(solve(ss,b,memo),solve(ss,mask^b,memo)));
	}
	return memo[mask]=res;
}

int main()
{
	for(int m,n;cin>>m>>n && m|n;){
		vs ss(n);
		rep(i,n) cin>>ss[i];
		
		map<bset,int> memo;
		cout<<solve(ss,bset(string(n,'1')),memo)<<endl;
	}
}