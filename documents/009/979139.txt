#include <cstdio>
#include <cmath>
#include <cstring>
#include <cstdlib>
#include <climits>
#include <ctime>
#include <queue>
#include <stack>
#include <algorithm>
#include <list>
#include <vector>
#include <set>
#include <map>
#include <iostream>
#include <deque>
#include <complex>
#include <string>
#include <iomanip>
#include <sstream>
#include <bitset>
#include <valarray>
#include <iterator>
using namespace std;
typedef long long int lli;
typedef unsigned int uint;
typedef unsigned char uchar;
typedef unsigned long long ull;
typedef pair<int, int> pii;
typedef vector<int> vi;

#define rep(i,x) for(int i=1;i<=(int)(x);i++)
#define REP(i,x) for(int i=0;i<(int)(x);i++)
#define FOR(i,c) for(__typeof((c).begin())i=(c).begin();i!=(c).end();i++)
#define RREP(i,x) for(int i=(x);i>=0;i--)
#define RFOR(i,c) for(__typeof((c).rbegin())i=(c).rbegin();i!=(c).rend();i++)
#define ALL(container) container.begin(), container.end()
#define SZ(container) ((int)container.size())

template<class T> bool chmax(T &a, const T &b) { if (a<b) { a=b; return 1; } return 0; }
template<class T> bool chmin(T &a, const T &b) { if (a>b) { a=b; return 1; } return 0; }
/*
template<class T> ostream& operator<<(ostream &os, const vector<T> &t) {
os<<"["; FOR(it,t) {if(it!=t.begin()) os<<","; os<<*it;} os<<"]"; return os;
}
*/
template<class T> ostream& operator<<(ostream &os, const set<T> &t) {
os<<"{"; FOR(it,t) {if(it!=t.begin()) os<<","; os<<*it;} os<<"}"; return os;
}
template<class S, class T> ostream& operator<<(ostream &os, const pair<S,T> &t) { return os<<"("<<t.first<<","<<t.second<<")";}

typedef vector<double> Array;
typedef vector<Array> Matrix;

ostream& operator<<(ostream &os, const Array &t) {
os<<"["; FOR(it,t) {if(it!=t.begin()) os<<","; os<<*it;} os<<"]"; return os;
}
ostream& operator<<(ostream &os, const Matrix &t) {
FOR(it,t)os<<*it<<endl;return os;
}


const int INF = 1<<28;
const double EPS = 1e-8;
const int MOD = 1000000007;

int p, q;
char str[1024];
main(){
	while(cin >> p >> q, p){
		Matrix m, n;
		int r=0, c=0, s=0;
		REP(i, p){
			cin >> str;
			char *pp = str;
			int ind = 0;
			for(;*pp=='.';pp++)ind++;
			Array a(4);
			a[0] = r;
			a[1] = c;
			a[2] = s;
			a[3] = ind;
			m.push_back(a);
			for(;*pp;pp++){
				if(*pp=='(') r++;
				if(*pp==')') r--;
				if(*pp=='{') c++;
				if(*pp=='}') c--;
				if(*pp=='[') s++;
				if(*pp==']') s--;
			}
		}
		r=0, c=0, s=0;
		REP(i, q){
			cin >> str;
			char *pp = str;
			int ind = 0;
			Array a(3);
			a[0] = r;
			a[1] = c;
			a[2] = s;
			n.push_back(a);
			for(;*pp;pp++){
				if(*pp=='(') r++;
				if(*pp==')') r--;
				if(*pp=='{') c++;
				if(*pp=='}') c--;
				if(*pp=='[') s++;
				if(*pp==']') s--;
			}
		}
		vector<int> ans(q, -2);
		rep(rr, 20)rep(cc, 20)rep(ss, 20){
			int f = 1;
			REP(i, p){
				if(m[i][0]*rr+m[i][1]*cc+m[i][2]*ss != m[i][3]){
					f = 0;
					break;
				}
			}
			if(!f) continue;
			REP(i, q){
				if(ans[i] == -2) ans[i] = n[i][0]*rr+n[i][1]*cc+n[i][2]*ss;
				else if(ans[i] != n[i][0]*rr+n[i][1]*cc+n[i][2]*ss) ans[i] = -1;
			}
		}
		REP(i, q) printf("%d%s", ans[i], i==q-1?"\n":" ");
	}
	return 0;
}