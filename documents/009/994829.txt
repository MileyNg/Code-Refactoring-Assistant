using System;
using System.Collections;
using System.Collections.Generic;
 
class TEST{
	static void Main(){
		while(true){
			//var d=Array.ConvertAll(Console.ReadLine().Split(' '),e=>int.Parse(e));
			var d=Console.ReadLine().Split(' ');
			
			if(int.Parse(d[0])==0&&int.Parse(d[1])==0)break;
			Sol mySol =new Sol(int.Parse(d[0]),int.Parse(d[1]));
			mySol.Solve();
		}
	}
}

class Sol{
	public void Solve(){
		int[] Catch=new int[N];
		for(int i=0;i<N;i++){
			Catch[i]=0;
		}

		Point[] UMove=new Point[N];
		double[] Time=new double[N];
		for(int i=0;i<M;i++){
			for(int j=0;j<N;j++){
				// |Fris+ t*FVelo - Dogs|^2 == |t*Velo|^2
				//　よりtを求める（判別式でcan/cannot catchを判定
				double A=FVelo[i].X*FVelo[i].X+FVelo[i].Y*FVelo[i].Y-Velo[j]*Velo[j];
				double B=2*(Fris[i].X-Dogs[j].X)*FVelo[i].X+2*(Fris[i].Y-Dogs[j].Y)*FVelo[i].Y;
				double C=(Fris[i].X-Dogs[j].X)*(Fris[i].X-Dogs[j].X)+(Fris[i].Y-Dogs[j].Y)*(Fris[i].Y-Dogs[j].Y);
				double D=B*B-4*A*C;
//Console.WriteLine("dog{0}:",j);
//Console.WriteLine("A:{0,5:F2}\tB:{1,5:F2}\tC:{2,5:F2}\tD:{3,5:F2}",A,B,C,D);

				if(D<-eps){
					Time[j]=99999999999;
					UMove[j]=new Point(0,0);
				}
				if(D>=eps){
					D+=eps;
					double T1=(-B+Math.Sqrt(D))/(2.0*A);
					double T2=(-B-Math.Sqrt(D))/(2.0*A);
//Console.Write("T1:{0,5:F2}\t",T1);
//Console.Write("T2:{0,5:F2}\t",T2);
					List<double> L=new List<double>();
					L.Add(0.0);L.Add(T1);L.Add(T2);
					L.Sort();
					if(L[0]==0.0)Time[j]=L[1];
					if(L[1]==0.0)Time[j]=L[2];
					if(L[2]==0.0)Time[j]=0.0;
					
//Console.Write("Time:{0,5:E2}\t",Time[j]);
					
					//犬の方向を求める
					// フリスビーがt秒後にいる位置に t秒で速さVで移動する
					if(Time[j]==0.0){
						UMove[j]=new Point(0,0);
					}else{
						Point Ptemp=Fris[i];
						Ptemp=Ptemp.Add(FVelo[i].Times(Time[j]));
						Ptemp=Ptemp.Add(Dogs[j].Times(-1.0));
						if(Ptemp.Length!=0){
							UMove[j]=Ptemp.Times(Velo[j]/Ptemp.Length);
						}else{UMove[j]=new Point(0,0);}
					}
				}
//Console.WriteLine("UMove=({0,5:F2},{1,5:F2})",UMove[j].X,UMove[j].Y);
			}
			
			double Tmin=99999999999;
			int idx=-1;
			for(int j=0;j<N;j++){
				if(Time[j]>eps && Tmin>Time[j]){
					Tmin=Time[j];
					idx=j;
				}
			}
			
			Catch[idx]++;
			for(int j=0;j<N;j++){
				Time[j]=Tmin;
				Dogs[j]=Dogs[j].Add(UMove[j].Times(Time[j]));
			}
		}
		
		
		for(int i=0;i<N;i++){
			Console.Write(i==0?"{0}":" {0}",Catch[i]);
		}
		Console.WriteLine("");
		
		
	}

	Point[] Dogs;
	double[] Velo;
	Point[] Fris;
	Point[] FVelo;
	
	double eps;
	int N;
	int M;
	public Sol(int n_,int m_){
		N=n_;M=m_;
		eps=1e-12;
		//eps=0.0;
		
		Dogs=new Point[N];
		Velo=new double[N];
		for(int i=0;i<N;i++){
			//var d=rda();
			var d=rsa();
			Dogs[i]=new Point(double.Parse(d[0]),double.Parse(d[1]));
			Velo[i]=double.Parse(d[2]);
		}
		
		Fris=new Point[M];
		FVelo=new Point[M];
		for(int i=0;i<M;i++){
			//var d=rda();
			var d=rsa();
			Fris[i]=new Point(double.Parse(d[0]),double.Parse(d[1]));
			FVelo[i]=new Point(double.Parse(d[2]),double.Parse(d[3]));
		}
	}

	struct Point{
		public double X;
		public double Y;
		public Point(double x_,double y_){
			X=x_;Y=y_;
		}
		public Point Times(double r){
			this.X*=r;
			this.Y*=r;
			return this;
		}
		
		public Point Add(Point q){
			this.X+=q.X;
			this.Y+=q.Y;
			return this;
		}
		public double Length{
			get{return Math.Sqrt(this.X*this.X+this.Y*this.Y);}
		}
	}
	
	
	
	
	
	
	


	static String rs(){return Console.ReadLine();}
	static int ri(){return int.Parse(Console.ReadLine());}
	static long rl(){return long.Parse(Console.ReadLine());}
	static double rd(){return double.Parse(Console.ReadLine());}
	static String[] rsa(){return Console.ReadLine().Split(' ');}
	static int[] ria(){return Array.ConvertAll(Console.ReadLine().Split(' '),e=>int.Parse(e));}
	static long[] rla(){return Array.ConvertAll(Console.ReadLine().Split(' '),e=>long.Parse(e));}
	static double[] rda(){return Array.ConvertAll(Console.ReadLine().Split(' '),e=>double.Parse(e));}
}