
#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include <cfloat>
#include <climits>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <iostream>
#include <memory>
#include <string>

#include <algorithm>
#include <complex>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <vector>
#include <bitset>

using namespace std;

#ifdef _MSC_VER
#define __typeof__ decltype
#define strtok_r strtok_s
#endif

#define ITER(c)             __typeof__((c).begin())
#define FOREACH(it, c)      for (ITER(c) it=(c).begin(); it != (c).end(); ++it)
#define RITER(c)            __typeof__((c).rbegin())
#define RFOREACH(it, c)     for (RITER(c) it=(c).rbegin(); it != (c).rend(); ++it)
#define REP(i, n)           REPEAT(i, 0, n)
#define RREP(i, n)          RREPEAT(i, 0, n)
#define REPEAT(i, k, n)     for(int i = (k); i < ((k)+(n)); ++i)
#define RREPEAT(i, k, n)    for(int i = (k)+(n)-1; i >= (k); --i)
#define FROMTO(i,f,t)       for(int i = f; i < t; i++)
#define ALL(c)              (c).begin(), (c).end()
#define LLPOW(p1,p2)        ((ll)pow((double)(p1), (int)p2))
#define ESIZEOF(A)          (sizeof(A)/sizeof((A)[0]))
#define CIN_NO_SYNC         do { cin.tie(0); ios_base::sync_with_stdio(false); } while(0)
#define GETSTR(p)           fgets((p), sizeof(p), stdin)
#define CHOMP(p)            do{ char *_q = (p) + strlen(p)-1; if(*_q == '\n' || *_q == '\r') *_q = 0; } while(0)
#define FILL(m,v)           memset(m, v, sizeof(m))
#define mp                  make_pair
#define pb                  push_back
template<class _T> _T MAX(_T p1,_T p2){return (p1>p2)?p1:p2;} 
template<class _T> _T MIN(_T p1,_T p2){return (p1<p2)?p1:p2;} 
template <class _Tv> inline string join(const _Tv &v,string sep=" "){
    ostringstream s;FOREACH(it,v){if(it!=v.begin())s<<sep;s<<*it;};return s.str();
}

typedef long long ll;
typedef unsigned long long ull;
typedef double D;
typedef complex<D> P;
typedef vector<int> VI;
typedef vector<VI> VVI;
#define X real()
#define Y imag()
#define EPS (1e-9)
#define DEQ(p1,p2) (abs((p1)-(p2)) < EPS)

#ifdef _DEBUG
template<class _Tv> inline void _prfe(const char *_n,const _Tv _c,bool _p=false){
    ITER(_c) _it=_c.begin();
    if(_p){cout<<_n<<" = ["<<endl;for(;_it!=_c.end();++_it)cout<<"    "<<*_it<<endl;cout<<"]"<<endl; }
    else{cout<<_n<<" = [ "<<*_it++;for(;_it!=_c.end();++_it)cout<<", "<<*_it;cout<<" ]"<<endl; }
}
#define pf printf
#define pr(n) do{cout<<#n" = "<<(n)<<endl;}while(0)
#define prfe(n) _prfe(#n, n)
#define prfep(n) _prfe(#n, n, true)
#define dbgchk(n) do{if(n)throw;}while(0)
#else
#define pf(...) /* */
#define pr(...) /* */
#define prfe(...) /* */
#define prfep(...) /* */
#define dbgchk(...) /* */
#endif

template <class _Tc>
class Dijkstra {
public:
    static const int inf = 1<<29;
    int m_num;
    vector<vector<pair<int,_Tc> > > m;
    void init(int n){
        m_num = n;
        m.clear();
        m.resize(n);
    }
    void add(int u, int v, _Tc e){
        dbgchk(u < 0 || u >= m_num || v < 0 || v >= m_num || u == v);
        m[u].pb(mp(v,e));
        pf("(%d,%d) ",u,v); pr(e);
    }
    _Tc solve(int u, int v, vector<_Tc> *pcost = NULL, vector<int> *proute = NULL){
        dbgchk(u < 0 || u >= m_num || v < 0 || v >= m_num);
        int n = m_num;
        vector<_Tc> c(n, inf);
        vector<int> r(n, -1);
        priority_queue<pair<_Tc,int> > q;
        c[u] = 0;
        q.push(mp(0, u));

        while(!q.empty()){
            int u = q.top().second; q.pop();
            FOREACH(it,m[u]){
                int v = it->first;
                _Tc nc = c[u] + it->second;
                if(c[v] < nc) continue;
                c[v] = nc; r[v] = u;
                q.push(mp(-nc,v));
            }
        }
        if(pcost) *pcost = c;
        if(proute) *proute = r;
        return c[v];
    }
};

int b[1010], x[1010], y[1010];

typedef double ct;
int main(){
    int n, m;
    while(cin >> n && n){
        Dijkstra<ct> d;
        d.init(n);
        REP(i,n){
            cin >> b[i] >> x[i] >> y[i];
        }
        REP(i,n) REP(j,n){
            if(i == j) continue;
            int dist = (x[i]-x[j])*(x[i]-x[j])+(y[i]-y[j])*(y[i]-y[j]);
            if(dist <= 50*50){
                d.add(i,j,sqrt((double)dist));
            }
        }
        cin >> m;
        int s,g;

        REP(i,m){
            cin >> s >> g;
            int si, gi;
            si = find(b,b+n,s)-b;
            gi = find(b,b+n,g)-b;
            vector<ct> cost;
            vector<int> route;
            d.solve(si, gi, &cost, &route);
            if(cost[gi] == d.inf){
                cout << "NA" << endl;
                continue;
            }
            deque<int> rt;
            int v = gi;
            while(route[v] >= 0){
                rt.push_front(route[v]);
                v = route[v];
            }
            FOREACH(it,rt){
                cout << b[*it] << " ";
            }
            cout << b[gi] << endl;
            prfe(cost);
        }
    }
    return 0;
}